# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
name: Java CI with Gradle

on:
  push:
    branches: 
    - master
    - gh-actions
  pull_request:
    branches: 
    - master
    - gh-actions

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      #if: "false"
      run: |
        cd dev
        chmod +x gradlew
        ./gradlew cnf:initialize
        ./gradlew assemble
    - name: Upload liberty image
      #if: "false"
      uses: actions/upload-artifact@v2
      with:
        name: liberty-image
        if-no-files-found: error
        path: |
          dev/build.image/wlp/
  fat_tests:
    name: FAT Tests - ${{matrix.category}}
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: ${{matrix.timeout}}
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        category: [Basic, JCA, JDBC, JAXRS]
        include:
          - category: Basic
            timeout: 45
            fat-buckets: >
              build.example_fat
          - category: JDBC
            timeout: 45
            fat-buckets: >
              com.ibm.ws.jdbc_fat_derby
              com.ibm.ws.jdbc_fat_v41
          - category: JCA
            timeout: 45
            fat-buckets: >
              com.ibm.ws.jca_fat_bval
              com.ibm.ws.jca_fat_classloading
              com.ibm.ws.jca_fat_example_anno
          - category: JAXRS
            timeout: 45
            fat-buckets: >
              com.ibm.ws.jaxrs.2.1_fat
              com.ibm.ws.jaxrs.2.1_fat_extended
              com.ibm.ws.jaxrs.2.1.cdi.2.0_fat
              com.ibm.ws.jaxrs.2.1.sse_fat
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Download liberty image
      #if: "false"
      uses: actions/download-artifact@v2
      with:
        name: liberty-image
        path: dev/build.image/wlp/
    - name: Run FAT buckets
      shell: bash
      env:
        FAT_BUCKETS: ${{matrix.fat-buckets}}
        CATEGORY: ${{matrix.category}}
      run: |
        cd dev
        chmod +x gradlew
        chmod 777 build.image/wlp/bin/*
        
        echo "Will be running buckets $FAT_BUCKETS"
        for FAT_BUCKET in $FAT_BUCKETS
        do
          if [[ ! -f $FAT_BUCKET ]]; then
            echo "ERROR: Bucket $FAT_BUCKET does not exist.";
            exit 1;
          fi
        done
          
        FAILURE=false
        ./gradlew :cnf:initialize :com.ibm.ws.componenttest:build :fattest.simplicity:build
        for FAT_BUCKET in $FAT_BUCKETS
        do
          echo "### Running FAT bucket $FAT_BUCKET"
          ./gradlew :$FAT_BUCKET:buildandrun || FAILURE=true
        done
        
        echo "Done running all FAT buckets. Checking for failures now."
        rm -r failing_buckets &> /dev/null
        mkdir failing_buckets
        echo "### Bucket results";
        for FAT_BUCKET in $FAT_BUCKETS
        do
          if [[ -f "$FAT_BUCKET/build/libs/autoFVT/output/fail.log" ]]; then
            echo "  [ FAILED ] $FAT_BUCKET";
            pushd $FAT_BUCKET/build/libs/autoFVT/ &> /dev/null
            zip -r ../../../../failing_buckets/$FAT_BUCKET.zip output/ results/ &> /dev/null
            popd &> /dev/null
          else
            echo "  [ PASSED ] $FAT_BUCKET";
          fi
        done
        
        if $FAILURE; then
          echo "At least one bucket failed.";
          exit 1;
        fi
    - name: Upload FAT logs
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: FAT logs for group {{matrix.category}}
        path: dev/failing_buckets/
      
