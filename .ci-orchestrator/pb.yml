type: pipeline_definition
product: Liberty
name: Open Liberty - Personal
description: "Run a Personal Pipeline against an Open Liberty PR."

triggers:
- type: github
  description: "Runs an optimised Personal Pipeline against an Open Liberty PR, running FATs using the CI Orchestrator and Jenkins."
  triggerName: "ol-pbbeta"
  triggerRank: 50
  groups: ["LibertyDev"]
  keyword: "!build"
  aliasKeywords:
    - "!pbbeta"
    - "#pbbeta"
    - "#build"
    - "#personal"
    - "!personal"
  propertyDefinitions:
    # If a user defines this property, set it for all steps that use it except the "Distributed Full FATs" step.
    - name: fat.buckets.to.run
      defaultValue: ${PR Changes:fat.buckets.to.run}
      steps:
        - stepName: Compile Liberty Images
        - stepName: Compile FATs
        - stepName: Determine FATs Needed
        - stepName: Distributed Lite FATs
    # Disable IM buckets.
    - name: create.im.repo
      defaultValue: false
      steps:
        - stepName: Compile Liberty Images
    # Disable z/OS buckets.
    - name: spawn.zos
      defaultValue: false
      steps:
        - stepName: Compile Liberty Images
        - stepName: Compile FATs
        - stepName: z/OS FATs
        - stepName: z/OS Unittests
    # Enable the testing of the checkpoint feature, running the FATs (if any) in lite mode where only @CheckpointTest annotated test cases will be run.
    - name: spawn.checkpoint
      defaultValue: "true"
      steps:
        - stepName: Checkpoint FATs (Lite)

- type: manual
  triggerName: "ol-pbbeta-manual"
  description: "Runs an optimised Personal Pipeline against an Open Liberty PR, running FATs using the CI Orchestrator and Jenkins."
  triggerRank: 50
  groups: ["LibertyDev"]
  propertyDefinitions:
    - name: github_pr_user
      isRequired: true
      defaultValue: "username"
      description: "Name of Open Liberty user/org to checkout."
    - name: github_pr_branch
      isRequired: true
      defaultValue: "branch"
      description: "Name of Open Liberty branch to checkout."
    - name: github_pr_number
      isRequired: true
      defaultValue: "PR"
      description: "PR number in Open Liberty to checkout."
    - name: github_pr_api
      defaultValue: "https://api.github.com/repos/OpenLiberty/open-liberty/pulls/${github_pr_number}"
      description: "URL to PR in Open Liberty."
    # Enable the testing of the checkpoint feature, running the FATs (if any) in lite mode where only @CheckpointTest annotated test cases will be run.
    - name: spawn.checkpoint
      defaultValue: "true"
      steps:
        - stepName: Checkpoint FATs (Lite)

- type: github
  triggerName: "ol-fullpbbeta"
  description: "Runs an optimised Personal Pipeline against an Open Liberty PR, including building the IM and z/OS images, then running all FATs using the CI Orchestrator and Jenkins."
  triggerRank: 50
  groups: ["LibertyDev"]
  keyword: "!fullpbbeta"
  aliasKeywords:
    - "#fullpbbeta"
    - "!fullbuild"
    - "#fullbuild"
  propertyDefinitions:
    # Run all buckets in full mode.
    - name: fat.buckets.to.run
      defaultValue: all
      steps:
        - stepName: Compile Liberty Images
        - stepName: Compile FATs
        - stepName: Distributed Full FATs
    # Run IM buckets.
    - name: create.im.repo
      defaultValue: true
      steps:
        - stepName: Compile Liberty Images
    # Run z/OS buckets.
    - name: spawn.zos
      defaultValue: true
      steps:
        - stepName: Compile Liberty Images
        - stepName: Compile FATs
        - stepName: z/OS FATs
        - stepName: z/OS Unittests
    # Enable the testing of the checkpoint feature, running the FATs (if any) in lite mode where only @CheckpointTest annotated test cases will be run.
    - name: spawn.checkpoint
      defaultValue: "true"
      steps:
        - stepName: Checkpoint FATs (Lite)

steps:
- stepName: PR Changes
  workType: PRChangesDetection
  timeoutInMinutes: 30
  properties:
    githubPRApi: ${github_pr_api}
    githubPRNumber: ${github_pr_number}

- stepName: Compile Liberty Images
  coreStep: true
  workType: RTC
  projectName: "Open Liberty Personal Build CI Orchestrator - EBC"
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile FATs
      awaitOutputProperties: true
  timeoutInMinutes: 1440
  properties:
    build.stub.target: build.CachedWSCD.CompileImageOnly
    run.packaging.verification: ${PR Changes:run.packaging.verification}
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    disable.run.runBvtTests: ${PR Changes:disable.run.runBvtTests}
    disable.run.runUnitTests: ${PR Changes:disable.run.runUnitTests}
    run.chkpii: ${PR Changes:run.chkpii}
    run.findbugs: ${PR Changes:run.findbugs}
    spawn.zos: ${PR Changes:spawn.zos}
    create.im.repo: ${PR Changes:create.im.repo}
    personal.im.build: ${PR Changes:personal.im.build}
    disable.run.createDoc: ${PR Changes:disable.run.createDoc}
    skip.open.liberty.build.if.possible: ${PR Changes:skip.open.liberty.build.if.possible}
    skip.open.liberty.fats.if.possible: ${PR Changes:skip.open.liberty.fats.if.possible}
    spawn.fullfat.buckets: ${PR Changes:spawn.fullfat.buckets}
    fat.run.count: ${PR Changes:fat.run.count}
    skip.fat.tests: true
    upload.buckets.with.uuid: ${Compile FATs:execution_id}
  includeProperties:
    - file: compilePersonal.properties
    - file: compile.properties

- stepName: Unittest Open Liberty
  workType: RTC
  projectName: "Open Liberty Personal Build CI Orchestrator - EBC"
  conditionalRun:
    - type: ifFalse
      value: ${disable.run.runUnitTests}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
  timeoutInMinutes: 1440
  properties:
    build.stub.target: build.CachedWSCD.OLTest
    disable.run.runUnitTests: ${PR Changes:disable.run.runUnitTests}
  includeProperties:
    - file: compilePersonal.properties
    - file: compile.properties

- stepName: Compile FATs
  workType: RTC
  projectName: "Open Liberty Personal Build CI Orchestrator - EBC"
  dependsOn:
  - stepName: PR Changes
    awaitOutputProperties: true
  timeoutInMinutes: 1440
  properties:
    build.stub.target: build.CachedWSCD.CompileFATs
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    skip.open.liberty.build.if.possible: ${PR Changes:skip.open.liberty.build.if.possible}
    skip.open.liberty.fats.if.possible: ${PR Changes:skip.open.liberty.fats.if.possible}
    spawn.zos: ${PR Changes:spawn.zos}
    # Do not create IM buckets in this step because some require an image to compile,
    # so they are built in the Compile Liberty Images step.
    create.im.repo: false
    personal.im.build: false
  includeProperties:
  - file: compilePersonal.properties
  - file: compile.properties

- stepName: Determine FATs Needed
  workType: Jenkins
  projectName: dependencyMapper
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      awaitOutputProperties: true
  timeoutInMinutes: 120
  properties:
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    aggregationId: ${Compile Liberty Images:execution_id}
    buildType: personal
    bndFilesZipUrl: ${Compile Liberty Images:bndFilesZipUrl}
    imageUrl: ${Compile Liberty Images:imageUrl}
    changeDetectorImageUrl: ${Compile FATs:changeDetectorImageUrl}
    fatFeatureJsonUrl: ${Compile FATs:fatFeatureJsonUrl}
    githubPRApi: ${github_pr_api}

- stepName: Distributed Lite FATs
  workType: FAT
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    ebcPlan: See Shortlist
    ebcShortlist: jenkins-child.yml
  includeProperties:
    - file: fat.properties
    - file: fatMaxDurationOverrides.properties
    - file: jvms/dev/linux_x86_64.properties

- stepName: Distributed Full FATs
  workType: FAT
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    ebcPlan: See Shortlist
    ebcShortlist: jenkins-child.yml
    fat.buckets.to.run: ${PR Changes:spawn.fullfat.buckets}
    fat.test.mode: full
  includeProperties:
    - file: fat.properties
    - file: fatMaxDurationOverrides.properties
    - file: jvms/dev/linux_x86_64.properties

- stepName: Open Liberty Feature Start FATs
  workType: FAT
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    ebcPlan: See Shortlist
    ebcShortlist: jenkins-child.yml
    fat.test.mode: full
    fatPatternToMatch: build.featureStart.part\d*_fat # Pattern causes us to only execute the Open Liberty build.featureStart FATs.
    fats_to_omit: ""
    repeat_if_few_fats: false
    runner_minimum_total: 1
    runner_max_total: 4
    runner_threshold: 4
  includeProperties:
    - file: fat.properties
    - file: fatMaxDurationOverrides.properties
    - file: jvms/dev/linux_x86_64.properties

- stepName: Liberty Feature Start FATs
  workType: FAT
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    ebcPlan: See Shortlist
    ebcShortlist: jenkins-child.yml
    fat.test.mode: full
    fatPatternToMatch: build.featureStart.part\d*.was_fat # Pattern causes us to only execute the WebSphere Liberty build.featureStart FATs.
    repeat_if_few_fats: false
    runner_minimum_total: 1
    runner_max_total: 4
    runner_threshold: 4
  includeProperties:
    - file: fat.properties
    - file: fatMaxDurationOverrides.properties
    - file: jvms/dev/linux_x86_64.properties

- stepName: z/OS FATs
  workType: FAT
  conditionalRun:
    - type: ifTrue
      value: ${spawn.zos}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    command: ant -f build-ztest.xml localrun -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath
    dependenciesRelativePath: "" # asyncArchive.zip is in the same directory as the wlp-zosimage image.
    ebcPlan: managed-pool-zos-fat-test-jenkins-middleware.yml
    fatPatternToMatch: .*_zfat # Pattern causes us to only execute the z/OS FATs.
    fats_to_omit: ""
    product_image_type_under_test: wlp-zosimage
    reportingOS: zOS
    runner_minimum_total: 1
    runner_max_total: 4
    runner_threshold: 27
    runZosTests: true
    spawn.zos: ${PR Changes:spawn.zos}
  includeProperties:
    - file: fat.properties
    - file: jvms/dev/zOS_s390_64.properties

- stepName: z/OS Unittests
  workType: FAT
  conditionalRun:
    - type: ifTrue
      value: ${spawn.zos}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    command: ant -f build-zunittest.xml unittest -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath -lib ../prereq.published/lib -lib ../ant_build/lib/biz.aQute.bnd-3.3.0.jar -lib ../ant_build/lib/jsoup-1.7.2.jar
    dependenciesRelativePath: "" # asyncArchive.zip is in the same directory as the wlp-zosimage image.
    ebcPlan: managed-pool-zos-fat-test-jenkins-middleware.yml
    fatPatternToMatch: .*_ztest # Pattern causes us to only execute the z/OS unittests.
    fats_to_omit: ""
    product_image_type_under_test: wlp-zosimage
    reportingOS: zOS
    runner_minimum_total: 1
    runner_max_total: 2
    runZosTests: true
    spawn.zos: ${PR Changes:spawn.zos}
  includeProperties:
    - file: fat.properties
    - file: jvms/dev/zOS_s390_64_java11.properties

# This step runs any FATs which declare that they test the 'checkpoint' feature in an environment with CRIU installed.
# Checkpoint FATs therefore run twice in builds but the @CheckpointTest annotation and use of the fat.test.run.checkpoint.only property mean that in CRIU environments
# they only run the test cases with @CheckpointTest (skipping the others) and in non-CRIU environments they only run the unannotated test cases. Hence, there's no duplication of testing.
- stepName: Checkpoint FATs (Lite)
  workType: FAT
  conditionalRun:
    - type: ifTrue
      value: ${spawn.checkpoint}
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    ebcPlan: See Shortlist 
    ebcShortlist: jenkinsbuild-checkpoint-ubuntu22_x86.yml
    fat.test.run.checkpoint.only: true # Only run test cases with the @CheckpointTest annotation.
    limit.fat.buckets.to.feature: checkpoint # Limit the FATs to only those supporting the checkpoint feature.
    repeat_if_few_fats: false # Only a small number of FATs exercise the checkpoint feature and so we should not repeat them by default otherwise they'll run 10 times.
  includeProperties:
    - file: fat.properties
    - file: fatMaxDurationOverrides.properties
    - file: jvms/dev/checkpoint_linux_x86_64.properties # Custom JVM properties as Checkpoint is only supported on specific JVMs/levels.
