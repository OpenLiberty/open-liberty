type: pipeline_definition
product: Liberty
name: Open Liberty Personal Build
description: "Run a Personal build against an Open Liberty PR."
triggers:
- type: github
  description: "Runs an optimised Open Liberty personal build, running FATs using the CIOrchestrator/Jenkins."
  triggerName: "ol-pbbeta"
  triggerRank: 50
  groups: ["LibertyDev"]
  keyword: "!pbbeta"
  aliasKeywords:
  - "#build"
  - "!build"
  - "#pbbeta"
  propertyDefinitions:
  # If a user defines this property, set it for all steps that use it except the "Distributed Full FATs" step
  # because those steps are set to use a value calculated by the PR Changes step.
  - name: fat.buckets.to.run
    defaultValue: ${PR Changes:fat.buckets.to.run}
    steps:
    - stepName: Compile Liberty Images
    - stepName: Compile FATs
    - stepName: Determine FATs Needed
    - stepName: Distributed Lite FATs
  # Disable IM buckets.
  - name: create.im.repo
    defaultValue: false
    steps:
    - stepName: Compile Liberty Images
  # Disable z/OS buckets.
  - name: spawn.zos
    defaultValue: false
    steps:
    - stepName: Compile Liberty Images
    - stepName: Compile FATs
    - stepName: z/OS FATs
    - stepName: z/OS Unittests
  # Enable the testing of the checkpoint feature, running the FATs (if any) in lite mode where only @CheckpointTest annotated test cases will be run.
  - name: spawn.checkpoint
    defaultValue: "true"
    steps:
    - stepName: Checkpoint FATs (Lite)

- type: manual
  triggerName: "ol-pbbeta-manual"
  description: "Runs an optimised Open Liberty personal build, running FATs using the CIOrchestrator/Jenkins."
  triggerRank: 50
  groups: ["LibertyDev"]
  propertyDefinitions:
  - name: github_pr_user
    isRequired: true
    defaultValue: "Name of Open Liberty user or organization for checkout."
    description: "Name of Open Liberty user or organization for checkout."
  - name: github_pr_branch
    isRequired: true
    defaultValue: "Name of Open Liberty branch to checkout."
    description: "Name of Open Liberty branch to checkout."
  - name: github_pr_number
    isRequired: true
    defaultValue: "PR number in Open Liberty to checkout."
    description: "PR number in Open Liberty to checkout."
  - name: github_pr_api
    defaultValue: "https://api.github.com/repos/OpenLiberty/open-liberty/pulls/${github_pr_number}"
  # Enable the testing of the checkpoint feature, running the FATs (if any) in lite mode where only @CheckpointTest annotated test cases will be run.
  - name: spawn.checkpoint
    defaultValue: "true"
    steps:
    - stepName: Checkpoint FATs (Lite)

- type: github
  triggerName: "ol-fullpbbeta"
  description: "Runs an optimised Open Liberty personal build, including building the IM and z/OS images, then running all FATs using the CIOrchestrator/Jenkins."
  triggerRank: 50
  groups: ["LibertyDev"]
  keyword: "!fullpbbeta"
  aliasKeywords:
  - "#fullpbbeta"
  propertyDefinitions:
  # Run all buckets in full mode.
  - name: fat.buckets.to.run
    defaultValue: all
    steps:
    - stepName: Compile Liberty Images
    - stepName: Compile FATs
    - stepName: Distributed Full FATs
  # Run IM buckets.
  - name: create.im.repo
    defaultValue: true
    steps:
    - stepName: Compile Liberty Images
  # Run z/OS buckets.
  - name: spawn.zos
    defaultValue: true
    steps:
    - stepName: Compile Liberty Images
    - stepName: Compile FATs
    - stepName: z/OS FATs
    - stepName: z/OS Unittests
  # Enable the testing of the checkpoint feature, running the FATs (if any) in lite mode where only @CheckpointTest annotated test cases will be run.
  - name: spawn.checkpoint
    defaultValue: "true"
    steps:
    - stepName: Checkpoint FATs (Lite)

- type: manual
  description: "Runs a test Personal build which simulates an Open Liberty product-only change."
  triggerName: "Test: Product-only change."
  triggerRank: 50
  groups: ["CSD"]
  propertyDefinitions:
  - name: git.laos.clone.repository.username
    defaultValue: "fritze2"
    description: "Name of Open Liberty user or organization for checkout."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: git.laos.clone.checkout.branch
    defaultValue: "test-change-com.ibm.ws.jca"
    description: "Name of Open Liberty branch to checkout."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: buildLabelPrefix
    defaultValue: "fritze2-23250-"
    description: "RTC build label prefix."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: githubPRApi
    defaultValue: "https://api.github.com/repos/OpenLiberty/open-liberty/pulls/23250"
    description: "API URL to PR in Open Liberty."
    steps:
    - stepName: PR Changes
    - stepName: Determine FATs Needed
  - name: githubPRNumber
    defaultValue: "23250"
    description: "PR number in Open Liberty to checkout."
    steps:
    - stepName: PR Changes

- type: manual
  description: "Runs a test personal build which simulates an Open Liberty unit test-only change."
  triggerName: "Test: Unit test-only change."
  triggerRank: 50
  groups: ["CSD"]
  propertyDefinitions:
  - name: git.laos.clone.repository.username
    description: "Name of Open Liberty user or organization for checkout."
    defaultValue: "fritze2"
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: git.laos.clone.checkout.branch
    defaultValue: "test-change-com.ibm.ws.jmx-unittest"
    description: "Name of Open Liberty branch to checkout."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: buildLabelPrefix
    defaultValue: "fritze2-23738-"
    description: "RTC build label prefix."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: githubPRApi
    defaultValue: "https://api.github.com/repos/OpenLiberty/open-liberty/pulls/23738"
    description: "API URL to PR in Open Liberty."
    steps:
    - stepName: PR Changes
    - stepName: Determine FATs Needed
  - name: githubPRNumber
    defaultValue: "23738"
    description: "PR number in Open Liberty to checkout."
    steps:
    - stepName: PR Changes

- type: manual
  description: "Runs a test personal build which simulates an Open Liberty FAT-only change."
  triggerName: "Test: FAT-only change."
  triggerRank: 50
  groups: ["CSD"]
  propertyDefinitions:
  - name: git.laos.clone.repository.username
    description: "Name of Open Liberty user or organization for checkout."
    defaultValue: "fritze2"
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: git.laos.clone.checkout.branch
    defaultValue: "test-change-com.ibm.ws.jca_fat"
    description: "Name of Open Liberty branch to checkout."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: buildLabelPrefix
    defaultValue: "fritze2-23249-"
    description: "RTC build label prefix."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: githubPRApi
    defaultValue: "https://api.github.com/repos/OpenLiberty/open-liberty/pulls/23249"
    description: "API URL to PR in Open Liberty."
    steps:
    - stepName: PR Changes
    - stepName: Determine FATs Needed
  - name: githubPRNumber
    defaultValue: "23249"
    description: "PR number in Open Liberty to checkout."
    steps:
    - stepName: PR Changes

- type: manual
  description: "Runs a test personal build which simulates an Open Liberty BVT-only change."
  triggerName: "Test: BVT-only change."
  triggerRank: 50
  groups: ["CSD"]
  propertyDefinitions:
  - name: git.laos.clone.repository.username
    description: "Name of Open Liberty user or organization for checkout."
    defaultValue: "fritze2"
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: git.laos.clone.checkout.branch
    defaultValue: "test-change-com.ibm.ws.jca_fat_bvt"
    description: "Name of Open Liberty branch to checkout."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: buildLabelPrefix
    defaultValue: "fritze2-23248-"
    description: "RTC build label prefix."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: githubPRApi
    defaultValue: "https://api.github.com/repos/OpenLiberty/open-liberty/pulls/23248"
    description: "API URL to PR in Open Liberty."
    steps:
    - stepName: PR Changes
    - stepName: Determine FATs Needed
  - name: githubPRNumber
    defaultValue: "23248"
    description: "PR number in Open Liberty to checkout."
    steps:
    - stepName: PR Changes

- type: manual
  description: "Runs a test personal build which simulates an Open Liberty infrastructure only change."
  triggerName: "Test: Infrastructure only change."
  triggerRank: 50
  groups: ["CSD"]
  propertyDefinitions:
  - name: git.laos.clone.repository.username
    description: "Name of Open Liberty user or organization for checkout."
    defaultValue: "fritze2"
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: git.laos.clone.checkout.branch
    defaultValue: "test-change-infra"
    description: "Name of Open Liberty branch to checkout."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: buildLabelPrefix
    defaultValue: "fritze2-23739-"
    description: "RTC build label prefix."
    steps:
    - stepName: Compile Liberty Images
    - stepName: Unittest Open Liberty
    - stepName: Compile FATs
  - name: githubPRApi
    defaultValue: "https://api.github.com/repos/OpenLiberty/open-liberty/pulls/23739"
    description: "API URL to PR in Open Liberty."
    steps:
    - stepName: PR Changes
    - stepName: Determine FATs Needed
  - name: githubPRNumber
    defaultValue: "23739"
    description: "PR number in Open Liberty to checkout."
    steps:
    - stepName: PR Changes

steps:
- stepName: PR Changes
  workType: PRChangesDetection
  timeoutInMinutes: 30
  properties:
    githubPRApi: ${github_pr_api}
    githubPRNumber: ${github_pr_number}

- stepName: Compile Liberty Images
  coreStep: true
  workType: RTC
  projectName: "Open Liberty Personal Build CI Orchestrator - EBC"
  dependsOn:
  - stepName: PR Changes
    awaitOutputProperties: true
  - stepName: Compile FATs
    awaitOutputProperties: true
  timeoutInMinutes: 1440
  properties:
    build.stub.target: build.CachedWSCD.CompileImageOnly
    run.packaging.verification: ${PR Changes:run.packaging.verification}
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    disable.run.runBvtTests: ${PR Changes:disable.run.runBvtTests}
    disable.run.runUnitTests: ${PR Changes:disable.run.runUnitTests}
    run.chkpii: ${PR Changes:run.chkpii}
    run.findbugs: ${PR Changes:run.findbugs}
    spawn.zos: ${PR Changes:spawn.zos}
    create.im.repo: ${PR Changes:create.im.repo}
    personal.im.build: ${PR Changes:personal.im.build}
    disable.run.createDoc: ${PR Changes:disable.run.createDoc}
    skip.open.liberty.build.if.possible: ${PR Changes:skip.open.liberty.build.if.possible}
    skip.open.liberty.fats.if.possible: ${PR Changes:skip.open.liberty.fats.if.possible}
    spawn.fullfat.buckets: ${PR Changes:spawn.fullfat.buckets}
    fat.run.count: ${PR Changes:fat.run.count}
    skip.fat.tests: true
    upload.buckets.with.uuid: ${Compile FATs:execution_id}
  includeProperties:
  - file: compilePersonal.properties
  - file: compile.properties

- stepName: Unittest Open Liberty
  workType: RTC
  projectName: "Open Liberty Personal Build CI Orchestrator - EBC"
  dependsOn:
  - stepName: PR Changes
    awaitOutputProperties: true
  conditionalRun:
    - type: ifFalse
      value: ${disable.run.runUnitTests}
  timeoutInMinutes: 1440
  properties:
    build.stub.target: build.CachedWSCD.OLTest
    disable.run.runUnitTests: ${PR Changes:disable.run.runUnitTests}
  includeProperties:
  - file: compilePersonal.properties
  - file: compile.properties

- stepName: Compile FATs
  workType: RTC
  projectName: "Open Liberty Personal Build CI Orchestrator - EBC"
  dependsOn:
  - stepName: PR Changes
    awaitOutputProperties: true
  timeoutInMinutes: 1440
  properties:
    build.stub.target: build.CachedWSCD.CompileFATs
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    skip.open.liberty.build.if.possible: ${PR Changes:skip.open.liberty.build.if.possible}
    skip.open.liberty.fats.if.possible: ${PR Changes:skip.open.liberty.fats.if.possible}
    spawn.zos: ${PR Changes:spawn.zos}
    # Do not create IM buckets in this step because some require an image to compile,
    # so they are built in the Compile Liberty Images step.
    create.im.repo: false
    personal.im.build: false
  includeProperties:
  - file: compilePersonal.properties
  - file: compile.properties

- stepName: Determine FATs Needed
  workType: Jenkins
  projectName: dependencyMapper
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      awaitOutputProperties: true
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  timeoutInMinutes: 120
  properties:
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    aggregationId: ${Compile Liberty Images:execution_id}
    buildType: personal
    bndFilesZipUrl: ${Compile Liberty Images:bndFilesZipUrl}
    imageUrl: ${Compile Liberty Images:imageUrl}
    changeDetectorImageUrl: ${Compile FATs:changeDetectorImageUrl}
    fatFeatureJsonUrl: ${Compile FATs:fatFeatureJsonUrl}
    githubPRApi: ${github_pr_api}

- stepName: Distributed Lite FATs
  workType: FAT
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  timeoutInMinutes: 1920
  properties:
    product_image_artifact_execution_id: ${Compile Liberty Images:execution_id}
    bucket_image_artifact_execution_id: ${Compile FATs:execution_id}
    changes_summary_artifact_execution_id: ${Compile Liberty Images:execution_id}
    runner_projectName: ebcTestRunner
    runner_workType: Jenkins
    runner_threshold: 5
    runner_minimum_total: 10
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    fat.test.mode: lite
    fats_to_omit: "build.featureStart.part1_fat, build.featureStart.part2_fat, build.featureStart.part3_fat, build.featureStart.part4_fat, build.featureStart.part1.was_fat, build.featureStart.part2.was_fat, build.featureStart.part3.was_fat, build.featureStart.part4.was_fat, com.ibm.ws.collective.controller.deploy_fat, com.ibm.ws.health.manager.odrlib_fat, com.ibm.ws.dynamic.routing_ihs_fat, com.ibm.ws.node.scaling_fat, com.ibm.ws.scaling.member_fat_multinode, com.ibm.ws.node.health_fat"
    fat_uploads_to_expect: ${Compile Liberty Images:fat_uploads_to_expect},${Compile FATs:fat_uploads_to_expect}
    outputServer: libertyfs.hursley.ibm.com
    outputPath: /liberty/personal/2/ciorchestrator
    command: ant -f build-test.xml localrun -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath
    aggregationId: ${Compile Liberty Images:execution_id}
    buildType: personal
    reportingOS: ubuntu22_x86
    ebcPlan: See Shortlist 
    ebcShortlist: jenkins-child.yml
    retry_failing_fats: true
    repeat_if_few_fats: true  #If there are fewer than x fat buckets then we will run each fat multiple times
    testBucketPriorityStrategy: 50%|ci-bucket-failure-predictor-v1 #We want to 50% of the time run buckets in order of predicted failures
  includeProperties:
  - file: fatMaxDurationOverrides.properties
  - file: jvms/dev/linux_x86_64.properties

- stepName: Distributed Full FATs
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  workType: FAT
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    product_image_artifact_execution_id: ${Compile Liberty Images:execution_id}
    bucket_image_artifact_execution_id: ${Compile FATs:execution_id}
    changes_summary_artifact_execution_id: ${Compile Liberty Images:execution_id}
    runner_projectName: ebcTestRunner
    runner_workType: Jenkins
    runner_threshold: 5
    runner_minimum_total: 10
    fat.buckets.to.run: ${PR Changes:spawn.fullfat.buckets}
    fat.test.mode: full
    fats_to_omit: "build.featureStart.part1_fat, build.featureStart.part2_fat, build.featureStart.part3_fat, build.featureStart.part4_fat, build.featureStart.part1.was_fat, build.featureStart.part2.was_fat, build.featureStart.part3.was_fat, build.featureStart.part4.was_fat, com.ibm.ws.collective.controller.deploy_fat, com.ibm.ws.health.manager.odrlib_fat, com.ibm.ws.dynamic.routing_ihs_fat, com.ibm.ws.node.scaling_fat, com.ibm.ws.scaling.member_fat_multinode, com.ibm.ws.node.health_fat"
    fat_uploads_to_expect: ${Compile Liberty Images:fat_uploads_to_expect},${Compile FATs:fat_uploads_to_expect}
    outputServer: libertyfs.hursley.ibm.com
    outputPath: /liberty/personal/2/ciorchestrator
    command: ant -f build-test.xml localrun -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath
    aggregationId: ${Compile Liberty Images:execution_id}
    buildType: personal
    reportingOS: ubuntu22_x86
    ebcPlan: See Shortlist 
    ebcShortlist: jenkins-child.yml
    retry_failing_fats: true
    repeat_if_few_fats: true  #If there are fewer than x fat buckets then we will run each fat multiple times
    testBucketPriorityStrategy: 50%|ci-bucket-failure-predictor-v1 #We want to 50% of the time run buckets in order of predicted failures    
  includeProperties:
  - file: fatMaxDurationOverrides.properties
  - file: jvms/dev/linux_x86_64.properties

- stepName: Open Liberty Feature Start FATs
  workType: FAT
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  timeoutInMinutes: 1920
  properties:
    aggregationId: ${Compile Liberty Images:execution_id}
    bucket_image_artifact_execution_id: ${Compile FATs:execution_id}
    buildType: personal
    changes_summary_artifact_execution_id: ${Compile Liberty Images:execution_id}
    command: ant -f build-test.xml localrun -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath
    ebcPlan: See Shortlist 
    ebcShortlist: jenkins-child.yml
    fat_uploads_to_expect: ${Compile Liberty Images:fat_uploads_to_expect},${Compile FATs:fat_uploads_to_expect}
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    fat.test.mode: full
    fatPatternToMatch: build.featureStart.part\d*_fat
    outputPath: /liberty/personal/2/ciorchestrator
    outputServer: libertyfs.hursley.ibm.com
    product_image_artifact_execution_id: ${Compile Liberty Images:execution_id}
    product_image_type_under_test: wlp-embeddable-full
    # asyncArchive.zip is 6 directories up from the wlp-embeddable-full image.
    dependenciesRelativePath: ../../../../../..
    reportingOS: ubuntu22_x86
    retry_failing_fats: true
    runner_minimum_total: 1
    runner_projectName: ebcTestRunner
    runner_threshold: 4
    runner_workType: Jenkins
    testBucketPriorityStrategy: 50%|ci-bucket-failure-predictor-v1 #We want to 50% of the time run buckets in order of predicted failures
  includeProperties:
  - file: fatMaxDurationOverrides.properties
  - file: jvms/dev/linux_x86_64.properties

- stepName: Liberty Feature Start FATs
  workType: FAT
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  conditionalRun:
    - type: ifSet
      value: ${fat.buckets.to.run}
  timeoutInMinutes: 1920
  properties:
    aggregationId: ${Compile Liberty Images:execution_id}
    bucket_image_artifact_execution_id: ${Compile FATs:execution_id}
    buildType: personal
    changes_summary_artifact_execution_id: ${Compile Liberty Images:execution_id}
    command: ant -f build-test.xml localrun -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath
    ebcPlan: See Shortlist 
    ebcShortlist: jenkins-child.yml
    fat_uploads_to_expect: ${Compile Liberty Images:fat_uploads_to_expect},${Compile FATs:fat_uploads_to_expect}
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    fat.test.mode: full
    fatPatternToMatch: build.featureStart.part\d*.was_fat
    outputPath: /liberty/personal/2/ciorchestrator
    outputServer: libertyfs.hursley.ibm.com
    product_image_artifact_execution_id: ${Compile Liberty Images:execution_id}
    product_image_type_under_test: wlp-embeddable-full
    # asyncArchive.zip is 6 directories up from the wlp-embeddable-full image.
    dependenciesRelativePath: ../../../../../..
    reportingOS: ubuntu22_x86
    retry_failing_fats: true
    runner_minimum_total: 1
    runner_projectName: ebcTestRunner
    runner_threshold: 4
    runner_workType: Jenkins
    testBucketPriorityStrategy: 50%|ci-bucket-failure-predictor-v1 #We want to 50% of the time run buckets in order of predicted failures
  includeProperties:
  - file: fatMaxDurationOverrides.properties
  - file: jvms/dev/linux_x86_64.properties

- stepName: z/OS FATs
  conditionalRun:
    - type: ifTrue
      value: ${spawn.zos}
  workType: FAT
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    aggregationId: ${Compile Liberty Images:execution_id}
    product_image_artifact_execution_id: ${Compile Liberty Images:execution_id}
    bucket_image_artifact_execution_id: ${Compile FATs:execution_id}
    changes_summary_artifact_execution_id: ${Compile Liberty Images:execution_id}
    buildType: personal
    command: ant -f build-ztest.xml localrun -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath
    ebcPlan: managed-pool-zos-fat-test-jenkins-middleware.yml
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    fatPatternToMatch: .*_zfat
    fat.test.mode: lite
    outputPath: /liberty/personal/2/ciorchestrator
    outputServer: libertyfs.hursley.ibm.com
    product_image_type_under_test: wlp-zosimage
    reportingOS: zOS
    retry_failing_fats: true
    runner_projectName: ebcTestRunner
    runner_workType: Jenkins
    runner_threshold: 27
    runZosTests: true
    spawn.zos: ${PR Changes:spawn.zos}
    testBucketPriorityStrategy: 50%|ci-bucket-failure-predictor-v1 #We want to 50% of the time run buckets in order of predicted failures
  includeProperties:
  - file: jvms/dev/zOS_s390_64.properties

- stepName: z/OS Unittests
  conditionalRun:
    - type: ifTrue
      value: ${spawn.zos}
  workType: FAT
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  timeoutInMinutes: 1920
  properties:
    aggregationId: ${Compile Liberty Images:execution_id}
    product_image_artifact_execution_id: ${Compile Liberty Images:execution_id}
    bucket_image_artifact_execution_id: ${Compile FATs:execution_id}
    changes_summary_artifact_execution_id: ${Compile Liberty Images:execution_id}
    buildType: personal
    command: ant -f build-zunittest.xml unittest -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath -lib ../prereq.published/lib -lib ../ant_build/lib/biz.aQute.bnd-3.3.0.jar -lib ../ant_build/lib/jsoup-1.7.2.jar
    ebcPlan: managed-pool-zos-fat-test-jenkins-middleware.yml
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    fatPatternToMatch: .*_ztest
    fat.test.mode: lite
    outputPath: /liberty/personal/2/ciorchestrator
    outputServer: libertyfs.hursley.ibm.com
    product_image_type_under_test: wlp-zosimage
    reportingOS: zOS
    retry_failing_fats: true
    runner_projectName: ebcTestRunner
    runner_workType: Jenkins
    runner_threshold: 5
    runZosTests: true
    spawn.zos: ${PR Changes:spawn.zos}
    testBucketPriorityStrategy: 50%|ci-bucket-failure-predictor-v1 #We want to 50% of the time run buckets in order of predicted failures
  includeProperties:
  - file: jvms/dev/zOS_s390_64_java11.properties

# This step runs any FATs which declare that they test the 'checkpoint' feature in an environment with CRIU installed.
# Checkpoint FATs therefore run twice in builds but the @CheckpointTest annotation and use of the fat.test.run.checkpoint.only property mean that in CRIU environments
# they only run the test cases with @CheckpointTest (skipping the others) and in non-CRIU environments they only run the unannotated test cases. Hence, there's no duplication of testing.
- stepName: Checkpoint FATs (Lite)
  workType: FAT
  dependsOn:
    - stepName: PR Changes
      awaitOutputProperties: true
    - stepName: Compile Liberty Images
      awaitOutputProperties: true
    - stepName: Compile FATs
      allowFailures: false
      awaitOutputProperties: true
    - stepName: Determine FATs Needed
      allowFailures: true
  conditionalRun:
    - type: ifTrue
      value: ${spawn.checkpoint}
  timeoutInMinutes: 1920
  properties:
    product_image_artifact_execution_id: ${Compile Liberty Images:execution_id}
    bucket_image_artifact_execution_id: ${Compile FATs:execution_id}
    changes_summary_artifact_execution_id: ${Compile Liberty Images:execution_id}
    runner_projectName: ebcTestRunner
    runner_workType: Jenkins
    runner_threshold: 5
    runner_minimum_total: 10
    fat.buckets.to.run: ${PR Changes:fat.buckets.to.run}
    # Limit the FATs to only those supporting the checkpoint feature.
    limit.fat.buckets.to.feature: checkpoint
    # Only run test cases with the @CheckpointTest annotation.
    fat.test.run.checkpoint.only: true
    fat.test.mode: lite
    fats_to_omit: "com.ibm.ws.collective.controller.deploy_fat, com.ibm.ws.health.manager.odrlib_fat, com.ibm.ws.dynamic.routing_ihs_fat, com.ibm.ws.node.scaling_fat, com.ibm.ws.scaling.member_fat_multinode, com.ibm.ws.node.health_fat"
    fat_uploads_to_expect: ${Compile Liberty Images:fat_uploads_to_expect},${Compile FATs:fat_uploads_to_expect}
    outputServer: libertyfs.hursley.ibm.com
    outputPath: /liberty/personal/2/ciorchestrator
    command: ant -f build-test.xml localrun -propertyfile ../../../buildandbucket.properties -DhaltOnFailure=false -lib ../ant_build/lib.antClasspath
    aggregationId: ${Compile Liberty Images:execution_id}
    buildType: personal
    reportingOS: ubuntu22_x86
    ebcPlan: See Shortlist 
    ebcShortlist: jenkinsbuild-checkpoint-ubuntu22_x86.yml
    retry_failing_fats: true
    # Only a small number of FATs exercise the checkpoint feature and so we should not repeat them by default otherwise they'll run 10 times.
    repeat_if_few_fats: false
    testBucketPriorityStrategy: 50%|ci-bucket-failure-predictor-v1 #We want to 50% of the time run buckets in order of predicted failures
  includeProperties:
  - file: fatMaxDurationOverrides.properties
  # Custom JVM properties as Checkpoint is only supported on specific JVMs/levels.
  - file: jvms/dev/checkpoint_linux_x86_64.properties
