// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sampling.proto

package io.jaegertracing.api_v2;

public final class Sampling {
    private Sampling() {
    }

    public static void registerAllExtensions(
                                             com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
                                             com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                              (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * <pre>
     * See description of the SamplingStrategyResponse.strategyType field.
     * </pre>
     *
     * Protobuf enum {@code jaeger.api_v2.SamplingStrategyType}
     */
    public enum SamplingStrategyType
        implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>PROBABILISTIC = 0;</code>
         */
        PROBABILISTIC(0),
        /**
         * <code>RATE_LIMITING = 1;</code>
         */
        RATE_LIMITING(1),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>PROBABILISTIC = 0;</code>
         */
        public static final int PROBABILISTIC_VALUE = 0;
        /**
         * <code>RATE_LIMITING = 1;</code>
         */
        public static final int RATE_LIMITING_VALUE = 1;

        @Override
        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static SamplingStrategyType valueOf(int value) {
            return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static SamplingStrategyType forNumber(int value) {
            switch (value) {
                case 0:
                    return PROBABILISTIC;
                case 1:
                    return RATE_LIMITING;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<SamplingStrategyType> internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<SamplingStrategyType> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<SamplingStrategyType>() {
            @Override
            public SamplingStrategyType findValueByNumber(int number) {
                return SamplingStrategyType.forNumber(number);
            }
        };

        @Override
        public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
            }
            return getDescriptor().getValues().get(ordinal());
        }

        @Override
        public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
            return io.jaegertracing.api_v2.Sampling.getDescriptor().getEnumTypes().get(0);
        }

        private static final SamplingStrategyType[] VALUES = values();

        public static SamplingStrategyType valueOf(
                                                   com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private SamplingStrategyType(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:jaeger.api_v2.SamplingStrategyType)
    }

    public interface ProbabilisticSamplingStrategyOrBuilder extends
                    // @@protoc_insertion_point(interface_extends:jaeger.api_v2.ProbabilisticSamplingStrategy)
                    com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * samplingRate is the sampling probability in the range [0.0, 1.0].
         * </pre>
         *
         * <code>double samplingRate = 1;</code>
         *
         * @return The samplingRate.
         */
        double getSamplingRate();
    }

    /**
     * <pre>
     * ProbabilisticSamplingStrategy samples traces with a fixed probability.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.ProbabilisticSamplingStrategy}
     */
    public static final class ProbabilisticSamplingStrategy extends com.google.protobuf.GeneratedMessageV3 implements
                    // @@protoc_insertion_point(message_implements:jaeger.api_v2.ProbabilisticSamplingStrategy)
                    ProbabilisticSamplingStrategyOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use ProbabilisticSamplingStrategy.newBuilder() to construct.
        private ProbabilisticSamplingStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ProbabilisticSamplingStrategy() {
        }

        @java.lang.Override
        @SuppressWarnings({ "unused" })
        protected java.lang.Object newInstance(
                                               UnusedPrivateParameter unused) {
            return new ProbabilisticSamplingStrategy();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ProbabilisticSamplingStrategy(
                                              com.google.protobuf.CodedInputStream input,
                                              com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 9: {

                            samplingRate_ = input.readDouble();
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                                   input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                   io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.class,
                                                                                                                                                                   io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder.class);
        }

        public static final int SAMPLINGRATE_FIELD_NUMBER = 1;
        private double samplingRate_;

        /**
         * <pre>
         * samplingRate is the sampling probability in the range [0.0, 1.0].
         * </pre>
         *
         * <code>double samplingRate = 1;</code>
         *
         * @return The samplingRate.
         */
        @java.lang.Override
        public double getSamplingRate() {
            return samplingRate_;
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (samplingRate_ != 0D) {
                output.writeDouble(1, samplingRate_);
            }
            unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1)
                return size;

            size = 0;
            if (samplingRate_ != 0D) {
                size += com.google.protobuf.CodedOutputStream.computeDoubleSize(1, samplingRate_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy)) {
                return super.equals(obj);
            }
            io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy other = (io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy) obj;

            if (java.lang.Double.doubleToLongBits(getSamplingRate()) != java.lang.Double.doubleToLongBits(
                                                                                                          other.getSamplingRate()))
                return false;
            if (!unknownFields.equals(other.unknownFields))
                return false;
            return true;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + SAMPLINGRATE_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                                                                       java.lang.Double.doubleToLongBits(getSamplingRate()));
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               java.nio.ByteBuffer data,
                                                                                               com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               com.google.protobuf.ByteString data,
                                                                                               com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               byte[] data,
                                                                                               com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               java.io.InputStream input,
                                                                                               com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseDelimitedFrom(
                                                                                                        java.io.InputStream input,
                                                                                                        com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parseFrom(
                                                                                               com.google.protobuf.CodedInputStream input,
                                                                                               com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @java.lang.Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * ProbabilisticSamplingStrategy samples traces with a fixed probability.
         * </pre>
         *
         * Protobuf type {@code jaeger.api_v2.ProbabilisticSamplingStrategy}
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.ProbabilisticSamplingStrategy)
                        io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                       io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.class,
                                                                                                                                                                       io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder.class);
            }

            // Construct using io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
                }
            }

            @java.lang.Override
            public Builder clear() {
                super.clear();
                samplingRate_ = 0D;

                return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_descriptor;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getDefaultInstanceForType() {
                return io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance();
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy build() {
                io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy buildPartial() {
                io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy result = new io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy(this);
                result.samplingRate_ = samplingRate_;
                onBuilt();
                return result;
            }

            @java.lang.Override
            public Builder clone() {
                return super.clone();
            }

            @java.lang.Override
            public Builder setField(
                                    com.google.protobuf.Descriptors.FieldDescriptor field,
                                    java.lang.Object value) {
                return super.setField(field, value);
            }

            @java.lang.Override
            public Builder clearField(
                                      com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @java.lang.Override
            public Builder clearOneof(
                                      com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @java.lang.Override
            public Builder setRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            int index, java.lang.Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @java.lang.Override
            public Builder addRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            java.lang.Object value) {
                return super.addRepeatedField(field, value);
            }

            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy) {
                    return mergeFrom((io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy other) {
                if (other == io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance())
                    return this;
                if (other.getSamplingRate() != 0D) {
                    setSamplingRate(other.getSamplingRate());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
                return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                                     com.google.protobuf.CodedInputStream input,
                                     com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private double samplingRate_;

            /**
             * <pre>
             * samplingRate is the sampling probability in the range [0.0, 1.0].
             * </pre>
             *
             * <code>double samplingRate = 1;</code>
             *
             * @return The samplingRate.
             */
            @java.lang.Override
            public double getSamplingRate() {
                return samplingRate_;
            }

            /**
             * <pre>
             * samplingRate is the sampling probability in the range [0.0, 1.0].
             * </pre>
             *
             * <code>double samplingRate = 1;</code>
             *
             * @param value The samplingRate to set.
             * @return This builder for chaining.
             */
            public Builder setSamplingRate(double value) {

                samplingRate_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * samplingRate is the sampling probability in the range [0.0, 1.0].
             * </pre>
             *
             * <code>double samplingRate = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearSamplingRate() {

                samplingRate_ = 0D;
                onChanged();
                return this;
            }

            @java.lang.Override
            public final Builder setUnknownFields(
                                                  final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                                                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }

            // @@protoc_insertion_point(builder_scope:jaeger.api_v2.ProbabilisticSamplingStrategy)
        }

        // @@protoc_insertion_point(class_scope:jaeger.api_v2.ProbabilisticSamplingStrategy)
        private static final io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy();
        }

        public static io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ProbabilisticSamplingStrategy> PARSER = new com.google.protobuf.AbstractParser<ProbabilisticSamplingStrategy>() {
            @java.lang.Override
            public ProbabilisticSamplingStrategy parsePartialFrom(
                                                                  com.google.protobuf.CodedInputStream input,
                                                                  com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
                return new ProbabilisticSamplingStrategy(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<ProbabilisticSamplingStrategy> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ProbabilisticSamplingStrategy> getParserForType() {
            return PARSER;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface RateLimitingSamplingStrategyOrBuilder extends
                    // @@protoc_insertion_point(interface_extends:jaeger.api_v2.RateLimitingSamplingStrategy)
                    com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * TODO this field type should be changed to double, to support rates like 1 per minute.
         * </pre>
         *
         * <code>int32 maxTracesPerSecond = 1;</code>
         *
         * @return The maxTracesPerSecond.
         */
        int getMaxTracesPerSecond();
    }

    /**
     * <pre>
     * RateLimitingSamplingStrategy samples a fixed number of traces per time interval.
     * The typical implementations use the leaky bucket algorithm.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.RateLimitingSamplingStrategy}
     */
    public static final class RateLimitingSamplingStrategy extends com.google.protobuf.GeneratedMessageV3 implements
                    // @@protoc_insertion_point(message_implements:jaeger.api_v2.RateLimitingSamplingStrategy)
                    RateLimitingSamplingStrategyOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use RateLimitingSamplingStrategy.newBuilder() to construct.
        private RateLimitingSamplingStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private RateLimitingSamplingStrategy() {
        }

        @java.lang.Override
        @SuppressWarnings({ "unused" })
        protected java.lang.Object newInstance(
                                               UnusedPrivateParameter unused) {
            return new RateLimitingSamplingStrategy();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RateLimitingSamplingStrategy(
                                             com.google.protobuf.CodedInputStream input,
                                             com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8: {

                            maxTracesPerSecond_ = input.readInt32();
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                                   input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                  io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.class,
                                                                                                                                                                  io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder.class);
        }

        public static final int MAXTRACESPERSECOND_FIELD_NUMBER = 1;
        private int maxTracesPerSecond_;

        /**
         * <pre>
         * TODO this field type should be changed to double, to support rates like 1 per minute.
         * </pre>
         *
         * <code>int32 maxTracesPerSecond = 1;</code>
         *
         * @return The maxTracesPerSecond.
         */
        @java.lang.Override
        public int getMaxTracesPerSecond() {
            return maxTracesPerSecond_;
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (maxTracesPerSecond_ != 0) {
                output.writeInt32(1, maxTracesPerSecond_);
            }
            unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1)
                return size;

            size = 0;
            if (maxTracesPerSecond_ != 0) {
                size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, maxTracesPerSecond_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy)) {
                return super.equals(obj);
            }
            io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy other = (io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy) obj;

            if (getMaxTracesPerSecond() != other.getMaxTracesPerSecond())
                return false;
            if (!unknownFields.equals(other.unknownFields))
                return false;
            return true;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + MAXTRACESPERSECOND_FIELD_NUMBER;
            hash = (53 * hash) + getMaxTracesPerSecond();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              java.nio.ByteBuffer data,
                                                                                              com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              com.google.protobuf.ByteString data,
                                                                                              com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              byte[] data,
                                                                                              com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              java.io.InputStream input,
                                                                                              com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseDelimitedFrom(
                                                                                                       java.io.InputStream input,
                                                                                                       com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parseFrom(
                                                                                              com.google.protobuf.CodedInputStream input,
                                                                                              com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @java.lang.Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * RateLimitingSamplingStrategy samples a fixed number of traces per time interval.
         * The typical implementations use the leaky bucket algorithm.
         * </pre>
         *
         * Protobuf type {@code jaeger.api_v2.RateLimitingSamplingStrategy}
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.RateLimitingSamplingStrategy)
                        io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategyOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                      io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.class,
                                                                                                                                                                      io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder.class);
            }

            // Construct using io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
                }
            }

            @java.lang.Override
            public Builder clear() {
                super.clear();
                maxTracesPerSecond_ = 0;

                return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_descriptor;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy getDefaultInstanceForType() {
                return io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.getDefaultInstance();
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy build() {
                io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy buildPartial() {
                io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy result = new io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy(this);
                result.maxTracesPerSecond_ = maxTracesPerSecond_;
                onBuilt();
                return result;
            }

            @java.lang.Override
            public Builder clone() {
                return super.clone();
            }

            @java.lang.Override
            public Builder setField(
                                    com.google.protobuf.Descriptors.FieldDescriptor field,
                                    java.lang.Object value) {
                return super.setField(field, value);
            }

            @java.lang.Override
            public Builder clearField(
                                      com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @java.lang.Override
            public Builder clearOneof(
                                      com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @java.lang.Override
            public Builder setRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            int index, java.lang.Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @java.lang.Override
            public Builder addRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            java.lang.Object value) {
                return super.addRepeatedField(field, value);
            }

            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy) {
                    return mergeFrom((io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy other) {
                if (other == io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.getDefaultInstance())
                    return this;
                if (other.getMaxTracesPerSecond() != 0) {
                    setMaxTracesPerSecond(other.getMaxTracesPerSecond());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
                return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                                     com.google.protobuf.CodedInputStream input,
                                     com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int maxTracesPerSecond_;

            /**
             * <pre>
             * TODO this field type should be changed to double, to support rates like 1 per minute.
             * </pre>
             *
             * <code>int32 maxTracesPerSecond = 1;</code>
             *
             * @return The maxTracesPerSecond.
             */
            @java.lang.Override
            public int getMaxTracesPerSecond() {
                return maxTracesPerSecond_;
            }

            /**
             * <pre>
             * TODO this field type should be changed to double, to support rates like 1 per minute.
             * </pre>
             *
             * <code>int32 maxTracesPerSecond = 1;</code>
             *
             * @param value The maxTracesPerSecond to set.
             * @return This builder for chaining.
             */
            public Builder setMaxTracesPerSecond(int value) {

                maxTracesPerSecond_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * TODO this field type should be changed to double, to support rates like 1 per minute.
             * </pre>
             *
             * <code>int32 maxTracesPerSecond = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearMaxTracesPerSecond() {

                maxTracesPerSecond_ = 0;
                onChanged();
                return this;
            }

            @java.lang.Override
            public final Builder setUnknownFields(
                                                  final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                                                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }

            // @@protoc_insertion_point(builder_scope:jaeger.api_v2.RateLimitingSamplingStrategy)
        }

        // @@protoc_insertion_point(class_scope:jaeger.api_v2.RateLimitingSamplingStrategy)
        private static final io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy();
        }

        public static io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<RateLimitingSamplingStrategy> PARSER = new com.google.protobuf.AbstractParser<RateLimitingSamplingStrategy>() {
            @java.lang.Override
            public RateLimitingSamplingStrategy parsePartialFrom(
                                                                 com.google.protobuf.CodedInputStream input,
                                                                 com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
                return new RateLimitingSamplingStrategy(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<RateLimitingSamplingStrategy> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<RateLimitingSamplingStrategy> getParserForType() {
            return PARSER;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface OperationSamplingStrategyOrBuilder extends
                    // @@protoc_insertion_point(interface_extends:jaeger.api_v2.OperationSamplingStrategy)
                    com.google.protobuf.MessageOrBuilder {

        /**
         * <code>string operation = 1;</code>
         *
         * @return The operation.
         */
        java.lang.String getOperation();

        /**
         * <code>string operation = 1;</code>
         *
         * @return The bytes for operation.
         */
        com.google.protobuf.ByteString getOperationBytes();

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return Whether the probabilisticSampling field is set.
         */
        boolean hasProbabilisticSampling();

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return The probabilisticSampling.
         */
        io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getProbabilisticSampling();

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         */
        io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder getProbabilisticSamplingOrBuilder();
    }

    /**
     * <pre>
     * OperationSamplingStrategy is a sampling strategy for a given operation
     * (aka endpoint, span name). Only probabilistic sampling is currently supported.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.OperationSamplingStrategy}
     */
    public static final class OperationSamplingStrategy extends com.google.protobuf.GeneratedMessageV3 implements
                    // @@protoc_insertion_point(message_implements:jaeger.api_v2.OperationSamplingStrategy)
                    OperationSamplingStrategyOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use OperationSamplingStrategy.newBuilder() to construct.
        private OperationSamplingStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private OperationSamplingStrategy() {
            operation_ = "";
        }

        @java.lang.Override
        @SuppressWarnings({ "unused" })
        protected java.lang.Object newInstance(
                                               UnusedPrivateParameter unused) {
            return new OperationSamplingStrategy();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OperationSamplingStrategy(
                                          com.google.protobuf.CodedInputStream input,
                                          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {
                            java.lang.String s = input.readStringRequireUtf8();

                            operation_ = s;
                            break;
                        }
                        case 18: {
                            io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder subBuilder = null;
                            if (probabilisticSampling_ != null) {
                                subBuilder = probabilisticSampling_.toBuilder();
                            }
                            probabilisticSampling_ = input.readMessage(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(probabilisticSampling_);
                                probabilisticSampling_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                                   input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_OperationSamplingStrategy_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_OperationSamplingStrategy_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                               io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.class,
                                                                                                                                                               io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder.class);
        }

        public static final int OPERATION_FIELD_NUMBER = 1;
        private volatile java.lang.Object operation_;

        /**
         * <code>string operation = 1;</code>
         *
         * @return The operation.
         */
        @java.lang.Override
        public java.lang.String getOperation() {
            java.lang.Object ref = operation_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                operation_ = s;
                return s;
            }
        }

        /**
         * <code>string operation = 1;</code>
         *
         * @return The bytes for operation.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getOperationBytes() {
            java.lang.Object ref = operation_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8(
                                                                                               (java.lang.String) ref);
                operation_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PROBABILISTICSAMPLING_FIELD_NUMBER = 2;
        private io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy probabilisticSampling_;

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return Whether the probabilisticSampling field is set.
         */
        @java.lang.Override
        public boolean hasProbabilisticSampling() {
            return probabilisticSampling_ != null;
        }

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return The probabilisticSampling.
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getProbabilisticSampling() {
            return probabilisticSampling_ == null ? io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance() : probabilisticSampling_;
        }

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder getProbabilisticSamplingOrBuilder() {
            return getProbabilisticSampling();
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (!getOperationBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, operation_);
            }
            if (probabilisticSampling_ != null) {
                output.writeMessage(2, getProbabilisticSampling());
            }
            unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1)
                return size;

            size = 0;
            if (!getOperationBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, operation_);
            }
            if (probabilisticSampling_ != null) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getProbabilisticSampling());
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy)) {
                return super.equals(obj);
            }
            io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy other = (io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy) obj;

            if (!getOperation().equals(other.getOperation()))
                return false;
            if (hasProbabilisticSampling() != other.hasProbabilisticSampling())
                return false;
            if (hasProbabilisticSampling()) {
                if (!getProbabilisticSampling().equals(other.getProbabilisticSampling()))
                    return false;
            }
            if (!unknownFields.equals(other.unknownFields))
                return false;
            return true;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + OPERATION_FIELD_NUMBER;
            hash = (53 * hash) + getOperation().hashCode();
            if (hasProbabilisticSampling()) {
                hash = (37 * hash) + PROBABILISTICSAMPLING_FIELD_NUMBER;
                hash = (53 * hash) + getProbabilisticSampling().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           java.nio.ByteBuffer data,
                                                                                           com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           com.google.protobuf.ByteString data,
                                                                                           com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           byte[] data,
                                                                                           com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           java.io.InputStream input,
                                                                                           com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseDelimitedFrom(
                                                                                                    java.io.InputStream input,
                                                                                                    com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parseFrom(
                                                                                           com.google.protobuf.CodedInputStream input,
                                                                                           com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @java.lang.Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * OperationSamplingStrategy is a sampling strategy for a given operation
         * (aka endpoint, span name). Only probabilistic sampling is currently supported.
         * </pre>
         *
         * Protobuf type {@code jaeger.api_v2.OperationSamplingStrategy}
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.OperationSamplingStrategy)
                        io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_OperationSamplingStrategy_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_OperationSamplingStrategy_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                   io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.class,
                                                                                                                                                                   io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder.class);
            }

            // Construct using io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
                }
            }

            @java.lang.Override
            public Builder clear() {
                super.clear();
                operation_ = "";

                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSampling_ = null;
                } else {
                    probabilisticSampling_ = null;
                    probabilisticSamplingBuilder_ = null;
                }
                return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_OperationSamplingStrategy_descriptor;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy getDefaultInstanceForType() {
                return io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.getDefaultInstance();
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy build() {
                io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy buildPartial() {
                io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy result = new io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy(this);
                result.operation_ = operation_;
                if (probabilisticSamplingBuilder_ == null) {
                    result.probabilisticSampling_ = probabilisticSampling_;
                } else {
                    result.probabilisticSampling_ = probabilisticSamplingBuilder_.build();
                }
                onBuilt();
                return result;
            }

            @java.lang.Override
            public Builder clone() {
                return super.clone();
            }

            @java.lang.Override
            public Builder setField(
                                    com.google.protobuf.Descriptors.FieldDescriptor field,
                                    java.lang.Object value) {
                return super.setField(field, value);
            }

            @java.lang.Override
            public Builder clearField(
                                      com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @java.lang.Override
            public Builder clearOneof(
                                      com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @java.lang.Override
            public Builder setRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            int index, java.lang.Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @java.lang.Override
            public Builder addRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            java.lang.Object value) {
                return super.addRepeatedField(field, value);
            }

            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy) {
                    return mergeFrom((io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy other) {
                if (other == io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.getDefaultInstance())
                    return this;
                if (!other.getOperation().isEmpty()) {
                    operation_ = other.operation_;
                    onChanged();
                }
                if (other.hasProbabilisticSampling()) {
                    mergeProbabilisticSampling(other.getProbabilisticSampling());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
                return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                                     com.google.protobuf.CodedInputStream input,
                                     com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private java.lang.Object operation_ = "";

            /**
             * <code>string operation = 1;</code>
             *
             * @return The operation.
             */
            @Override
            public java.lang.String getOperation() {
                java.lang.Object ref = operation_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    operation_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>string operation = 1;</code>
             *
             * @return The bytes for operation.
             */
            @Override
            public com.google.protobuf.ByteString getOperationBytes() {
                java.lang.Object ref = operation_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8(
                                                                                                   (java.lang.String) ref);
                    operation_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string operation = 1;</code>
             *
             * @param value The operation to set.
             * @return This builder for chaining.
             */
            public Builder setOperation(
                                        java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                operation_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string operation = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearOperation() {

                operation_ = getDefaultInstance().getOperation();
                onChanged();
                return this;
            }

            /**
             * <code>string operation = 1;</code>
             *
             * @param value The bytes for operation to set.
             * @return This builder for chaining.
             */
            public Builder setOperationBytes(
                                             com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                operation_ = value;
                onChanged();
                return this;
            }

            private io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy probabilisticSampling_;
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder> probabilisticSamplingBuilder_;

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             *
             * @return Whether the probabilisticSampling field is set.
             */
            @Override
            public boolean hasProbabilisticSampling() {
                return probabilisticSamplingBuilder_ != null || probabilisticSampling_ != null;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             *
             * @return The probabilisticSampling.
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getProbabilisticSampling() {
                if (probabilisticSamplingBuilder_ == null) {
                    return probabilisticSampling_ == null ? io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance() : probabilisticSampling_;
                } else {
                    return probabilisticSamplingBuilder_.getMessage();
                }
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder setProbabilisticSampling(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy value) {
                if (probabilisticSamplingBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    probabilisticSampling_ = value;
                    onChanged();
                } else {
                    probabilisticSamplingBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder setProbabilisticSampling(
                                                    io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder builderForValue) {
                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSampling_ = builderForValue.build();
                    onChanged();
                } else {
                    probabilisticSamplingBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder mergeProbabilisticSampling(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy value) {
                if (probabilisticSamplingBuilder_ == null) {
                    if (probabilisticSampling_ != null) {
                        probabilisticSampling_ = io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.newBuilder(probabilisticSampling_).mergeFrom(value).buildPartial();
                    } else {
                        probabilisticSampling_ = value;
                    }
                    onChanged();
                } else {
                    probabilisticSamplingBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder clearProbabilisticSampling() {
                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSampling_ = null;
                    onChanged();
                } else {
                    probabilisticSampling_ = null;
                    probabilisticSamplingBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder getProbabilisticSamplingBuilder() {

                onChanged();
                return getProbabilisticSamplingFieldBuilder().getBuilder();
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder getProbabilisticSamplingOrBuilder() {
                if (probabilisticSamplingBuilder_ != null) {
                    return probabilisticSamplingBuilder_.getMessageOrBuilder();
                } else {
                    return probabilisticSampling_ == null ? io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance() : probabilisticSampling_;
                }
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder> getProbabilisticSamplingFieldBuilder() {
                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSamplingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder>(getProbabilisticSampling(), getParentForChildren(), isClean());
                    probabilisticSampling_ = null;
                }
                return probabilisticSamplingBuilder_;
            }

            @java.lang.Override
            public final Builder setUnknownFields(
                                                  final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                                                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }

            // @@protoc_insertion_point(builder_scope:jaeger.api_v2.OperationSamplingStrategy)
        }

        // @@protoc_insertion_point(class_scope:jaeger.api_v2.OperationSamplingStrategy)
        private static final io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy();
        }

        public static io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<OperationSamplingStrategy> PARSER = new com.google.protobuf.AbstractParser<OperationSamplingStrategy>() {
            @java.lang.Override
            public OperationSamplingStrategy parsePartialFrom(
                                                              com.google.protobuf.CodedInputStream input,
                                                              com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OperationSamplingStrategy(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<OperationSamplingStrategy> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<OperationSamplingStrategy> getParserForType() {
            return PARSER;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface PerOperationSamplingStrategiesOrBuilder extends
                    // @@protoc_insertion_point(interface_extends:jaeger.api_v2.PerOperationSamplingStrategies)
                    com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * defaultSamplingProbability is the sampling probability for spans that do not match
         * any of the perOperationStrategies.
         * </pre>
         *
         * <code>double defaultSamplingProbability = 1;</code>
         *
         * @return The defaultSamplingProbability.
         */
        double getDefaultSamplingProbability();

        /**
         * <pre>
         * defaultLowerBoundTracesPerSecond defines a lower-bound rate limit used to ensure that
         * there is some minimal amount of traces sampled for an endpoint that might otherwise
         * be never sampled via probabilistic strategies. The limit is local to a service instance,
         * so if a service is deployed with many (N) instances, the effective minimum rate of sampling
         * will be N times higher. This setting applies to ALL operations, whether or not they match
         * one of the perOperationStrategies.
         * </pre>
         *
         * <code>double defaultLowerBoundTracesPerSecond = 2;</code>
         *
         * @return The defaultLowerBoundTracesPerSecond.
         */
        double getDefaultLowerBoundTracesPerSecond();

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        java.util.List<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy> getPerOperationStrategiesList();

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy getPerOperationStrategies(int index);

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        int getPerOperationStrategiesCount();

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        java.util.List<? extends io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder> getPerOperationStrategiesOrBuilderList();

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder getPerOperationStrategiesOrBuilder(
                                                                                                               int index);

        /**
         * <pre>
         * defaultUpperBoundTracesPerSecond defines an upper bound rate limit.
         * However, almost no Jaeger SDKs support this parameter.
         * </pre>
         *
         * <code>double defaultUpperBoundTracesPerSecond = 4;</code>
         *
         * @return The defaultUpperBoundTracesPerSecond.
         */
        double getDefaultUpperBoundTracesPerSecond();
    }

    /**
     * <pre>
     * PerOperationSamplingStrategies is a combination of strategies for different endpoints
     * as well as some service-wide defaults. It is particularly useful for services whose
     * endpoints receive vastly different traffic, so that any single rate of sampling would
     * result in either too much data for some endpoints or almost no data for other endpoints.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.PerOperationSamplingStrategies}
     */
    public static final class PerOperationSamplingStrategies extends com.google.protobuf.GeneratedMessageV3 implements
                    // @@protoc_insertion_point(message_implements:jaeger.api_v2.PerOperationSamplingStrategies)
                    PerOperationSamplingStrategiesOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use PerOperationSamplingStrategies.newBuilder() to construct.
        private PerOperationSamplingStrategies(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private PerOperationSamplingStrategies() {
            perOperationStrategies_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        @SuppressWarnings({ "unused" })
        protected java.lang.Object newInstance(
                                               UnusedPrivateParameter unused) {
            return new PerOperationSamplingStrategies();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PerOperationSamplingStrategies(
                                               com.google.protobuf.CodedInputStream input,
                                               com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 9: {

                            defaultSamplingProbability_ = input.readDouble();
                            break;
                        }
                        case 17: {

                            defaultLowerBoundTracesPerSecond_ = input.readDouble();
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                                perOperationStrategies_ = new java.util.ArrayList<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            perOperationStrategies_.add(
                                                        input.readMessage(io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.parser(), extensionRegistry));
                            break;
                        }
                        case 33: {

                            defaultUpperBoundTracesPerSecond_ = input.readDouble();
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                                   input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) != 0)) {
                    perOperationStrategies_ = java.util.Collections.unmodifiableList(perOperationStrategies_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_PerOperationSamplingStrategies_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_PerOperationSamplingStrategies_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                    io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.class,
                                                                                                                                                                    io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder.class);
        }

        public static final int DEFAULTSAMPLINGPROBABILITY_FIELD_NUMBER = 1;
        private double defaultSamplingProbability_;

        /**
         * <pre>
         * defaultSamplingProbability is the sampling probability for spans that do not match
         * any of the perOperationStrategies.
         * </pre>
         *
         * <code>double defaultSamplingProbability = 1;</code>
         *
         * @return The defaultSamplingProbability.
         */
        @java.lang.Override
        public double getDefaultSamplingProbability() {
            return defaultSamplingProbability_;
        }

        public static final int DEFAULTLOWERBOUNDTRACESPERSECOND_FIELD_NUMBER = 2;
        private double defaultLowerBoundTracesPerSecond_;

        /**
         * <pre>
         * defaultLowerBoundTracesPerSecond defines a lower-bound rate limit used to ensure that
         * there is some minimal amount of traces sampled for an endpoint that might otherwise
         * be never sampled via probabilistic strategies. The limit is local to a service instance,
         * so if a service is deployed with many (N) instances, the effective minimum rate of sampling
         * will be N times higher. This setting applies to ALL operations, whether or not they match
         * one of the perOperationStrategies.
         * </pre>
         *
         * <code>double defaultLowerBoundTracesPerSecond = 2;</code>
         *
         * @return The defaultLowerBoundTracesPerSecond.
         */
        @java.lang.Override
        public double getDefaultLowerBoundTracesPerSecond() {
            return defaultLowerBoundTracesPerSecond_;
        }

        public static final int PEROPERATIONSTRATEGIES_FIELD_NUMBER = 3;
        private java.util.List<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy> perOperationStrategies_;

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        @java.lang.Override
        public java.util.List<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy> getPerOperationStrategiesList() {
            return perOperationStrategies_;
        }

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        @java.lang.Override
        public java.util.List<? extends io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder> getPerOperationStrategiesOrBuilderList() {
            return perOperationStrategies_;
        }

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        @java.lang.Override
        public int getPerOperationStrategiesCount() {
            return perOperationStrategies_.size();
        }

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy getPerOperationStrategies(int index) {
            return perOperationStrategies_.get(index);
        }

        /**
         * <pre>
         * perOperationStrategies describes sampling strategiesf for individual operations within
         * a given service.
         * </pre>
         *
         * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder getPerOperationStrategiesOrBuilder(
                                                                                                                      int index) {
            return perOperationStrategies_.get(index);
        }

        public static final int DEFAULTUPPERBOUNDTRACESPERSECOND_FIELD_NUMBER = 4;
        private double defaultUpperBoundTracesPerSecond_;

        /**
         * <pre>
         * defaultUpperBoundTracesPerSecond defines an upper bound rate limit.
         * However, almost no Jaeger SDKs support this parameter.
         * </pre>
         *
         * <code>double defaultUpperBoundTracesPerSecond = 4;</code>
         *
         * @return The defaultUpperBoundTracesPerSecond.
         */
        @java.lang.Override
        public double getDefaultUpperBoundTracesPerSecond() {
            return defaultUpperBoundTracesPerSecond_;
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (defaultSamplingProbability_ != 0D) {
                output.writeDouble(1, defaultSamplingProbability_);
            }
            if (defaultLowerBoundTracesPerSecond_ != 0D) {
                output.writeDouble(2, defaultLowerBoundTracesPerSecond_);
            }
            for (int i = 0; i < perOperationStrategies_.size(); i++) {
                output.writeMessage(3, perOperationStrategies_.get(i));
            }
            if (defaultUpperBoundTracesPerSecond_ != 0D) {
                output.writeDouble(4, defaultUpperBoundTracesPerSecond_);
            }
            unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1)
                return size;

            size = 0;
            if (defaultSamplingProbability_ != 0D) {
                size += com.google.protobuf.CodedOutputStream.computeDoubleSize(1, defaultSamplingProbability_);
            }
            if (defaultLowerBoundTracesPerSecond_ != 0D) {
                size += com.google.protobuf.CodedOutputStream.computeDoubleSize(2, defaultLowerBoundTracesPerSecond_);
            }
            for (int i = 0; i < perOperationStrategies_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, perOperationStrategies_.get(i));
            }
            if (defaultUpperBoundTracesPerSecond_ != 0D) {
                size += com.google.protobuf.CodedOutputStream.computeDoubleSize(4, defaultUpperBoundTracesPerSecond_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies)) {
                return super.equals(obj);
            }
            io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies other = (io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies) obj;

            if (java.lang.Double.doubleToLongBits(getDefaultSamplingProbability()) != java.lang.Double.doubleToLongBits(
                                                                                                                        other.getDefaultSamplingProbability()))
                return false;
            if (java.lang.Double.doubleToLongBits(getDefaultLowerBoundTracesPerSecond()) != java.lang.Double.doubleToLongBits(
                                                                                                                              other.getDefaultLowerBoundTracesPerSecond()))
                return false;
            if (!getPerOperationStrategiesList().equals(other.getPerOperationStrategiesList()))
                return false;
            if (java.lang.Double.doubleToLongBits(getDefaultUpperBoundTracesPerSecond()) != java.lang.Double.doubleToLongBits(
                                                                                                                              other.getDefaultUpperBoundTracesPerSecond()))
                return false;
            if (!unknownFields.equals(other.unknownFields))
                return false;
            return true;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + DEFAULTSAMPLINGPROBABILITY_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                                                                       java.lang.Double.doubleToLongBits(getDefaultSamplingProbability()));
            hash = (37 * hash) + DEFAULTLOWERBOUNDTRACESPERSECOND_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                                                                       java.lang.Double.doubleToLongBits(getDefaultLowerBoundTracesPerSecond()));
            if (getPerOperationStrategiesCount() > 0) {
                hash = (37 * hash) + PEROPERATIONSTRATEGIES_FIELD_NUMBER;
                hash = (53 * hash) + getPerOperationStrategiesList().hashCode();
            }
            hash = (37 * hash) + DEFAULTUPPERBOUNDTRACESPERSECOND_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                                                                       java.lang.Double.doubleToLongBits(getDefaultUpperBoundTracesPerSecond()));
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                java.nio.ByteBuffer data,
                                                                                                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                com.google.protobuf.ByteString data,
                                                                                                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                byte[] data,
                                                                                                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                java.io.InputStream input,
                                                                                                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseDelimitedFrom(
                                                                                                         java.io.InputStream input,
                                                                                                         com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parseFrom(
                                                                                                com.google.protobuf.CodedInputStream input,
                                                                                                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @java.lang.Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * PerOperationSamplingStrategies is a combination of strategies for different endpoints
         * as well as some service-wide defaults. It is particularly useful for services whose
         * endpoints receive vastly different traffic, so that any single rate of sampling would
         * result in either too much data for some endpoints or almost no data for other endpoints.
         * </pre>
         *
         * Protobuf type {@code jaeger.api_v2.PerOperationSamplingStrategies}
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.PerOperationSamplingStrategies)
                        io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategiesOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_PerOperationSamplingStrategies_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_PerOperationSamplingStrategies_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                        io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.class,
                                                                                                                                                                        io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder.class);
            }

            // Construct using io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
                    getPerOperationStrategiesFieldBuilder();
                }
            }

            @java.lang.Override
            public Builder clear() {
                super.clear();
                defaultSamplingProbability_ = 0D;

                defaultLowerBoundTracesPerSecond_ = 0D;

                if (perOperationStrategiesBuilder_ == null) {
                    perOperationStrategies_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    perOperationStrategiesBuilder_.clear();
                }
                defaultUpperBoundTracesPerSecond_ = 0D;

                return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_PerOperationSamplingStrategies_descriptor;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies getDefaultInstanceForType() {
                return io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.getDefaultInstance();
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies build() {
                io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies buildPartial() {
                io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies result = new io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies(this);
                int from_bitField0_ = bitField0_;
                result.defaultSamplingProbability_ = defaultSamplingProbability_;
                result.defaultLowerBoundTracesPerSecond_ = defaultLowerBoundTracesPerSecond_;
                if (perOperationStrategiesBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) != 0)) {
                        perOperationStrategies_ = java.util.Collections.unmodifiableList(perOperationStrategies_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.perOperationStrategies_ = perOperationStrategies_;
                } else {
                    result.perOperationStrategies_ = perOperationStrategiesBuilder_.build();
                }
                result.defaultUpperBoundTracesPerSecond_ = defaultUpperBoundTracesPerSecond_;
                onBuilt();
                return result;
            }

            @java.lang.Override
            public Builder clone() {
                return super.clone();
            }

            @java.lang.Override
            public Builder setField(
                                    com.google.protobuf.Descriptors.FieldDescriptor field,
                                    java.lang.Object value) {
                return super.setField(field, value);
            }

            @java.lang.Override
            public Builder clearField(
                                      com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @java.lang.Override
            public Builder clearOneof(
                                      com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @java.lang.Override
            public Builder setRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            int index, java.lang.Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @java.lang.Override
            public Builder addRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            java.lang.Object value) {
                return super.addRepeatedField(field, value);
            }

            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies) {
                    return mergeFrom((io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies other) {
                if (other == io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.getDefaultInstance())
                    return this;
                if (other.getDefaultSamplingProbability() != 0D) {
                    setDefaultSamplingProbability(other.getDefaultSamplingProbability());
                }
                if (other.getDefaultLowerBoundTracesPerSecond() != 0D) {
                    setDefaultLowerBoundTracesPerSecond(other.getDefaultLowerBoundTracesPerSecond());
                }
                if (perOperationStrategiesBuilder_ == null) {
                    if (!other.perOperationStrategies_.isEmpty()) {
                        if (perOperationStrategies_.isEmpty()) {
                            perOperationStrategies_ = other.perOperationStrategies_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensurePerOperationStrategiesIsMutable();
                            perOperationStrategies_.addAll(other.perOperationStrategies_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.perOperationStrategies_.isEmpty()) {
                        if (perOperationStrategiesBuilder_.isEmpty()) {
                            perOperationStrategiesBuilder_.dispose();
                            perOperationStrategiesBuilder_ = null;
                            perOperationStrategies_ = other.perOperationStrategies_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            perOperationStrategiesBuilder_ = com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ? getPerOperationStrategiesFieldBuilder() : null;
                        } else {
                            perOperationStrategiesBuilder_.addAllMessages(other.perOperationStrategies_);
                        }
                    }
                }
                if (other.getDefaultUpperBoundTracesPerSecond() != 0D) {
                    setDefaultUpperBoundTracesPerSecond(other.getDefaultUpperBoundTracesPerSecond());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
                return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                                     com.google.protobuf.CodedInputStream input,
                                     com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private double defaultSamplingProbability_;

            /**
             * <pre>
             * defaultSamplingProbability is the sampling probability for spans that do not match
             * any of the perOperationStrategies.
             * </pre>
             *
             * <code>double defaultSamplingProbability = 1;</code>
             *
             * @return The defaultSamplingProbability.
             */
            @java.lang.Override
            public double getDefaultSamplingProbability() {
                return defaultSamplingProbability_;
            }

            /**
             * <pre>
             * defaultSamplingProbability is the sampling probability for spans that do not match
             * any of the perOperationStrategies.
             * </pre>
             *
             * <code>double defaultSamplingProbability = 1;</code>
             *
             * @param value The defaultSamplingProbability to set.
             * @return This builder for chaining.
             */
            public Builder setDefaultSamplingProbability(double value) {

                defaultSamplingProbability_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * defaultSamplingProbability is the sampling probability for spans that do not match
             * any of the perOperationStrategies.
             * </pre>
             *
             * <code>double defaultSamplingProbability = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearDefaultSamplingProbability() {

                defaultSamplingProbability_ = 0D;
                onChanged();
                return this;
            }

            private double defaultLowerBoundTracesPerSecond_;

            /**
             * <pre>
             * defaultLowerBoundTracesPerSecond defines a lower-bound rate limit used to ensure that
             * there is some minimal amount of traces sampled for an endpoint that might otherwise
             * be never sampled via probabilistic strategies. The limit is local to a service instance,
             * so if a service is deployed with many (N) instances, the effective minimum rate of sampling
             * will be N times higher. This setting applies to ALL operations, whether or not they match
             * one of the perOperationStrategies.
             * </pre>
             *
             * <code>double defaultLowerBoundTracesPerSecond = 2;</code>
             *
             * @return The defaultLowerBoundTracesPerSecond.
             */
            @java.lang.Override
            public double getDefaultLowerBoundTracesPerSecond() {
                return defaultLowerBoundTracesPerSecond_;
            }

            /**
             * <pre>
             * defaultLowerBoundTracesPerSecond defines a lower-bound rate limit used to ensure that
             * there is some minimal amount of traces sampled for an endpoint that might otherwise
             * be never sampled via probabilistic strategies. The limit is local to a service instance,
             * so if a service is deployed with many (N) instances, the effective minimum rate of sampling
             * will be N times higher. This setting applies to ALL operations, whether or not they match
             * one of the perOperationStrategies.
             * </pre>
             *
             * <code>double defaultLowerBoundTracesPerSecond = 2;</code>
             *
             * @param value The defaultLowerBoundTracesPerSecond to set.
             * @return This builder for chaining.
             */
            public Builder setDefaultLowerBoundTracesPerSecond(double value) {

                defaultLowerBoundTracesPerSecond_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * defaultLowerBoundTracesPerSecond defines a lower-bound rate limit used to ensure that
             * there is some minimal amount of traces sampled for an endpoint that might otherwise
             * be never sampled via probabilistic strategies. The limit is local to a service instance,
             * so if a service is deployed with many (N) instances, the effective minimum rate of sampling
             * will be N times higher. This setting applies to ALL operations, whether or not they match
             * one of the perOperationStrategies.
             * </pre>
             *
             * <code>double defaultLowerBoundTracesPerSecond = 2;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearDefaultLowerBoundTracesPerSecond() {

                defaultLowerBoundTracesPerSecond_ = 0D;
                onChanged();
                return this;
            }

            private java.util.List<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy> perOperationStrategies_ = java.util.Collections.emptyList();

            private void ensurePerOperationStrategiesIsMutable() {
                if (!((bitField0_ & 0x00000001) != 0)) {
                    perOperationStrategies_ = new java.util.ArrayList<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy>(perOperationStrategies_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder> perOperationStrategiesBuilder_;

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            @Override
            public java.util.List<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy> getPerOperationStrategiesList() {
                if (perOperationStrategiesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(perOperationStrategies_);
                } else {
                    return perOperationStrategiesBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            @Override
            public int getPerOperationStrategiesCount() {
                if (perOperationStrategiesBuilder_ == null) {
                    return perOperationStrategies_.size();
                } else {
                    return perOperationStrategiesBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy getPerOperationStrategies(int index) {
                if (perOperationStrategiesBuilder_ == null) {
                    return perOperationStrategies_.get(index);
                } else {
                    return perOperationStrategiesBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder setPerOperationStrategies(
                                                     int index, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy value) {
                if (perOperationStrategiesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePerOperationStrategiesIsMutable();
                    perOperationStrategies_.set(index, value);
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder setPerOperationStrategies(
                                                     int index, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder builderForValue) {
                if (perOperationStrategiesBuilder_ == null) {
                    ensurePerOperationStrategiesIsMutable();
                    perOperationStrategies_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder addPerOperationStrategies(io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy value) {
                if (perOperationStrategiesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePerOperationStrategiesIsMutable();
                    perOperationStrategies_.add(value);
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder addPerOperationStrategies(
                                                     int index, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy value) {
                if (perOperationStrategiesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensurePerOperationStrategiesIsMutable();
                    perOperationStrategies_.add(index, value);
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder addPerOperationStrategies(
                                                     io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder builderForValue) {
                if (perOperationStrategiesBuilder_ == null) {
                    ensurePerOperationStrategiesIsMutable();
                    perOperationStrategies_.add(builderForValue.build());
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder addPerOperationStrategies(
                                                     int index, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder builderForValue) {
                if (perOperationStrategiesBuilder_ == null) {
                    ensurePerOperationStrategiesIsMutable();
                    perOperationStrategies_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder addAllPerOperationStrategies(
                                                        java.lang.Iterable<? extends io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy> values) {
                if (perOperationStrategiesBuilder_ == null) {
                    ensurePerOperationStrategiesIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                                                                           values, perOperationStrategies_);
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder clearPerOperationStrategies() {
                if (perOperationStrategiesBuilder_ == null) {
                    perOperationStrategies_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public Builder removePerOperationStrategies(int index) {
                if (perOperationStrategiesBuilder_ == null) {
                    ensurePerOperationStrategiesIsMutable();
                    perOperationStrategies_.remove(index);
                    onChanged();
                } else {
                    perOperationStrategiesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder getPerOperationStrategiesBuilder(
                                                                                                                       int index) {
                return getPerOperationStrategiesFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder getPerOperationStrategiesOrBuilder(
                                                                                                                          int index) {
                if (perOperationStrategiesBuilder_ == null) {
                    return perOperationStrategies_.get(index);
                } else {
                    return perOperationStrategiesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            @Override
            public java.util.List<? extends io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder> getPerOperationStrategiesOrBuilderList() {
                if (perOperationStrategiesBuilder_ != null) {
                    return perOperationStrategiesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(perOperationStrategies_);
                }
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder addPerOperationStrategiesBuilder() {
                return getPerOperationStrategiesFieldBuilder().addBuilder(
                                                                          io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.getDefaultInstance());
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder addPerOperationStrategiesBuilder(
                                                                                                                       int index) {
                return getPerOperationStrategiesFieldBuilder().addBuilder(
                                                                          index, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.getDefaultInstance());
            }

            /**
             * <pre>
             * perOperationStrategies describes sampling strategiesf for individual operations within
             * a given service.
             * </pre>
             *
             * <code>repeated .jaeger.api_v2.OperationSamplingStrategy perOperationStrategies = 3;</code>
             */
            public java.util.List<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder> getPerOperationStrategiesBuilderList() {
                return getPerOperationStrategiesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder> getPerOperationStrategiesFieldBuilder() {
                if (perOperationStrategiesBuilder_ == null) {
                    perOperationStrategiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.OperationSamplingStrategyOrBuilder>(perOperationStrategies_, ((bitField0_
                                                                                                                                                                                                                                                                                                                                    & 0x00000001) != 0), getParentForChildren(), isClean());
                    perOperationStrategies_ = null;
                }
                return perOperationStrategiesBuilder_;
            }

            private double defaultUpperBoundTracesPerSecond_;

            /**
             * <pre>
             * defaultUpperBoundTracesPerSecond defines an upper bound rate limit.
             * However, almost no Jaeger SDKs support this parameter.
             * </pre>
             *
             * <code>double defaultUpperBoundTracesPerSecond = 4;</code>
             *
             * @return The defaultUpperBoundTracesPerSecond.
             */
            @java.lang.Override
            public double getDefaultUpperBoundTracesPerSecond() {
                return defaultUpperBoundTracesPerSecond_;
            }

            /**
             * <pre>
             * defaultUpperBoundTracesPerSecond defines an upper bound rate limit.
             * However, almost no Jaeger SDKs support this parameter.
             * </pre>
             *
             * <code>double defaultUpperBoundTracesPerSecond = 4;</code>
             *
             * @param value The defaultUpperBoundTracesPerSecond to set.
             * @return This builder for chaining.
             */
            public Builder setDefaultUpperBoundTracesPerSecond(double value) {

                defaultUpperBoundTracesPerSecond_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * defaultUpperBoundTracesPerSecond defines an upper bound rate limit.
             * However, almost no Jaeger SDKs support this parameter.
             * </pre>
             *
             * <code>double defaultUpperBoundTracesPerSecond = 4;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearDefaultUpperBoundTracesPerSecond() {

                defaultUpperBoundTracesPerSecond_ = 0D;
                onChanged();
                return this;
            }

            @java.lang.Override
            public final Builder setUnknownFields(
                                                  final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                                                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }

            // @@protoc_insertion_point(builder_scope:jaeger.api_v2.PerOperationSamplingStrategies)
        }

        // @@protoc_insertion_point(class_scope:jaeger.api_v2.PerOperationSamplingStrategies)
        private static final io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies();
        }

        public static io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<PerOperationSamplingStrategies> PARSER = new com.google.protobuf.AbstractParser<PerOperationSamplingStrategies>() {
            @java.lang.Override
            public PerOperationSamplingStrategies parsePartialFrom(
                                                                   com.google.protobuf.CodedInputStream input,
                                                                   com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
                return new PerOperationSamplingStrategies(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<PerOperationSamplingStrategies> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<PerOperationSamplingStrategies> getParserForType() {
            return PARSER;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface SamplingStrategyResponseOrBuilder extends
                    // @@protoc_insertion_point(interface_extends:jaeger.api_v2.SamplingStrategyResponse)
                    com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Legacy field that was meant to indicate which one of the strategy fields
         * below is present. This enum was not extended when per-operation strategy
         * was introduced, because extending enum has backwards compatiblity issues.
         * The recommended approach for consumers is to ignore this field and instead
         * checks the other fields being not null (starting with operationSampling).
         * For producers, it is recommended to set this field correctly for probabilistic
         * and rate-limiting strategies, but if per-operation strategy is returned,
         * the enum can be set to 0 (probabilistic).
         * </pre>
         *
         * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
         *
         * @return The enum numeric value on the wire for strategyType.
         */
        int getStrategyTypeValue();

        /**
         * <pre>
         * Legacy field that was meant to indicate which one of the strategy fields
         * below is present. This enum was not extended when per-operation strategy
         * was introduced, because extending enum has backwards compatiblity issues.
         * The recommended approach for consumers is to ignore this field and instead
         * checks the other fields being not null (starting with operationSampling).
         * For producers, it is recommended to set this field correctly for probabilistic
         * and rate-limiting strategies, but if per-operation strategy is returned,
         * the enum can be set to 0 (probabilistic).
         * </pre>
         *
         * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
         *
         * @return The strategyType.
         */
        io.jaegertracing.api_v2.Sampling.SamplingStrategyType getStrategyType();

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return Whether the probabilisticSampling field is set.
         */
        boolean hasProbabilisticSampling();

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return The probabilisticSampling.
         */
        io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getProbabilisticSampling();

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         */
        io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder getProbabilisticSamplingOrBuilder();

        /**
         * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
         *
         * @return Whether the rateLimitingSampling field is set.
         */
        boolean hasRateLimitingSampling();

        /**
         * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
         *
         * @return The rateLimitingSampling.
         */
        io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy getRateLimitingSampling();

        /**
         * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
         */
        io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategyOrBuilder getRateLimitingSamplingOrBuilder();

        /**
         * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
         *
         * @return Whether the operationSampling field is set.
         */
        boolean hasOperationSampling();

        /**
         * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
         *
         * @return The operationSampling.
         */
        io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies getOperationSampling();

        /**
         * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
         */
        io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategiesOrBuilder getOperationSamplingOrBuilder();
    }

    /**
     * <pre>
     * SamplingStrategyResponse contains an overall sampling strategy for a given service.
     * This type should be treated as a union where only one of the strategy field is present.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.SamplingStrategyResponse}
     */
    public static final class SamplingStrategyResponse extends com.google.protobuf.GeneratedMessageV3 implements
                    // @@protoc_insertion_point(message_implements:jaeger.api_v2.SamplingStrategyResponse)
                    SamplingStrategyResponseOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use SamplingStrategyResponse.newBuilder() to construct.
        private SamplingStrategyResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private SamplingStrategyResponse() {
            strategyType_ = 0;
        }

        @java.lang.Override
        @SuppressWarnings({ "unused" })
        protected java.lang.Object newInstance(
                                               UnusedPrivateParameter unused) {
            return new SamplingStrategyResponse();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SamplingStrategyResponse(
                                         com.google.protobuf.CodedInputStream input,
                                         com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8: {
                            int rawValue = input.readEnum();

                            strategyType_ = rawValue;
                            break;
                        }
                        case 18: {
                            io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder subBuilder = null;
                            if (probabilisticSampling_ != null) {
                                subBuilder = probabilisticSampling_.toBuilder();
                            }
                            probabilisticSampling_ = input.readMessage(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(probabilisticSampling_);
                                probabilisticSampling_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 26: {
                            io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder subBuilder = null;
                            if (rateLimitingSampling_ != null) {
                                subBuilder = rateLimitingSampling_.toBuilder();
                            }
                            rateLimitingSampling_ = input.readMessage(io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(rateLimitingSampling_);
                                rateLimitingSampling_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 34: {
                            io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder subBuilder = null;
                            if (operationSampling_ != null) {
                                subBuilder = operationSampling_.toBuilder();
                            }
                            operationSampling_ = input.readMessage(io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(operationSampling_);
                                operationSampling_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                                   input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyResponse_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                              io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse.class,
                                                                                                                                                              io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse.Builder.class);
        }

        public static final int STRATEGYTYPE_FIELD_NUMBER = 1;
        private int strategyType_;

        /**
         * <pre>
         * Legacy field that was meant to indicate which one of the strategy fields
         * below is present. This enum was not extended when per-operation strategy
         * was introduced, because extending enum has backwards compatiblity issues.
         * The recommended approach for consumers is to ignore this field and instead
         * checks the other fields being not null (starting with operationSampling).
         * For producers, it is recommended to set this field correctly for probabilistic
         * and rate-limiting strategies, but if per-operation strategy is returned,
         * the enum can be set to 0 (probabilistic).
         * </pre>
         *
         * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
         *
         * @return The enum numeric value on the wire for strategyType.
         */
        @java.lang.Override
        public int getStrategyTypeValue() {
            return strategyType_;
        }

        /**
         * <pre>
         * Legacy field that was meant to indicate which one of the strategy fields
         * below is present. This enum was not extended when per-operation strategy
         * was introduced, because extending enum has backwards compatiblity issues.
         * The recommended approach for consumers is to ignore this field and instead
         * checks the other fields being not null (starting with operationSampling).
         * For producers, it is recommended to set this field correctly for probabilistic
         * and rate-limiting strategies, but if per-operation strategy is returned,
         * the enum can be set to 0 (probabilistic).
         * </pre>
         *
         * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
         *
         * @return The strategyType.
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.SamplingStrategyType getStrategyType() {
            @SuppressWarnings("deprecation")
            io.jaegertracing.api_v2.Sampling.SamplingStrategyType result = io.jaegertracing.api_v2.Sampling.SamplingStrategyType.valueOf(strategyType_);
            return result == null ? io.jaegertracing.api_v2.Sampling.SamplingStrategyType.UNRECOGNIZED : result;
        }

        public static final int PROBABILISTICSAMPLING_FIELD_NUMBER = 2;
        private io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy probabilisticSampling_;

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return Whether the probabilisticSampling field is set.
         */
        @java.lang.Override
        public boolean hasProbabilisticSampling() {
            return probabilisticSampling_ != null;
        }

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         *
         * @return The probabilisticSampling.
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getProbabilisticSampling() {
            return probabilisticSampling_ == null ? io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance() : probabilisticSampling_;
        }

        /**
         * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder getProbabilisticSamplingOrBuilder() {
            return getProbabilisticSampling();
        }

        public static final int RATELIMITINGSAMPLING_FIELD_NUMBER = 3;
        private io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy rateLimitingSampling_;

        /**
         * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
         *
         * @return Whether the rateLimitingSampling field is set.
         */
        @java.lang.Override
        public boolean hasRateLimitingSampling() {
            return rateLimitingSampling_ != null;
        }

        /**
         * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
         *
         * @return The rateLimitingSampling.
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy getRateLimitingSampling() {
            return rateLimitingSampling_ == null ? io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.getDefaultInstance() : rateLimitingSampling_;
        }

        /**
         * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategyOrBuilder getRateLimitingSamplingOrBuilder() {
            return getRateLimitingSampling();
        }

        public static final int OPERATIONSAMPLING_FIELD_NUMBER = 4;
        private io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies operationSampling_;

        /**
         * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
         *
         * @return Whether the operationSampling field is set.
         */
        @java.lang.Override
        public boolean hasOperationSampling() {
            return operationSampling_ != null;
        }

        /**
         * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
         *
         * @return The operationSampling.
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies getOperationSampling() {
            return operationSampling_ == null ? io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.getDefaultInstance() : operationSampling_;
        }

        /**
         * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
         */
        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategiesOrBuilder getOperationSamplingOrBuilder() {
            return getOperationSampling();
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (strategyType_ != io.jaegertracing.api_v2.Sampling.SamplingStrategyType.PROBABILISTIC.getNumber()) {
                output.writeEnum(1, strategyType_);
            }
            if (probabilisticSampling_ != null) {
                output.writeMessage(2, getProbabilisticSampling());
            }
            if (rateLimitingSampling_ != null) {
                output.writeMessage(3, getRateLimitingSampling());
            }
            if (operationSampling_ != null) {
                output.writeMessage(4, getOperationSampling());
            }
            unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1)
                return size;

            size = 0;
            if (strategyType_ != io.jaegertracing.api_v2.Sampling.SamplingStrategyType.PROBABILISTIC.getNumber()) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, strategyType_);
            }
            if (probabilisticSampling_ != null) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getProbabilisticSampling());
            }
            if (rateLimitingSampling_ != null) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getRateLimitingSampling());
            }
            if (operationSampling_ != null) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, getOperationSampling());
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse)) {
                return super.equals(obj);
            }
            io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse other = (io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse) obj;

            if (strategyType_ != other.strategyType_)
                return false;
            if (hasProbabilisticSampling() != other.hasProbabilisticSampling())
                return false;
            if (hasProbabilisticSampling()) {
                if (!getProbabilisticSampling().equals(other.getProbabilisticSampling()))
                    return false;
            }
            if (hasRateLimitingSampling() != other.hasRateLimitingSampling())
                return false;
            if (hasRateLimitingSampling()) {
                if (!getRateLimitingSampling().equals(other.getRateLimitingSampling()))
                    return false;
            }
            if (hasOperationSampling() != other.hasOperationSampling())
                return false;
            if (hasOperationSampling()) {
                if (!getOperationSampling().equals(other.getOperationSampling()))
                    return false;
            }
            if (!unknownFields.equals(other.unknownFields))
                return false;
            return true;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + STRATEGYTYPE_FIELD_NUMBER;
            hash = (53 * hash) + strategyType_;
            if (hasProbabilisticSampling()) {
                hash = (37 * hash) + PROBABILISTICSAMPLING_FIELD_NUMBER;
                hash = (53 * hash) + getProbabilisticSampling().hashCode();
            }
            if (hasRateLimitingSampling()) {
                hash = (37 * hash) + RATELIMITINGSAMPLING_FIELD_NUMBER;
                hash = (53 * hash) + getRateLimitingSampling().hashCode();
            }
            if (hasOperationSampling()) {
                hash = (37 * hash) + OPERATIONSAMPLING_FIELD_NUMBER;
                hash = (53 * hash) + getOperationSampling().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          java.nio.ByteBuffer data,
                                                                                          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          com.google.protobuf.ByteString data,
                                                                                          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          byte[] data,
                                                                                          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          java.io.InputStream input,
                                                                                          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseDelimitedFrom(
                                                                                                   java.io.InputStream input,
                                                                                                   com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parseFrom(
                                                                                          com.google.protobuf.CodedInputStream input,
                                                                                          com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @java.lang.Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * SamplingStrategyResponse contains an overall sampling strategy for a given service.
         * This type should be treated as a union where only one of the strategy field is present.
         * </pre>
         *
         * Protobuf type {@code jaeger.api_v2.SamplingStrategyResponse}
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.SamplingStrategyResponse)
                        io.jaegertracing.api_v2.Sampling.SamplingStrategyResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyResponse_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                  io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse.class,
                                                                                                                                                                  io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse.Builder.class);
            }

            // Construct using io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
                }
            }

            @java.lang.Override
            public Builder clear() {
                super.clear();
                strategyType_ = 0;

                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSampling_ = null;
                } else {
                    probabilisticSampling_ = null;
                    probabilisticSamplingBuilder_ = null;
                }
                if (rateLimitingSamplingBuilder_ == null) {
                    rateLimitingSampling_ = null;
                } else {
                    rateLimitingSampling_ = null;
                    rateLimitingSamplingBuilder_ = null;
                }
                if (operationSamplingBuilder_ == null) {
                    operationSampling_ = null;
                } else {
                    operationSampling_ = null;
                    operationSamplingBuilder_ = null;
                }
                return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyResponse_descriptor;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse getDefaultInstanceForType() {
                return io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse.getDefaultInstance();
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse build() {
                io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse buildPartial() {
                io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse result = new io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse(this);
                result.strategyType_ = strategyType_;
                if (probabilisticSamplingBuilder_ == null) {
                    result.probabilisticSampling_ = probabilisticSampling_;
                } else {
                    result.probabilisticSampling_ = probabilisticSamplingBuilder_.build();
                }
                if (rateLimitingSamplingBuilder_ == null) {
                    result.rateLimitingSampling_ = rateLimitingSampling_;
                } else {
                    result.rateLimitingSampling_ = rateLimitingSamplingBuilder_.build();
                }
                if (operationSamplingBuilder_ == null) {
                    result.operationSampling_ = operationSampling_;
                } else {
                    result.operationSampling_ = operationSamplingBuilder_.build();
                }
                onBuilt();
                return result;
            }

            @java.lang.Override
            public Builder clone() {
                return super.clone();
            }

            @java.lang.Override
            public Builder setField(
                                    com.google.protobuf.Descriptors.FieldDescriptor field,
                                    java.lang.Object value) {
                return super.setField(field, value);
            }

            @java.lang.Override
            public Builder clearField(
                                      com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @java.lang.Override
            public Builder clearOneof(
                                      com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @java.lang.Override
            public Builder setRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            int index, java.lang.Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @java.lang.Override
            public Builder addRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            java.lang.Object value) {
                return super.addRepeatedField(field, value);
            }

            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse) {
                    return mergeFrom((io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse other) {
                if (other == io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse.getDefaultInstance())
                    return this;
                if (other.strategyType_ != 0) {
                    setStrategyTypeValue(other.getStrategyTypeValue());
                }
                if (other.hasProbabilisticSampling()) {
                    mergeProbabilisticSampling(other.getProbabilisticSampling());
                }
                if (other.hasRateLimitingSampling()) {
                    mergeRateLimitingSampling(other.getRateLimitingSampling());
                }
                if (other.hasOperationSampling()) {
                    mergeOperationSampling(other.getOperationSampling());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
                return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                                     com.google.protobuf.CodedInputStream input,
                                     com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int strategyType_ = 0;

            /**
             * <pre>
             * Legacy field that was meant to indicate which one of the strategy fields
             * below is present. This enum was not extended when per-operation strategy
             * was introduced, because extending enum has backwards compatiblity issues.
             * The recommended approach for consumers is to ignore this field and instead
             * checks the other fields being not null (starting with operationSampling).
             * For producers, it is recommended to set this field correctly for probabilistic
             * and rate-limiting strategies, but if per-operation strategy is returned,
             * the enum can be set to 0 (probabilistic).
             * </pre>
             *
             * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
             *
             * @return The enum numeric value on the wire for strategyType.
             */
            @java.lang.Override
            public int getStrategyTypeValue() {
                return strategyType_;
            }

            /**
             * <pre>
             * Legacy field that was meant to indicate which one of the strategy fields
             * below is present. This enum was not extended when per-operation strategy
             * was introduced, because extending enum has backwards compatiblity issues.
             * The recommended approach for consumers is to ignore this field and instead
             * checks the other fields being not null (starting with operationSampling).
             * For producers, it is recommended to set this field correctly for probabilistic
             * and rate-limiting strategies, but if per-operation strategy is returned,
             * the enum can be set to 0 (probabilistic).
             * </pre>
             *
             * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
             *
             * @param value The enum numeric value on the wire for strategyType to set.
             * @return This builder for chaining.
             */
            public Builder setStrategyTypeValue(int value) {

                strategyType_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Legacy field that was meant to indicate which one of the strategy fields
             * below is present. This enum was not extended when per-operation strategy
             * was introduced, because extending enum has backwards compatiblity issues.
             * The recommended approach for consumers is to ignore this field and instead
             * checks the other fields being not null (starting with operationSampling).
             * For producers, it is recommended to set this field correctly for probabilistic
             * and rate-limiting strategies, but if per-operation strategy is returned,
             * the enum can be set to 0 (probabilistic).
             * </pre>
             *
             * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
             *
             * @return The strategyType.
             */
            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.SamplingStrategyType getStrategyType() {
                @SuppressWarnings("deprecation")
                io.jaegertracing.api_v2.Sampling.SamplingStrategyType result = io.jaegertracing.api_v2.Sampling.SamplingStrategyType.valueOf(strategyType_);
                return result == null ? io.jaegertracing.api_v2.Sampling.SamplingStrategyType.UNRECOGNIZED : result;
            }

            /**
             * <pre>
             * Legacy field that was meant to indicate which one of the strategy fields
             * below is present. This enum was not extended when per-operation strategy
             * was introduced, because extending enum has backwards compatiblity issues.
             * The recommended approach for consumers is to ignore this field and instead
             * checks the other fields being not null (starting with operationSampling).
             * For producers, it is recommended to set this field correctly for probabilistic
             * and rate-limiting strategies, but if per-operation strategy is returned,
             * the enum can be set to 0 (probabilistic).
             * </pre>
             *
             * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
             *
             * @param value The strategyType to set.
             * @return This builder for chaining.
             */
            public Builder setStrategyType(io.jaegertracing.api_v2.Sampling.SamplingStrategyType value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                strategyType_ = value.getNumber();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Legacy field that was meant to indicate which one of the strategy fields
             * below is present. This enum was not extended when per-operation strategy
             * was introduced, because extending enum has backwards compatiblity issues.
             * The recommended approach for consumers is to ignore this field and instead
             * checks the other fields being not null (starting with operationSampling).
             * For producers, it is recommended to set this field correctly for probabilistic
             * and rate-limiting strategies, but if per-operation strategy is returned,
             * the enum can be set to 0 (probabilistic).
             * </pre>
             *
             * <code>.jaeger.api_v2.SamplingStrategyType strategyType = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearStrategyType() {

                strategyType_ = 0;
                onChanged();
                return this;
            }

            private io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy probabilisticSampling_;
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder> probabilisticSamplingBuilder_;

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             *
             * @return Whether the probabilisticSampling field is set.
             */
            @Override
            public boolean hasProbabilisticSampling() {
                return probabilisticSamplingBuilder_ != null || probabilisticSampling_ != null;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             *
             * @return The probabilisticSampling.
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy getProbabilisticSampling() {
                if (probabilisticSamplingBuilder_ == null) {
                    return probabilisticSampling_ == null ? io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance() : probabilisticSampling_;
                } else {
                    return probabilisticSamplingBuilder_.getMessage();
                }
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder setProbabilisticSampling(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy value) {
                if (probabilisticSamplingBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    probabilisticSampling_ = value;
                    onChanged();
                } else {
                    probabilisticSamplingBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder setProbabilisticSampling(
                                                    io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder builderForValue) {
                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSampling_ = builderForValue.build();
                    onChanged();
                } else {
                    probabilisticSamplingBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder mergeProbabilisticSampling(io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy value) {
                if (probabilisticSamplingBuilder_ == null) {
                    if (probabilisticSampling_ != null) {
                        probabilisticSampling_ = io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.newBuilder(probabilisticSampling_).mergeFrom(value).buildPartial();
                    } else {
                        probabilisticSampling_ = value;
                    }
                    onChanged();
                } else {
                    probabilisticSamplingBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public Builder clearProbabilisticSampling() {
                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSampling_ = null;
                    onChanged();
                } else {
                    probabilisticSampling_ = null;
                    probabilisticSamplingBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder getProbabilisticSamplingBuilder() {

                onChanged();
                return getProbabilisticSamplingFieldBuilder().getBuilder();
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder getProbabilisticSamplingOrBuilder() {
                if (probabilisticSamplingBuilder_ != null) {
                    return probabilisticSamplingBuilder_.getMessageOrBuilder();
                } else {
                    return probabilisticSampling_ == null ? io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.getDefaultInstance() : probabilisticSampling_;
                }
            }

            /**
             * <code>.jaeger.api_v2.ProbabilisticSamplingStrategy probabilisticSampling = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder> getProbabilisticSamplingFieldBuilder() {
                if (probabilisticSamplingBuilder_ == null) {
                    probabilisticSamplingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.ProbabilisticSamplingStrategyOrBuilder>(getProbabilisticSampling(), getParentForChildren(), isClean());
                    probabilisticSampling_ = null;
                }
                return probabilisticSamplingBuilder_;
            }

            private io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy rateLimitingSampling_;
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy, io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategyOrBuilder> rateLimitingSamplingBuilder_;

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             *
             * @return Whether the rateLimitingSampling field is set.
             */
            @Override
            public boolean hasRateLimitingSampling() {
                return rateLimitingSamplingBuilder_ != null || rateLimitingSampling_ != null;
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             *
             * @return The rateLimitingSampling.
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy getRateLimitingSampling() {
                if (rateLimitingSamplingBuilder_ == null) {
                    return rateLimitingSampling_ == null ? io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.getDefaultInstance() : rateLimitingSampling_;
                } else {
                    return rateLimitingSamplingBuilder_.getMessage();
                }
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             */
            public Builder setRateLimitingSampling(io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy value) {
                if (rateLimitingSamplingBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    rateLimitingSampling_ = value;
                    onChanged();
                } else {
                    rateLimitingSamplingBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             */
            public Builder setRateLimitingSampling(
                                                   io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder builderForValue) {
                if (rateLimitingSamplingBuilder_ == null) {
                    rateLimitingSampling_ = builderForValue.build();
                    onChanged();
                } else {
                    rateLimitingSamplingBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             */
            public Builder mergeRateLimitingSampling(io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy value) {
                if (rateLimitingSamplingBuilder_ == null) {
                    if (rateLimitingSampling_ != null) {
                        rateLimitingSampling_ = io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.newBuilder(rateLimitingSampling_).mergeFrom(value).buildPartial();
                    } else {
                        rateLimitingSampling_ = value;
                    }
                    onChanged();
                } else {
                    rateLimitingSamplingBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             */
            public Builder clearRateLimitingSampling() {
                if (rateLimitingSamplingBuilder_ == null) {
                    rateLimitingSampling_ = null;
                    onChanged();
                } else {
                    rateLimitingSampling_ = null;
                    rateLimitingSamplingBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             */
            public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder getRateLimitingSamplingBuilder() {

                onChanged();
                return getRateLimitingSamplingFieldBuilder().getBuilder();
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategyOrBuilder getRateLimitingSamplingOrBuilder() {
                if (rateLimitingSamplingBuilder_ != null) {
                    return rateLimitingSamplingBuilder_.getMessageOrBuilder();
                } else {
                    return rateLimitingSampling_ == null ? io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.getDefaultInstance() : rateLimitingSampling_;
                }
            }

            /**
             * <code>.jaeger.api_v2.RateLimitingSamplingStrategy rateLimitingSampling = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy, io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategyOrBuilder> getRateLimitingSamplingFieldBuilder() {
                if (rateLimitingSamplingBuilder_ == null) {
                    rateLimitingSamplingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy, io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategy.Builder, io.jaegertracing.api_v2.Sampling.RateLimitingSamplingStrategyOrBuilder>(getRateLimitingSampling(), getParentForChildren(), isClean());
                    rateLimitingSampling_ = null;
                }
                return rateLimitingSamplingBuilder_;
            }

            private io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies operationSampling_;
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies, io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder, io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategiesOrBuilder> operationSamplingBuilder_;

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             *
             * @return Whether the operationSampling field is set.
             */
            @Override
            public boolean hasOperationSampling() {
                return operationSamplingBuilder_ != null || operationSampling_ != null;
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             *
             * @return The operationSampling.
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies getOperationSampling() {
                if (operationSamplingBuilder_ == null) {
                    return operationSampling_ == null ? io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.getDefaultInstance() : operationSampling_;
                } else {
                    return operationSamplingBuilder_.getMessage();
                }
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             */
            public Builder setOperationSampling(io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies value) {
                if (operationSamplingBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    operationSampling_ = value;
                    onChanged();
                } else {
                    operationSamplingBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             */
            public Builder setOperationSampling(
                                                io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder builderForValue) {
                if (operationSamplingBuilder_ == null) {
                    operationSampling_ = builderForValue.build();
                    onChanged();
                } else {
                    operationSamplingBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             */
            public Builder mergeOperationSampling(io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies value) {
                if (operationSamplingBuilder_ == null) {
                    if (operationSampling_ != null) {
                        operationSampling_ = io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.newBuilder(operationSampling_).mergeFrom(value).buildPartial();
                    } else {
                        operationSampling_ = value;
                    }
                    onChanged();
                } else {
                    operationSamplingBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             */
            public Builder clearOperationSampling() {
                if (operationSamplingBuilder_ == null) {
                    operationSampling_ = null;
                    onChanged();
                } else {
                    operationSampling_ = null;
                    operationSamplingBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             */
            public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder getOperationSamplingBuilder() {

                onChanged();
                return getOperationSamplingFieldBuilder().getBuilder();
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             */
            @Override
            public io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategiesOrBuilder getOperationSamplingOrBuilder() {
                if (operationSamplingBuilder_ != null) {
                    return operationSamplingBuilder_.getMessageOrBuilder();
                } else {
                    return operationSampling_ == null ? io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.getDefaultInstance() : operationSampling_;
                }
            }

            /**
             * <code>.jaeger.api_v2.PerOperationSamplingStrategies operationSampling = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies, io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder, io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategiesOrBuilder> getOperationSamplingFieldBuilder() {
                if (operationSamplingBuilder_ == null) {
                    operationSamplingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies, io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategies.Builder, io.jaegertracing.api_v2.Sampling.PerOperationSamplingStrategiesOrBuilder>(getOperationSampling(), getParentForChildren(), isClean());
                    operationSampling_ = null;
                }
                return operationSamplingBuilder_;
            }

            @java.lang.Override
            public final Builder setUnknownFields(
                                                  final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                                                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }

            // @@protoc_insertion_point(builder_scope:jaeger.api_v2.SamplingStrategyResponse)
        }

        // @@protoc_insertion_point(class_scope:jaeger.api_v2.SamplingStrategyResponse)
        private static final io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse();
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<SamplingStrategyResponse> PARSER = new com.google.protobuf.AbstractParser<SamplingStrategyResponse>() {
            @java.lang.Override
            public SamplingStrategyResponse parsePartialFrom(
                                                             com.google.protobuf.CodedInputStream input,
                                                             com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
                return new SamplingStrategyResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<SamplingStrategyResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<SamplingStrategyResponse> getParserForType() {
            return PARSER;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.SamplingStrategyResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface SamplingStrategyParametersOrBuilder extends
                    // @@protoc_insertion_point(interface_extends:jaeger.api_v2.SamplingStrategyParameters)
                    com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * serviceName is a required argument.
         * </pre>
         *
         * <code>string serviceName = 1;</code>
         *
         * @return The serviceName.
         */
        java.lang.String getServiceName();

        /**
         * <pre>
         * serviceName is a required argument.
         * </pre>
         *
         * <code>string serviceName = 1;</code>
         *
         * @return The bytes for serviceName.
         */
        com.google.protobuf.ByteString getServiceNameBytes();
    }

    /**
     * <pre>
     * SamplingStrategyParameters defines request parameters for remote sampler.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.SamplingStrategyParameters}
     */
    public static final class SamplingStrategyParameters extends com.google.protobuf.GeneratedMessageV3 implements
                    // @@protoc_insertion_point(message_implements:jaeger.api_v2.SamplingStrategyParameters)
                    SamplingStrategyParametersOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use SamplingStrategyParameters.newBuilder() to construct.
        private SamplingStrategyParameters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private SamplingStrategyParameters() {
            serviceName_ = "";
        }

        @java.lang.Override
        @SuppressWarnings({ "unused" })
        protected java.lang.Object newInstance(
                                               UnusedPrivateParameter unused) {
            return new SamplingStrategyParameters();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SamplingStrategyParameters(
                                           com.google.protobuf.CodedInputStream input,
                                           com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {
                            java.lang.String s = input.readStringRequireUtf8();

                            serviceName_ = s;
                            break;
                        }
                        default: {
                            if (!parseUnknownField(
                                                   input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyParameters_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyParameters_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters.class,
                                                                                                                                                                io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters.Builder.class);
        }

        public static final int SERVICENAME_FIELD_NUMBER = 1;
        private volatile java.lang.Object serviceName_;

        /**
         * <pre>
         * serviceName is a required argument.
         * </pre>
         *
         * <code>string serviceName = 1;</code>
         *
         * @return The serviceName.
         */
        @java.lang.Override
        public java.lang.String getServiceName() {
            java.lang.Object ref = serviceName_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                serviceName_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * serviceName is a required argument.
         * </pre>
         *
         * <code>string serviceName = 1;</code>
         *
         * @return The bytes for serviceName.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getServiceNameBytes() {
            java.lang.Object ref = serviceName_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8(
                                                                                               (java.lang.String) ref);
                serviceName_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private byte memoizedIsInitialized = -1;

        @java.lang.Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            if (!getServiceNameBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, serviceName_);
            }
            unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1)
                return size;

            size = 0;
            if (!getServiceNameBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, serviceName_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters)) {
                return super.equals(obj);
            }
            io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters other = (io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters) obj;

            if (!getServiceName().equals(other.getServiceName()))
                return false;
            if (!unknownFields.equals(other.unknownFields))
                return false;
            return true;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + SERVICENAME_FIELD_NUMBER;
            hash = (53 * hash) + getServiceName().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            java.nio.ByteBuffer data,
                                                                                            com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            com.google.protobuf.ByteString data,
                                                                                            com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            byte[] data,
                                                                                            com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            java.io.InputStream input,
                                                                                            com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseDelimitedFrom(
                                                                                                     java.io.InputStream input,
                                                                                                     com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parseFrom(
                                                                                            com.google.protobuf.CodedInputStream input,
                                                                                            com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        @java.lang.Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * SamplingStrategyParameters defines request parameters for remote sampler.
         * </pre>
         *
         * Protobuf type {@code jaeger.api_v2.SamplingStrategyParameters}
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.SamplingStrategyParameters)
                        io.jaegertracing.api_v2.Sampling.SamplingStrategyParametersOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyParameters_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyParameters_fieldAccessorTable.ensureFieldAccessorsInitialized(
                                                                                                                                                                    io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters.class,
                                                                                                                                                                    io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters.Builder.class);
            }

            // Construct using io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
                }
            }

            @java.lang.Override
            public Builder clear() {
                super.clear();
                serviceName_ = "";

                return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return io.jaegertracing.api_v2.Sampling.internal_static_jaeger_api_v2_SamplingStrategyParameters_descriptor;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters getDefaultInstanceForType() {
                return io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters.getDefaultInstance();
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters build() {
                io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @java.lang.Override
            public io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters buildPartial() {
                io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters result = new io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters(this);
                result.serviceName_ = serviceName_;
                onBuilt();
                return result;
            }

            @java.lang.Override
            public Builder clone() {
                return super.clone();
            }

            @java.lang.Override
            public Builder setField(
                                    com.google.protobuf.Descriptors.FieldDescriptor field,
                                    java.lang.Object value) {
                return super.setField(field, value);
            }

            @java.lang.Override
            public Builder clearField(
                                      com.google.protobuf.Descriptors.FieldDescriptor field) {
                return super.clearField(field);
            }

            @java.lang.Override
            public Builder clearOneof(
                                      com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return super.clearOneof(oneof);
            }

            @java.lang.Override
            public Builder setRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            int index, java.lang.Object value) {
                return super.setRepeatedField(field, index, value);
            }

            @java.lang.Override
            public Builder addRepeatedField(
                                            com.google.protobuf.Descriptors.FieldDescriptor field,
                                            java.lang.Object value) {
                return super.addRepeatedField(field, value);
            }

            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters) {
                    return mergeFrom((io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters other) {
                if (other == io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters.getDefaultInstance())
                    return this;
                if (!other.getServiceName().isEmpty()) {
                    serviceName_ = other.serviceName_;
                    onChanged();
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
                return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                                     com.google.protobuf.CodedInputStream input,
                                     com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private java.lang.Object serviceName_ = "";

            /**
             * <pre>
             * serviceName is a required argument.
             * </pre>
             *
             * <code>string serviceName = 1;</code>
             *
             * @return The serviceName.
             */
            @Override
            public java.lang.String getServiceName() {
                java.lang.Object ref = serviceName_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    serviceName_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <pre>
             * serviceName is a required argument.
             * </pre>
             *
             * <code>string serviceName = 1;</code>
             *
             * @return The bytes for serviceName.
             */
            @Override
            public com.google.protobuf.ByteString getServiceNameBytes() {
                java.lang.Object ref = serviceName_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8(
                                                                                                   (java.lang.String) ref);
                    serviceName_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * serviceName is a required argument.
             * </pre>
             *
             * <code>string serviceName = 1;</code>
             *
             * @param value The serviceName to set.
             * @return This builder for chaining.
             */
            public Builder setServiceName(
                                          java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                serviceName_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * serviceName is a required argument.
             * </pre>
             *
             * <code>string serviceName = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearServiceName() {

                serviceName_ = getDefaultInstance().getServiceName();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * serviceName is a required argument.
             * </pre>
             *
             * <code>string serviceName = 1;</code>
             *
             * @param value The bytes for serviceName to set.
             * @return This builder for chaining.
             */
            public Builder setServiceNameBytes(
                                               com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                serviceName_ = value;
                onChanged();
                return this;
            }

            @java.lang.Override
            public final Builder setUnknownFields(
                                                  final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                                                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }

            // @@protoc_insertion_point(builder_scope:jaeger.api_v2.SamplingStrategyParameters)
        }

        // @@protoc_insertion_point(class_scope:jaeger.api_v2.SamplingStrategyParameters)
        private static final io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters();
        }

        public static io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<SamplingStrategyParameters> PARSER = new com.google.protobuf.AbstractParser<SamplingStrategyParameters>() {
            @java.lang.Override
            public SamplingStrategyParameters parsePartialFrom(
                                                               com.google.protobuf.CodedInputStream input,
                                                               com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
                return new SamplingStrategyParameters(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<SamplingStrategyParameters> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<SamplingStrategyParameters> getParserForType() {
            return PARSER;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.Sampling.SamplingStrategyParameters getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_descriptor;
    private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_descriptor;
    private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_jaeger_api_v2_OperationSamplingStrategy_descriptor;
    private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_jaeger_api_v2_OperationSamplingStrategy_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_jaeger_api_v2_PerOperationSamplingStrategies_descriptor;
    private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_jaeger_api_v2_PerOperationSamplingStrategies_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_jaeger_api_v2_SamplingStrategyResponse_descriptor;
    private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_jaeger_api_v2_SamplingStrategyResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_jaeger_api_v2_SamplingStrategyParameters_descriptor;
    private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_jaeger_api_v2_SamplingStrategyParameters_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor descriptor;
    static {
        java.lang.String[] descriptorData = {
                                              "\n\016sampling.proto\022\rjaeger.api_v2\032\024gogopro" +
                                              "to/gogo.proto\032\034google/api/annotations.pr" +
                                              "oto\"5\n\035ProbabilisticSamplingStrategy\022\024\n\014" +
                                              "samplingRate\030\001 \001(\001\":\n\034RateLimitingSampli" +
                                              "ngStrategy\022\032\n\022maxTracesPerSecond\030\001 \001(\005\"{" +
                                              "\n\031OperationSamplingStrategy\022\021\n\toperation" +
                                              "\030\001 \001(\t\022K\n\025probabilisticSampling\030\002 \001(\0132,." +
                                              "jaeger.api_v2.ProbabilisticSamplingStrat" +
                                              "egy\"\342\001\n\036PerOperationSamplingStrategies\022\"" +
                                              "\n\032defaultSamplingProbability\030\001 \001(\001\022(\n de" +
                                              "faultLowerBoundTracesPerSecond\030\002 \001(\001\022H\n\026" +
                                              "perOperationStrategies\030\003 \003(\0132(.jaeger.ap" +
                                              "i_v2.OperationSamplingStrategy\022(\n defaul" +
                                              "tUpperBoundTracesPerSecond\030\004 \001(\001\"\267\002\n\030Sam" +
                                              "plingStrategyResponse\0229\n\014strategyType\030\001 " +
                                              "\001(\0162#.jaeger.api_v2.SamplingStrategyType" +
                                              "\022K\n\025probabilisticSampling\030\002 \001(\0132,.jaeger" +
                                              ".api_v2.ProbabilisticSamplingStrategy\022I\n" +
                                              "\024rateLimitingSampling\030\003 \001(\0132+.jaeger.api" +
                                              "_v2.RateLimitingSamplingStrategy\022H\n\021oper" +
                                              "ationSampling\030\004 \001(\0132-.jaeger.api_v2.PerO" +
                                              "perationSamplingStrategies\"1\n\032SamplingSt" +
                                              "rategyParameters\022\023\n\013serviceName\030\001 \001(\t*<\n" +
                                              "\024SamplingStrategyType\022\021\n\rPROBABILISTIC\020\000" +
                                              "\022\021\n\rRATE_LIMITING\020\0012\242\001\n\017SamplingManager\022" +
                                              "\216\001\n\023GetSamplingStrategy\022).jaeger.api_v2." +
                                              "SamplingStrategyParameters\032\'.jaeger.api_" +
                                              "v2.SamplingStrategyResponse\"#\202\323\344\223\002\035\"\030/ap" +
                                              "i/v2/samplingStrategy:\001*B-\n\027io.jaegertra" +
                                              "cing.api_v2Z\006api_v2\310\342\036\001\320\342\036\001\340\342\036\001b\006proto3"
        };
        descriptor = com.google.protobuf.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData,
                                                                                                   new com.google.protobuf.Descriptors.FileDescriptor[] {
                                                                                                   });
        internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_descriptor = getDescriptor().getMessageTypes().get(0);
        internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(internal_static_jaeger_api_v2_ProbabilisticSamplingStrategy_descriptor, new java.lang.String[] { "SamplingRate", });
        internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_descriptor = getDescriptor().getMessageTypes().get(1);
        internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(internal_static_jaeger_api_v2_RateLimitingSamplingStrategy_descriptor, new java.lang.String[] { "MaxTracesPerSecond", });
        internal_static_jaeger_api_v2_OperationSamplingStrategy_descriptor = getDescriptor().getMessageTypes().get(2);
        internal_static_jaeger_api_v2_OperationSamplingStrategy_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(internal_static_jaeger_api_v2_OperationSamplingStrategy_descriptor, new java.lang.String[] { "Operation",
                                                                                                                                                                                                                                                "ProbabilisticSampling", });
        internal_static_jaeger_api_v2_PerOperationSamplingStrategies_descriptor = getDescriptor().getMessageTypes().get(3);
        internal_static_jaeger_api_v2_PerOperationSamplingStrategies_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(internal_static_jaeger_api_v2_PerOperationSamplingStrategies_descriptor, new java.lang.String[] { "DefaultSamplingProbability",
                                                                                                                                                                                                                                                          "DefaultLowerBoundTracesPerSecond",
                                                                                                                                                                                                                                                          "PerOperationStrategies",
                                                                                                                                                                                                                                                          "DefaultUpperBoundTracesPerSecond", });
        internal_static_jaeger_api_v2_SamplingStrategyResponse_descriptor = getDescriptor().getMessageTypes().get(4);
        internal_static_jaeger_api_v2_SamplingStrategyResponse_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(internal_static_jaeger_api_v2_SamplingStrategyResponse_descriptor, new java.lang.String[] { "StrategyType",
                                                                                                                                                                                                                                              "ProbabilisticSampling",
                                                                                                                                                                                                                                              "RateLimitingSampling",
                                                                                                                                                                                                                                              "OperationSampling", });
        internal_static_jaeger_api_v2_SamplingStrategyParameters_descriptor = getDescriptor().getMessageTypes().get(5);
        internal_static_jaeger_api_v2_SamplingStrategyParameters_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(internal_static_jaeger_api_v2_SamplingStrategyParameters_descriptor, new java.lang.String[] { "ServiceName", });
        com.google.protobuf.ExtensionRegistry registry = com.google.protobuf.ExtensionRegistry.newInstance();
        com.google.protobuf.Descriptors.FileDescriptor.internalUpdateFileDescriptor(descriptor, registry);
    }

    // @@protoc_insertion_point(outer_class_scope)
}
