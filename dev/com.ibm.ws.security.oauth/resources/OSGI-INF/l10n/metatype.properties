###############################################################################
# Copyright (c) 2019 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#
#ISMESSAGEFILE FALSE
# -------------------------------------------------------------------------------------------------

oauthRoles=OAuth Role Map
oauthRoles.desc=OAuth web application security role map.

authenticated=Authenticated Role
authenticated.desc=Security role for authorization code and token requests.

clientManager=Client Manager Role
clientManager.desc=Security role for client management requests.

tokenManager=Token Manager Role
tokenManager.desc=Security role for token management requests.

user=User
user.desc=User who has the security role.

userName=User name
userName.desc=Name of a user who has the security role.

userAccessId=User access ID
userAccessId.desc=A user access ID in the general form user:realmName/userUniqueId. A value will be generated if one is not specified.

group=Group
group.desc=Group that has the security role.

groupName=Group name
groupName.desc=Name of a group that has the security role.

groupAccessId=Group access ID
groupAccessId.desc=A group access ID in the general form group:realmName/groupUniqueId. A value will be generated if one is not specified.

specialSubject=Special Subject
specialSubject.desc=Special subject that has the security role.

specialSubjectType=Special subject type
specialSubjectType.desc=One of the following special subject types: ALL_AUTHENTICATED_USERS, EVERYONE.

allAuthenticated.desc=All authenticated users.

everyone.desc=All users for every request, even if the request was not authenticated.

client=OAuth Client
client.desc=OAuth client definition. Only clients defined here can access the provider.

name=Name
name.desc=Name of the client (sometimes referred to as the Id).

secret=Secret key
secret.desc=Secret key of the client.

displayname=Display name
displayname.desc=Display name of the client.

redirect=Array of redirect URIs
redirect.desc=Array of redirect URIs for use in redirect-based flows such as the authorization code and implicit grant types of the client. The first redirect URI is used as a default, when none is specified in a request. Each URI must be an absolute URI as defined by RFC 3986.

enabled=Client enabled
enabled.desc=Client is enabled if true, disabled if false.

oauthProvider=OAuth Provider Definition
oauthProvider.desc=OAuth provider definition.

localStore=Local Store
localStore.desc=Clients are defined in server.xml and tokens are cached in the server.

localStore.tokenStoreSize=Token store size
localStore.tokenStoreSize.desc=Maximum number of entries allowed in the token store.

databaseStore=Database Store
databaseStore.desc=Clients are defined and tokens are cached in the database.

dataSourceRef=Data Source
dataSourceRef$Ref=Data source reference
dataSourceRef.desc=Reference to the data source for the store.

cleanupExpiredTokenInterval=Database cleanup interval
cleanupExpiredTokenInterval.desc=The interval to use for cleaning up expired tokens from the database store. The valid range is 0 to Integer.MAX_VALUE in seconds. A value of 0 indicates that no cleanup is performed.

cleanupExpiredInterval=Custom OAuthStore cleanup interval
cleanupExpiredInterval.desc=The interval to use for cleaning up expired tokens and consents from the custom OAuthStore implementation. The valid range is 0 to Integer.MAX_VALUE in seconds. A value of 0 indicates that no cleanup is performed.

databaseStore.user=User
databaseStore.user.desc=Userid used to access the database.

databaseStore.password=Password
databaseStore.password.desc=Password used to access the database.

databaseStore.schema=Schema
databaseStore.schema.desc=Database schema name.

customStore=Custom OAuthStore
customStore.desc=Clients are defined, and tokens and consents are cached in a custom OAuthStore implementation.

storeId=Custom OAuthStore ID
storeId.desc=Specifies the OAuthStore ID to use for a custom store. The value must match the value of the oauth.store.id property that is specified for the OAuthStore implementation.

authorizationGrantLifetime=Authorization grant lifetime
authorizationGrantLifetime.desc=Authorization grant lifetime (seconds).

authorizationCodeLifetime=Authorization code lifetime
authorizationCodeLifetime.desc=Authorization code lifetime (seconds).

authorizationCodeLength=Authorization code length
authorizationCodeLength.desc=Length of the generated authorization code.

accessTokenLifetime=Access token lifetime
accessTokenLifetime.desc=Time that access token is valid (seconds).

accessTokenLength=Access token length
accessTokenLength.desc=Length of the generated OAuth access token.

issueRefreshToken=Refresh token use flag
issueRefreshToken.desc=A value of false disables generation and the use of refresh tokens.

refreshTokenLength=Refresh token length
refreshTokenLength.desc=Length of generated refresh token.

revokeAccessTokensWithRefreshTokens=Revoke access tokens when refresh token revoked
revokeAccessTokensWithRefreshTokens.desc=A value of false disables revocation of associated access tokens when a refresh token is revoked. The default value is true.

libraryRef=Shared Library
libraryRef$Ref=Shared library reference
libraryRef.desc=Reference to shared library containing the mediator plugin class.

mediatorClassname=Mediator class name
mediatorClassname.desc=Mediator plugin class name.

allowPublicClients=Allow public clients to access OAuth provider
allowPublicClients.desc=A value of false disables the access of public clients as detailed in the OAuth specification.

grantType=OAuth grant type
grantType.desc=An OAuth 2.0 grant type, as detailed in the OAuth 2.0 specification, that is allowed for the provider. By default, all grant types are allowed. The supported values are authorization_code, client_credentials, refresh_token, password, implicit and urn:ietf:params:oauth:grant-type:jwt-bearer.

authorizationFormTemplate=Custom authorization form
authorizationFormTemplate.desc=URL of a custom authorization page template.

authorizationErrorTemplate=Custom authorization error form
authorizationErrorTemplate.desc=URL of a custom authorization error page template.

customLoginURL=Custom login form
customLoginURL.desc=URL of a custom login page.

autoAuthorizeParam=Auto authorization parameter
autoAuthorizeParam.desc=To use auto authorization, append the autoAuthorize parameter to requests with a value of true.

autoAuthorize=Auto authorization
autoAuthorize.desc=Uses auto authorization, if this is true. Default is false.

autoAuthorizeClient=Auto authorize client
autoAuthorizeClient.desc=Name of a client that is allowed to use auto authorization.

clientURISubstitutions=Client URI substitution
clientURISubstitutions.desc=Optional value to replace client URI strings for dynamic host names.

clientTokenCacheSize=Client token cache size
clientTokenCacheSize.desc=Maximum number of entries in the client token cache.

userClientTokenLimit=User client token limit
userClientTokenLimit.desc=Token limit for each user and client combination.

appTokenOrPasswordLimit=Application token or password limit
appTokenOrPasswordLimit.desc=Token limit for each user and client combination.

proofKeyForCodeExchange=Proof key for code exchange
proofKeyForCodeExchange.desc=Proof key for code exchange support for OAuth clients.

publicClient=Public OAuth client
publicClient.desc=Specify whether OAuth client is public.

filter=Request filter
filter.desc=URI filter selects requests to be authorized by this provider.

characterEncoding=Character encoding
characterEncoding.desc=Set request character encoding to this value.

oauthOnly=Fail authentication if OAuth access token missing
oauthOnly.desc=If the value is true, then requests matching the filter must have an access token or they will be failed. If false, then matching requests will be checked for other authentication data if no access token is present.

includeTokenInSubject=Include OAuth token in subject
includeTokenInSubject.desc=If the value is true, add the com.ibm.wsspi.security.oauth20.token.WSOAuth20Token as a private credential.

consentCacheEntryLifetime=Consent cache entry lifetime
consentCacheEntryLifetime.desc=Time that an entry in the consent cache is valid (seconds).

consentCacheSize=Consent cache size
consentCacheSize.desc=Maximum number of entries allowed in the consent cache.

httpsRequired=Require SSL communication
httpsRequired.desc=SSL communication between the OAuth client and provider is required.

certAuthentication=Enable client certificate authentication
certAuthentication.desc=Enable the authentication of client certificate in the https request.

allowCertAuthentication=Allow client certificate authentication
allowCertAuthentication.desc=Allow the authentication of a client certificate if a client certificate is included in the https request. This attribute allows client certificates to be used for authentication even if the certAuthentication attribute is set to false.

allowSpnegoAuthentication=Allow SPNEGO authentication
allowSpnegoAuthentication.desc=Allow the authentication of an SPNEGO token in the https request. 

coverageMapSessionMaxAge=Coverage map session max age
coverageMapSessionMaxAge.desc=The max-age value (seconds) for the cache-control header of the coverage map service.
skipResourceOwnerValidation=Skip resource owner validation
skipResourceOwnerValidation.desc=If the value is true, skip validation of resource owner.

# new attribute for JWT GrantType
jwtGrantType=JWT Grant Type
jwtGrantType.desc=The grant_type for JWT Token handler

maxJtiCacheSize=Maximum size of cache for jti of jwt token
maxJtiCacheSize.desc=The maximum size of cache, which keeps jti data of jwt token, to prevent the jti from being reused.

clockSkew=The time difference allowed between systems
clockSkew.desc=The time difference allowed between OpenID Connect Client and OpenID Connect Provider systems when they are not synchronized.

tokenMaxLifetime=Maximum lifetime of a jwt token
tokenMaxLifetime.desc=The time indicates the maximum lifetime of an alive jwt token since its issued-at-time.

iatRequired=Required iat claim in a jwt token
iatRequired.desc=The iat claim in a jwt token is required.

jwtAccessToken=Access token is JWT
jwtAccessToken.desc=Generate the Json Web Token, serialize it as a string and put in the place of the access token.

resourceIds=Resource identifiers
resourceIds.desc=The resource identifiers which are the audiences of the Json Web Token.

logoutRedirectURL=URL used after logout
logoutRedirectURL.desc=Optional URL that the client is redirected to after successfully invoking the logout endpoint. If a URL is not supplied, then a minimal default logout page is used.

appPasswordAllowed=Application password allowed
appPasswordAllowed.desc=When set to true, the OAuth client is allowed to request application passwords.

appTokenAllowed=Application token allowed
appTokenAllowed.desc=When set to true, the OAuth client is allowed to request application tokens.

appPasswordLifetime=Application password lifetime
appPasswordLifetime.desc=Specifies the lifetime of application passwords that are generated by this OAuth provider.

appTokenLifetime=Application token lifetime
appTokenLifetime.desc=Specifies the lifetime of application tokens that are generated by this OAuth provider.

passwordGrantRequiresAppPassword=Password grant requires application password
passwordGrantRequiresAppPassword.desc=When set to true, OAuth authorization flows that use the resource owner password credentials grant type must use an application password instead of the password configured for a user in the user registry. When this attribute is enabled, OAuth clients must obtain an application password from this OAuth provider to use the password grant type.

# -------------------------------------------------------------------------------------------------
#	End of temporary addition of OpenId Connect Server Properties
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
#	Additional metatype properties to support OIDC Client Registration
# -------------------------------------------------------------------------------------------------
tokenEndpointAuthMethod=Token endpoint authentication method
tokenEndpointAuthMethod.desc=The requested authentication method for the token endpoint of the client.
tokenEndpointAuthMethod.none=none
tokenEndpointAuthMethod.clientSecretPost=client_secret_post
tokenEndpointAuthMethod.clientSecretBasic=client_secret_basic

scope=Scope
scope.desc=Specify by spaces the list of scopes of the client.

grantTypes=Grant types
grantTypes.desc=Grant types the client may use.
grantTypes.authorizationCode=authorization_code
grantTypes.implicit=implicit
grantTypes.refreshToken=refresh_token
grantTypes.clientCredentials=client_credentials
grantTypes.password=password
grantTypes.jwtBearer=urn:ietf:params:oauth:grant-type:jwt-bearer

responseTypes=Response types
responseTypes.desc=Response types the client may use.
responseTypes.code=code
responseTypes.token=token
responseTypes.idTokenToken=id_token token

applicationType=Application type
applicationType.desc=The type of application best describing the client.
applicationType.native=native
applicationType.web=web

subjectType=Subject type
subjectType.desc=Subject type requested for response to this client.
subjectType.public=public

postLogoutRedirectUris=Post logout redirection URIs
postLogoutRedirectUris.desc=Array of URLs supplied by the RP to which it may request that the end-user's user agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.

sessionManaged=Session managed
sessionManaged.desc=Boolean indicating whether the client participates in OpenID session management.

preAuthorizedScope=PreAuthorized scope
preAuthorizedScope.desc=Space separated list of scope values that the client can use when requesting access tokens that are deemed to have been pre-approved by the resource owner and therefore does not require the resource owner's consent.

introspectTokens=Introspect tokens
introspectTokens.desc=Boolean value specifying whether the client is allowed to access the introspection endpoint to introspect tokens issued by the authorization server.

functionalUserId=Functional user ID
functionalUserId.desc=A user identifier to be associated with access tokens obtained by this client using the client credentials grant type. When this client parameter is specified, the value is returned in the functional_user_id response parameter from the introspect endpoint.

functionalUserGroupIds=Functional user group IDs
functionalUserGroupIds.desc=A list of group ids to be to be associated with access tokens obtained by this client using the client credentials grant type. When this client parameter is specified, the value is returned in the functional_user_groupIds response parameter from the introspect endpoint.


tokenFormat=Type of JWT token issued
tokenFormat.desc=The type of token to be produced. One of opaque, jwt, or mpjwt. Mpjwt is microprofile standardized format. The default is opaque.
tokenFormat.opaque=opaque
tokenFormat.jwt=jwt
tokenFormat.mpjwt=mpjwt

accessTokenCacheEnabled=Cache access tokens
accessTokenCacheEnabled.desc=Enable caching to save access tokens in the database and in-memory cache.

allowRegexpRedirects=Allow regular expression redirects
allowRegexpRedirects.desc=Allow redirect URLs to contain regular expressions. The default is false.

clientSecretEncoding=Client secret encoding
clientSecretEncoding.desc=The encoding type for the stored client secret. The default is set to XOR, for compatibility with earlier versions. PBKDF2WithHmacSHA512 is recommended. 
clientSecretEncoding.xor=xor
clientSecretEncoding.PBKDF2WithHmacSHA512=PBKDF2WithHmacSHA512

accessTokenEncoding=Access token encoding
accessTokenEncoding.desc=The encoding type for the stored access token. The default is set to plain, for compatibility with earlier versions. PBKDF2WithHmacSHA512 is recommended. 
accessTokenEncoding.plain=plain
accessTokenEncoding.PBKDF2WithHmacSHA512=PBKDF2WithHmacSHA512

# -------------------------------------------------------------------------------------------------
#	End of metatype properties to support OIDC Client Registration
# -------------------------------------------------------------------------------------------------
