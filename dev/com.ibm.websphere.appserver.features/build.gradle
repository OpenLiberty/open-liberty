/*******************************************************************************
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

buildscript {
    repositories {
        def properties = new Properties()
        rootProject.file('generated.properties').withInputStream { properties.load(it) }
        if (usrHomeProps.exists() && !properties.getProperty('artifactory.force.external.repo')) {
            maven {
                credentials {
                    username properties.getProperty("artifactory.download.user")
                    password properties.getProperty("artifactory.download.token")
                }
                url ("https://" + properties.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
            }
        } else {
            jcenter()
        }
    }

    dependencies {
        classpath 'org.apache.commons:commons-lang3:3.5'
    }
}

import org.apache.commons.lang3.StringUtils

  // Start building feature resources after all other assemble artifacts are done being published
  //dependsOn {
  //  bndWorkspace.getProject(project.name)?.getDependson()*.getName().collect {
  //    rootProject.project(it).tasks.getByName 'prereqFeatureResources'
  //  }
  //}

def featurePropertiesMap
def gaFeatures
def betaFeatures
def gaPublicFeatures
def getFeatureMap = {
    if (featurePropertiesMap == null) {
        Map<String,Properties> map = new TreeMap()
        Set<String> featuresGa = new TreeSet()
        Set<String> featuresBeta = new TreeSet()
        Set<String> publicFeatures = new TreeSet()
        project(':com.ibm.websphere.appserver.features').fileTree(dir: '.', include: 'visibility/**/*.feature').each { featureFile ->
            Properties featureProps = new Properties()
            featureFile.withInputStream { featureProps.load(it) }
            map.put(featureProps['symbolicName'], featureProps)
            if ('ga'.equals(featureProps['kind'])) {
                featuresGa.add(featureProps['symbolicName'])
                if ('public'.equals(featureProps['visibility'])) {
                    publicFeatures.add(featureProps['IBM-ShortName'])
                }
            } else if ('beta'.equals(featureProps['kind'])) {
                featuresBeta.add(featureProps['symbolicName'])
            }
        }
        featurePropertiesMap = map
        gaFeatures = featuresGa
        betaFeatures = featuresBeta
        gaPublicFeatures = publicFeatures
    }
    featurePropertiesMap
}

rootProject.ext.featureMap = { getFeatureMap() }

def getGaFeatures = {
    if (gaFeatures == null) {
        getFeatureMap()
    }
    gaFeatures
}

rootProject.ext.gaFeatures = { useShortName ->
    if (useShortName) {
        if (gaFeatures == null) {
            getFeatureMap()
        }
        gaPublicFeatures
    } else {
        getGaFeatures()
    }
}

rootProject.ext.betaFeatures = {
    if (betaFeatures == null) {
        getFeatureMap()
    }
    betaFeatures
}

task copyFeaturePiiFiles {
  doLast {
    Map<String,Properties> map = getFeatureMap()
    map.keySet().each { featureName ->
      Properties featureProps = map[featureName]
      if ('public'.equals(featureProps['visibility'])) {
        copy {
          from project.file('public/' + featureProps['IBM-ShortName'] + '/resources')
          into rootProject.file('build.pii.package/nlssrc/' + featureName)
          include 'l10n/*.properties'
        }
      }
    }
  }
}

copyPiiFiles.dependsOn copyFeaturePiiFiles

Set<String> obtain(Map<String, Set<String>> featureToEditions, String edition) {
  Set<String> features = featureToEditions.get(edition)
  if (features == null) {
    features = new TreeSet<String>()
    if ('core'.equals(edition) || 'nd.controller'.equals(edition)) {
      features.add('com.ibm.websphere.appserver.adminCenter-1.0')
    }
    featureToEditions.put(edition, features)
  }
  return features
}

def generateFeatureForEdition = {
  Map<String,Set<String>> featureToEditions = new HashMap<String,Set<String>>()
  Map<String,Properties> map = getFeatureMap()
  map.keySet().each { featureName ->
    Properties featureProps = map[featureName]
    if ('public'.equals(featureProps['visibility'])) {
      String kind = featureProps['kind']
      if ('ga'.equals(kind)) {
        String edition = featureProps['edition']
        if (edition != null) {
          Set<String> features = obtain(featureToEditions, edition)
          features.add(featureProps['symbolicName'])
        }
        String selector = featureProps['selector']
        if (selector != null) {
          Set<String> features = obtain(featureToEditions, selector);
          features.add(featureProps['symbolicName'])
        }
      } else if ('beta'.equals(kind)) {
        Set<String> features = obtain(featureToEditions, 'beta');
        features.add(featureProps['symbolicName'])
      }
    }
  }

  Properties props = new Properties()
  featureToEditions.each { edition, features ->
    props.put(edition + '.features', StringUtils.join(features, ','))
  }

  // Store props to file
  File propsFile = project.file('build/gen.features')
  propsFile.createNewFile()
  props.store(propsFile.newWriter(), null)
}

configurations {
  featureTasks
  generateRepositoryContent
  repositoryGenerator
  mavenRepoTasks
}

dependencies {
  featureTasks project(':wlp-featureTasks')
  featureTasks project(':com.ibm.ws.kernel.boot.core')
  featureTasks project(':com.ibm.ws.logging.core')
  featureTasks "org.apache.ant:ant:1.9.6"
  featureTasks "com.ibm.ws.componenttest:infra.buildtasks-core:4.0.0"
  featureTasks "org.jsoup:jsoup:1.7.2"
  featureTasks "org.apache.aries:org.apache.aries.util:1.1.3"
  featureTasks "org.osgi:org.osgi.core:6.0.0"

  generateRepositoryContent project(':wlp-generateRepositoryContent')
  generateRepositoryContent project(':com.ibm.json4j')
  generateRepositoryContent project(':com.ibm.ws.kernel.boot.core')
  generateRepositoryContent project(':com.ibm.ws.kernel.feature.core')
  generateRepositoryContent project(':com.ibm.ws.logging.core')
  generateRepositoryContent project(':wlp-generateChecksums')
  generateRepositoryContent "org.apache.ant:ant:1.9.6"
  generateRepositoryContent "org.jsoup:jsoup:1.7.2"
  generateRepositoryContent "org.apache.aries:org.apache.aries.util:1.1.3"
  generateRepositoryContent "org.osgi:org.osgi.core:6.0.0"

  repositoryGenerator project(':com.ibm.ws.repository.generator')
  repositoryGenerator project(':com.ibm.ws.repository')
  repositoryGenerator project(':com.ibm.ws.repository.parsers')
  repositoryGenerator project(':com.ibm.ws.kernel.boot.core')
  repositoryGenerator project(':com.ibm.ws.kernel.feature.core')
  repositoryGenerator project(':com.ibm.ws.logging.core')
  repositoryGenerator "org.apache.ant:ant:1.9.6"
  repositoryGenerator "javax.json:javax.json-api:1.1.2"
  repositoryGenerator "org.glassfish:javax.json:1.1.2"
  repositoryGenerator "org.jsoup:jsoup:1.7.2"
  repositoryGenerator "org.apache.aries:org.apache.aries.util:1.1.3"
  repositoryGenerator "org.osgi:org.osgi.core:6.0.0"

  mavenRepoTasks project(':wlp-mavenRepoTasks')
  mavenRepoTasks "org.apache.ant:ant:1.9.6"
  mavenRepoTasks "commons-io:commons-io:2.4"
  mavenRepoTasks "commons-lang:commons-lang:2.4"
  mavenRepoTasks "javax.json:javax.json-api:1.1.2"
  mavenRepoTasks "org.glassfish:javax.json:1.1.2"
  mavenRepoTasks "org.apache.maven:maven-model:3.5.0"
  mavenRepoTasks "org.codehaus.plexus:plexus-utils:3.0.24"
}

task publishFeatureResources {
  dependsOn parent.subprojects.assemble

  def featureFiles = fileTree(dir: project.projectDir, include: 'visibility/**/*.feature')
  inputs.files(featureFiles).skipWhenEmpty()
  outputs.dir buildImage.file('wlp/lib/features')
  outputs.dir new File(project.buildDir, 'repo')
  doFirst {
    buildImage.mkdir('wlp/lib/features')
    project.mkdir(new File(project.buildDir, 'repo'))
  }
  doLast {
    ant.taskdef(resource: 'com/ibm/ws/wlp/feature/tasks/default.properties', classpath: configurations.featureTasks.asPath)

    ant.taskdef(resource: 'com/ibm/ws/wlp/repository/default.properties', classpath: configurations.generateRepositoryContent.asPath)

    generateFeatureForEdition()

    featureFiles.each { featureFile ->
      File featureFolder = featureFile.getParentFile()

      Properties props = new Properties()
      props.load(new FileInputStream(featureFile))

      String symbolicName = props['symbolicName']
      String kind = props['kind']
      if (kind == null) {
        throw new GradleException('FeatureÂ ' + symbolicName + ' does not contain a kind property')
      }
      String version = ('beta'.equals(kind) ? bnd.libertyBetaVersion : bnd.libertyServiceVersion)

      String relPath = featureFile.getPath().replace(projectDir.getPath() + '/visibility/', '')
      def pathParts = relPath.split('/')
      String visibility = pathParts[0]
      if (pathParts.length == 3) {
        copy {
          from new File(featureFolder, 'resources/l10n')
          into buildImage.file('wlp/lib/features/l10n')
        }
      }

      ant.featureBnd(bnd: featureFile.getPath(),
              workspaceDir: bndWorkspace.getBase(),
              createESA: "true",
              dir: buildImage.file('wlp'),
              esaDir: new File(project.buildDir, 'repo'),
              createFor: kind,
              buildType: kind,
              junit: new File(project.buildDir, 'report/featureChecks.xml')) {
        defaultEdition(licenseURL: "https://www.eclipse.org/legal/epl-v10.html",
                licensePath: buildImage.file('lafiles/featureTerms'),
                version: version,
                licenseType: "EPL",
                displayVersion: "OpenLiberty")
        edition(baseEdition: "beta")
        edition(baseEdition: "core",
                validEditions: "")
        edition(baseEdition: "base",
                validEditions: "BASE,BASE_ILAN,DEVELOPERS,EXPRESS,ND,zOS")
        edition(baseEdition: "nd",
                validEditions: "BASE_ILAN,DEVELOPERS,ND,zOS")
        edition(baseEdition: "zos",
                validEditions: "zOS")
        edition(baseEdition: "bluemix",
                validEditions: "BLUEMIX")
        edition(baseEdition: "full")
        edition(baseEdition: "unsupported")
      }

      delete "${buildDir}/repo/description.html"
      ant.propertyfile(file: "${buildDir}/repo/assetInfo.properties") {
        entry(key: "licenseType", value: "UNSPECIFIED")
      }
      ant.generateEsaDescriptionHtml(featureManifestFile: ant.properties['feature.manifest.file'],
              descriptionHtmlOutputFile: "${buildDir}/repo/description.html",
              generateKnowledgeCentreLinks: "true",
              licenseType: "EPL")
      ant.zip(destfile: "${buildDir}/repo/${symbolicName}.esa.metadata.zip") {
        fileset(dir: "${buildDir}/repo", includes: "description.html,assetInfo.properties")
        zipfileset(dir: buildImage.file("lafiles/featureTerms_html"), fullpath: "lafiles/en.html", includes: "en.html")
      }
      delete "${buildDir}/repo/description.html"
      delete "${buildDir}/repo/assetInfo.properties"
    }
  }
}

task generateSingleJsonRepo {
    dependsOn publishFeatureResources

    doLast {
        project.delete('build/temp')
        project.mkdir('build/temp')
        project.mkdir('build/temp/esas')
        project.mkdir('build/temp/metadata')
        getGaFeatures().each { gaFeature ->
            copy {
                from file("build/libs/repo/${gaFeature}.esa")
                into "build/temp/esas"
            }
            copy {
                from file("build/libs/repo/${gaFeature}.esa.metadata.zip")
                into "build/temp/metadata"
            }
        }

        ant.taskdef(resource: 'com/ibm/ws/repository/generator/default.properties', classpath: configurations.repositoryGenerator.asPath)

        def files = fileTree(dir:'build/temp/esas').matching{
            include '**/*.esa' 	
        }
        files.each { esa ->
            String basename=esa.name
            ant.singleJsonRepo(assetFile:file(esa),
                assetType:'FEATURE',
                metadataFile:file("build/temp/metadata/${basename}.metadata.zip"),
                jsonFile:file('build/temp/SingleJson.json'))
        }
    }
}

task generateMavenArtifact {
    dependsOn generateSingleJsonRepo

    doLast {
        ant.taskdef(resource: 'com/ibm/ws/wlp/mavenFeatures/default.properties', classpath: configurations.mavenRepoTasks.asPath)

        project.delete('build/temp/mavenArtifact')
        project.mkdir('build/temp/mavenArtifact')
        ant.libertyFeaturesToMavenRepo(inputDirPath: project.file('build/temp/esas'),
                   outputDirPath: project.file('build/temp/mavenArtifact'),
                   openLibertyJson: project.file('build/temp/SingleJson.json'))
    }
}

publish.dependsOn generateMavenArtifact

def featuresToPublish() {
  def features = []
  fileTree(dir: project.projectDir, include: 'visibility/**/*.feature').each {
    Properties props = new Properties()
    props.load(new FileInputStream(it))
    features.add(props['symbolicName'])
  }
  return features
}

publishing {
  publications {
    def counter = 0
    featuresToPublish().each { feature ->
      counter++
      "maven${counter}" (MavenPublication) {
        artifactId feature
        version project.version
        artifact source: new File(project.buildDir, 'repo/' + feature + ".esa"), extension: 'esa'
        artifact source: new File(project.buildDir, 'repo/' + feature + ".esa.metadata.zip"), extension: 'esa.metadata.zip'
      }
    }
  }
}
