/*******************************************************************************
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

  // Start building feature resources after all other assemble artifacts are done being published
  //dependsOn {
  //  bndWorkspace.getProject(project.name)?.getDependson()*.getName().collect {
  //    rootProject.project(it).tasks.getByName 'prereqFeatureResources'
  //  }
  //}
repositories{
	mavenCentral()
}
dependencies{
	compile 'org.glassfish:javax.json:1.1.2@jar'
	compile 'org.codehaus.plexus:plexus-utils:3.1.0@jar'
}

task copyjar(type: Copy) {
    from configurations.runtime
    into project.file('mavenlibs')
    include "javax.json*.jar"
    include "plexus-utils*.jar"
}

def featurePropertiesMap
def gaFeatures
def betaFeatures
def gaPublicFeatures
def getFeatureMap = {
    if (featurePropertiesMap == null) {
        Map<String,Properties> map = new TreeMap()
        Set<String> featuresGa = new TreeSet()
        Set<String> featuresBeta = new TreeSet()
        Set<String> publicFeatures = new TreeSet()
        project(':com.ibm.websphere.appserver.features').fileTree(dir: '.', include: '**/*.feature').each { featureFile ->
            Properties featureProps = new Properties()
            featureFile.withInputStream { featureProps.load(it) }
            map.put(featureProps['symbolicName'], featureProps)
            if ('ga'.equals(featureProps['kind'])) {
                featuresGa.add(featureProps['symbolicName'])
                if ('public'.equals(featureProps['visibility'])) {
                    publicFeatures.add(featureProps['IBM-ShortName'])
                }
            } else if ('beta'.equals(featureProps['kind'])) {
                featuresBeta.add(featureProps['symbolicName'])
            }
        }
        featurePropertiesMap = map
        gaFeatures = featuresGa
        betaFeatures = featuresBeta
        gaPublicFeatures = publicFeatures
    }
    featurePropertiesMap
}

rootProject.ext.featureMap = { getFeatureMap() }

def  getGaFeatures = {
    if (gaFeatures == null) {
        getFeatureMap()
    }
    gaFeatures
}

rootProject.ext.gaFeatures = { useShortName ->
    if (useShortName) {
        if (gaFeatures == null) {
            getFeatureMap()
        }
        gaPublicFeatures
    } else {
        getGaFeatures()
    }
}

rootProject.ext.betaFeatures = {
    if (betaFeatures == null) {
        getFeatureMap()
    }
    betaFeatures
}

task copyFeaturePiiFiles {
  doLast {
    Map<String,Properties> map = getFeatureMap()
    map.keySet().each { featureName ->
      Properties featureProps = map[featureName]
      if ('public'.equals(featureProps['visibility'])) {
        copy {
          from project.file('public/' + featureProps['IBM-ShortName'] + '/resources')
          into rootProject.file('build.pii.package/nlssrc/' + featureName)
          include 'l10n/*.properties'
        }
      }
    }
  }
}

copyPiiFiles.dependsOn copyFeaturePiiFiles

task publishFeatureResources {
  dependsOn parent.subprojects.assemble

  def featureFiles = fileTree(dir: project.projectDir, include: '**/*.feature')
  inputs.files(featureFiles).skipWhenEmpty()
  outputs.dir buildImage.file('wlp/lib/features')
  outputs.dir new File(project.buildDir, 'repo')
  doFirst {
    buildImage.mkdir('wlp/lib/features')
    project.mkdir(new File(project.buildDir, 'repo'))
  }
  doLast {
    ant.taskdef(resource: 'com/ibm/ws/wlp/feature/tasks/default.properties') {
      classpath {
        fileset(dir: project(':wlp-featureTasks').buildDir) {
          include(name: 'wlp-featureTasks.jar')
        }
        fileset(dir: cnf.file('lib')) {
			include(name: "wlp-*.jar")
		}
        fileset(dir: cnf.file('mavenlibs')) {
          include(name: "biz.aQute.bnd-*.jar")
          include(name: "infra.buildtasks*.jar")
          include(name: "asm-all-5.2.jar")
          include(name: "org.apache.aries.util-*.jar")
          include(name: "osgi.core*.jar")
          include(name: "jackson*.jar")
          include(name: "jsoup-*.jar")
          include (name:"ant-*.jar")
        }
      }
    }

    ant.taskdef(resource: 'com/ibm/ws/wlp/repository/default.properties') {
      classpath {
        fileset(dir:cnf.file('lib')) {
          include(name: "wlp-generateRepositoryContent.jar")
        }
        fileset(dir: cnf.file('mavenlibs')) {
          include(name: "org.apache.aries.util-*.jar")
          include(name: "jsoup-*.jar")
        }
      }
    }

    featureFiles.each { featureFile ->
      File featureFolder = featureFile.getParentFile()

      Properties props = new Properties()
      props.load(new FileInputStream(featureFile))

      String symbolicName = props['symbolicName']
      String kind = props['kind']
      if (kind == null) {
        throw new GradleException("FeatureÂ " + symbolicName + " does not contain a kind property")
      }
      String version = ("beta".equals(kind) ? bnd.libertyBetaVersion : bnd.libertyServiceVersion)

      String relPath = featureFile.getPath().replace(projectDir.getPath() + '/visibility/', '')
      def pathParts = relPath.split('/')
      String visibility = pathParts[0]
      if (pathParts.length == 3) {
        copy {
          from new File(featureFolder, 'resources/l10n')
          into buildImage.file('wlp/lib/features/l10n')
        }
      }

      ant.featureBnd(bnd: featureFile.getPath(),
              workspaceDir: bndWorkspace.getBase(),
              createESA: "true",
              dir: buildImage.file('wlp'),
              esaDir: new File(project.buildDir, 'repo'),
              createFor: kind,
              buildType: kind,
              junit: new File(project.buildDir, 'report/featureChecks.xml')) {
        defaultEdition(licenseURL: "https://www.eclipse.org/legal/epl-v10.html",
                licensePath: buildImage.file('lafiles/featureTerms'),
                version: version,
                licenseType: "EPL",
                displayVersion: "OpenLiberty")
        edition(baseEdition: "beta")
        edition(baseEdition: "core",
                validEditions: "")
        edition(baseEdition: "base",
                validEditions: "BASE,BASE_ILAN,DEVELOPERS,EXPRESS,ND,zOS")
        edition(baseEdition: "nd",
                validEditions: "BASE_ILAN,DEVELOPERS,ND,zOS")
        edition(baseEdition: "zos",
                validEditions: "zOS")
        edition(baseEdition: "bluemix",
                validEditions: "BLUEMIX")
        edition(baseEdition: "full")
        edition(baseEdition: "unsupported")
      }

      delete "${buildDir}/repo/description.html"
      ant.propertyfile(file: "${buildDir}/repo/assetInfo.properties") {
        entry(key: "licenseType", value: "UNSPECIFIED")
      }
      ant.generateEsaDescriptionHtml(featureManifestFile: ant.properties['feature.manifest.file'],
              descriptionHtmlOutputFile: "${buildDir}/repo/description.html",
              generateKnowledgeCentreLinks: "true",
              licenseType: "EPL")
      ant.zip(destfile: "${buildDir}/repo/${symbolicName}.esa.metadata.zip") {
        fileset(dir: "${buildDir}/repo", includes: "description.html,assetInfo.properties")
        zipfileset(dir: buildImage.file("lafiles/featureTerms_html"), fullpath: "lafiles/en.html", includes: "en.html")
      }
      delete "${buildDir}/repo/description.html"
      delete "${buildDir}/repo/assetInfo.properties"
    }
  }
}

task generateSingleJsonRepo {
    dependsOn publishFeatureResources

    doLast {
        project.delete('build/temp')
        project.mkdir('build/temp')
        
        ant.taskdef(name:'singleJsonRepo', classname:'com.ibm.ws.repository.generator.SingleJsonRepositoryGenerator') {
            classpath {
               fileset(dir: project(':com.ibm.ws.repository.generator').buildDir) {
                    include(name: 'com.ibm.ws.repository.generator.jar')
                }
                fileset(dir: project(':com.ibm.ws.repository').buildDir) {
                    include(name: 'com.ibm.ws.repository.jar')
                }
                fileset(dir: project(':com.ibm.ws.repository.parsers').buildDir) {
                    include(name: 'com.ibm.ws.repository.parsers.jar')
                }
                fileset(dir: project(':com.ibm.ws.logging.core').buildDir) {
                    include(name: 'com.ibm.ws.logging.core.jar')
                }
                fileset(dir: project(':com.ibm.ws.kernel.feature.core').buildDir) {
                    include(name: 'com.ibm.ws.kernel.feature.core.jar')
                }
                fileset(dir: project(':com.ibm.ws.kernel.boot.core').buildDir) {
                    include(name: 'com.ibm.ws.kernel.boot.core.jar')
                }
                fileset(dir:project(':com.ibm.websphere.javaee.jsonp.1.0').buildDir){
                    include (name:'com.ibm.websphere.javaee.jsonp.1.0.jar')
                }
                fileset(dir:project(':com.ibm.ws.org.glassfish.json').buildDir){
                    include (name:'com.ibm.ws.org.glassfish.json.1.0.jar')
                }
                fileset(dir:cnf.file('mavenlibs')) {
                	include(name: "ant-*.jar")
                    include(name: "commons-io-*.jar")
                    include(name: "commons-lang-*.jar")
                    include(name: "javax.json-*.jar")
                    include(name: "org.apache.aries.util-*.jar")
                    include(name: "jsoup-*.jar")
                    include(name: "osgi.core*.jar")
                }
            }
        }

		getGaFeatures().each { gaFeature ->
            	ant.singleJsonRepo(assetFile:file("build/libs/repo/${gaFeature}.esa"),
                assetType:'FEATURE',
                metadataFile:file("build/libs/repo/${gaFeature}.esa.metadata.zip"),
                jsonFile:file('build/temp/SingleJson.json'))

		}
    }
}

task generateMavenArtifact {
    dependsOn generateSingleJsonRepo
    dependsOn copyjar

    doLast{
        ant.taskdef(name:'featuresToMavenRepo', classname:'com.ibm.ws.wlp.mavenFeatures.LibertyFeaturesToMavenRepo') {
            classpath {
                fileset(dir: project(':wlp-mavenRepoTasks').buildDir) {
                    include(name: 'wlp-mavenRepoTasks.jar')
                }
                fileset(dir: project(':com.ibm.ws.kernel.feature.core').buildDir) {
                    include(name: 'com.ibm.ws.kernel.feature.core.jar')
                }
                fileset(dir:project.file('mavenlibs')){
                    include (name:'javax.json-*.jar')
                    include (name:'plexus-utils-*.jar')
                }
                             
                fileset(dir:cnf.file('mavenlibs')) {
                    include(name: "ant-*.jar")
                    include(name: "commons-io-*.jar")
                    include(name: "commons-lang-*.jar")
                    include(name: "javax.json-*.jar")
                    include(name: "maven-model-*.jar")
                }
               
            }
        }

        project.delete('build/temp/mavenArtifact')
        project.mkdir('build/temp/mavenArtifact')
        ant.featuresToMavenRepo(inputDirPath: project.file('build/libs/repo'),
                   outputDirPath: project.file('build/temp/mavenArtifact'),
                   openLibertyJson:file('build/temp/SingleJson.json'))
    }
}

task zipOpenLibertyMavenRepo(type: Zip){
	dependsOn parent.subprojects.assemble
		from "${rootDir}/com.ibm.websphere.appserver.features/build/temp/"
		include "mavenArtifact/**"
		archiveName 'openliberty-mavenArtifact.zip'		
    	destinationDir distsDir

}

publish.dependsOn zipOpenLibertyMavenRepo
publish.dependsOn generateMavenArtifact
zipOpenLibertyMavenRepo.mustRunAfter generateMavenArtifact


def featuresToPublish() {
  def features = []
  fileTree(dir: project.projectDir, include: '**/*.feature').each {
    Properties props = new Properties()
    props.load(new FileInputStream(it))
    features.add(props['symbolicName'])
  }
  return features
}

publishing {
  publications {
    def counter = 0
    featuresToPublish().each { feature ->
      counter++
      "maven${counter}" (MavenPublication) {
        artifactId feature
        version project.version
        artifact source: new File(project.buildDir, 'repo/' + feature + ".esa"), extension: 'esa'
        artifact source: new File(project.buildDir, 'repo/' + feature + ".esa.metadata.zip"), extension: 'esa.metadata.zip'
      }
    }   
	newMavenArtifact(MavenPublication) {
	  artifactId "openliberty-MavenArtifact"
	  version project.version
	  artifact zipOpenLibertyMavenRepo					
	}

	newJsonArtifact(MavenPublication) {
      artifactId 'openliberty-singleJson'
      version project.version
      artifact project.file("build/temp/SingleJson.json")
    }
  	
  }
}
