/*******************************************************************************
 * Copyright (c) 2017,2019 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

/* 
 * This is where all application ZIP and WARs will be built.
 */
def appBuildDir = "${buildDir}/test-application"

dependencies { 
  requiredLibs 'com.ibm.ws.componenttest:public.api:1.0.0',
    'com.unboundid:unboundid-ldapsdk:4.0.9',
    'commons-logging:commons-logging:1.1.1',
    'commons-codec:commons-codec:1.4',
    'org.apache.httpcomponents:httpclient:4.1.2',
    'org.apache.httpcomponents:httpcore:4.1.2',
    'org.apache.directory.server:apacheds-service:2.0.0-M15',
    project(':fattest.simplicity'),
    project(':com.ibm.ws.org.apache.directory.server'),
    project(':com.ibm.ws.com.unboundid'),
    project(':com.ibm.websphere.security.wim.base'),
    project(':com.ibm.ws.security.registry'),
    project(':com.ibm.ws.security.registry_test.servlet'),
    project(':com.ibm.ws.security.wim.core'),
    project(':com.ibm.ws.security.wim_test.servlet'),
    project(':com.ibm.ws.webcontainer.security_test.servlets')
}
autoFVT.dependsOn ':com.ibm.ws.security.registry_test.servlet:war'
autoFVT.dependsOn ':com.ibm.ws.security.wim_test.servlet:war'
autoFVT.dependsOn ':com.ibm.ws.webcontainer.security_test.servlets:war'
autoFVT.doLast {
  /*
   * Copy the local ApacheDS LDAP instances. 
   */
  copy {
    from project(':com.ibm.ws.org.apache.directory.server').projectDir
    into autoFvtDir
    include 'apacheds-2.0.0-M15/**'
  }
  
  /*
   * Copy sample CustomRepository user feature to this test bucket.
   */
  copy { 
    from project(':com.ibm.ws.security.wim.repository_test.custom').file('publish/usr/extension/lib/features/customRepositorySample-1.0.mf')
    into new File(autoFvtDir, 'publish/features')
  }
  copy {
    from new File(project(':com.ibm.ws.security.wim.repository_test.custom').buildDir, 'com.ibm.ws.security.wim.repository_test.custom.jar')
    into new File(autoFvtDir, 'publish/bundles')
    rename 'com.ibm.ws.security.wim.repository_test.custom.jar', 'com.ibm.ws.security.wim.repository_test.custom_1.0.jar'
  }
    
  /*
   * Copy sample custom UserRegistry feature to this test bucket.
   */
  copy { 
    from project(':com.ibm.ws.security.registry_test.custom').file('publish/features/customRegistrySample-1.0.mf')
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles/internalfeatures')
  }
  copy {
    from new File(project(':com.ibm.ws.security.registry_test.custom').buildDir, 'com.ibm.ws.security.registry_test.custom.jar')
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles/internalfeatures')
    rename 'com.ibm.ws.security.registry_test.custom.jar', 'com.ibm.ws.security.registry_test.custom_1.0.jar'
  }
    
  /*
   * Copy the userRegistry WAR into test servers.
   */
  def servers = [
    'com.ibm.ws.security.registry.ldap.fat.ad',
    'com.ibm.ws.security.registry.ldap.fat.ad.wild',
    'com.ibm.ws.security.registry.ldap.fat.ad.noId',
    'com.ibm.ws.security.registry.ldap.fat.ad.ssl',
    'com.ibm.ws.security.registry.ldap.fat.custom',
    'com.ibm.ws.security.registry.ldap.fat.ids',
    'com.ibm.ws.security.registry.ldap.fat.ids.extremeFailover',
    'com.ibm.ws.security.registry.ldap.fat.ids.failover',
    'com.ibm.ws.security.registry.ldap.fat.ids.nofilters',
    'com.ibm.ws.security.registry.ldap.fat.ids.reuseConnection',
    'com.ibm.ws.security.registry.ldap.fat.ids.ssl',
    'com.ibm.ws.security.registry.ldap.fat.ids.ssl.trustonly',
    'com.ibm.ws.security.registry.ldap.fat.ldapname',
    'com.ibm.ws.security.registry.ldap.fat.performance',
    'com.ibm.ws.security.registry.ldap.fat.user.group.search.bases',
    'com.ibm.ws.security.wim.adapter.ldap.fat.ad',
    'com.ibm.ws.security.wim.adapter.ldap.fat.ad.nested',
    'com.ibm.ws.security.wim.adapter.ldap.fat.ad.noId',
    'com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl',
    'com.ibm.ws.security.wim.adapter.ldap.fat.context.pool.timeout',
    'com.ibm.ws.security.wim.adapter.ldap.fat.custom',
    'com.ibm.ws.security.wim.adapter.ldap.fat.custom.getname',
    'com.ibm.ws.security.wim.adapter.ldap.fat.dynamic',
    'com.ibm.ws.security.wim.adapter.ldap.fat.ETSFforGroupM',
    'com.ibm.ws.security.wim.adapter.ldap.fat.federation',
    'com.ibm.ws.security.wim.adapter.ldap.fat.input.output.mapping',
    'com.ibm.ws.security.wim.adapter.ldap.fat.multipleldaps',
    'com.ibm.ws.security.wim.adapter.ldap.fat.realm.mapping',
    'com.ibm.ws.security.wim.adapter.ldap.fat.referral',
    'com.ibm.ws.security.wim.adapter.ldap.fat.search.paging',
    'com.ibm.ws.security.wim.adapter.ldap.fat.searchbase',
    'com.ibm.ws.security.wim.adapter.ldap.fat.sun',
    'com.ibm.ws.security.wim.adapter.ldap.fat.sun.attrMappingVar4',
    'com.ibm.ws.security.wim.adapter.ldap.fat.sun.default',
    'com.ibm.ws.security.wim.adapter.ldap.fat.sun.ssl',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.attrMappingVar1',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.attrMappingVar2',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.attrMappingVar3',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.emptyInput',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.propertynotsupported',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.nested',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.ssl',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.sslref',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.sslref.badssl',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.failover',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tworealms',
    'com.ibm.ws.security.wim.adapter.ldap.fat.ids.allIbmGroups',
    'com.ibm.ws.security.registry.ldap.fat.regression',
    'com.ibm.ws.security.wim.adapter.ldap.fat.readtimeout'
  ]
  servers.each { server ->
    copy { 
      from new File(project(':com.ibm.ws.security.registry_test.servlet').buildDir, 'test-application/userRegistry.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
    }
  }

  /*
   * Copy the WIM API WAR into test servers.
   */
  servers = [
    'vmm.apis.tds.ldap',
    'vmm.apis.empty'
  ]
  servers.each { server ->
    copy { 
      from new File(project(':com.ibm.ws.security.wim_test.servlet').buildDir, 'test-application/vmmService.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
    }
  }

  /*
   * Copy the clientcert.zip into test servers.
   */
  servers = [
    'com.ibm.ws.security.wim.adapter.ldap.fat.custom.certmapper.bell',
    'com.ibm.ws.security.wim.adapter.ldap.fat.custom.certmapper.feature',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.certlogin',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.fedcertlogin',
    'com.ibm.ws.security.wim.adapter.ldap.fat.tds.certlogin_SBInFilter'
  ]
  servers.each { server ->
    copy { 
      from new File(project(':com.ibm.ws.webcontainer.security_test.servlets').buildDir, 'test-application/clientcert.zip')
      into new File(autoFvtDir, 'publish/servers/' + server + '/apps')
      rename 'clientcert.zip', 'clientcert.war'
    }
  }

  /*
   * Copy the basicauth.zip into test servers.
   */
  servers = [
    'com.ibm.ws.security.wim.adapter.ldap.fat.outbound.ssl'
  ]
  servers.each { server ->
    copy { 
      from new File(project(':com.ibm.ws.webcontainer.security_test.servlets').buildDir, 'test-application/basicauth.zip')
      into new File(autoFvtDir, 'publish/servers/' + server + '/apps')
      rename 'basicauth.zip', 'basicauth.war'
    }
  }
  
  /*
   * Copy the certificate mapper JAR to both the shared directory for use as a BELL and
   * to the bundles directory for use as a user feature.
   */
   copy { 
     from new File(appBuildDir, 'com.ibm.ws.security.wim.adapter.ldap.certificate.mapper.sample_1.0.jar')
     into new File(autoFvtDir, 'publish/shared')
   }
   copy { 
     from new File(appBuildDir, 'com.ibm.ws.security.wim.adapter.ldap.certificate.mapper.sample_1.0.jar')
     into new File(autoFvtDir, 'publish/bundles')
   }
}

/*
 * Generate the JAR for the certificate mapper sample. This JAR will be compatible
 * for use both as a BELL and as a user feature.
 */
task certificateMapper_JAR(type: Jar, dependsOn: classes) { 
  destinationDir file("${appBuildDir}")
  archiveName "com.ibm.ws.security.wim.adapter.ldap.certificate.mapper.sample_1.0.jar"
  manifest { 
  	from 'test-applications/certificateMappers/META-INF/MANIFEST.MF'
  }

  from ('build/classes/java/main') { 
    include 'test/cert/mappers/*.class'
  }
  from ('test-applications/certificateMappers') {
    include 'META-INF/services/*'
    include 'OSGI-INF/**'
  }
}

assemble { 
  dependsOn \
  certificateMapper_JAR
  
  dependsOn ':com.ibm.ws.security.registry_test.servlet:assemble'

}
