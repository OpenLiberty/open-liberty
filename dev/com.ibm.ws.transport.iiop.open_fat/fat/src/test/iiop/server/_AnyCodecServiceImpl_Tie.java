// POA Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package test.iiop.server;

import java.io.Serializable;
import java.lang.ClassCastException;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import javax.rmi.CORBA.Tie;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.BAD_PARAM;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAPackage.ObjectNotActive;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

public class _AnyCodecServiceImpl_Tie extends org.omg.PortableServer.Servant implements Tie {

    private AnyCodecServiceImpl target = null;

    private static final String[] _type_ids = {
        "RMI:test.iiop.common.AnyCodecService:0000000000000000"
    };

    public void setTarget(Remote target) {
        this.target = (AnyCodecServiceImpl) target;
    }

    public Remote getTarget() {
        return target;
    }

    public org.omg.CORBA.Object thisObject() {
        return _this_object();
    }

    public void deactivate() {
        try {
            _poa().deactivate_object(_poa().servant_to_id(this));
        }
        catch(WrongPolicy e) { }
        catch(ObjectNotActive e) { }
        catch(ServantNotActive e) { }
    }

    public ORB orb() {
        return _orb();
    }

    public void orb(ORB orb) {
        try {
            ((org.omg.CORBA_2_3.ORB)orb).set_delegate(this);
        }
        catch(ClassCastException e) {
            throw new BAD_PARAM("POA Servant needs an org.omg.CORBA_2_3.ORB");
        }
    }

    public String[] _all_interfaces(POA poa, byte[] objectId) {
        return (String [] )  _type_ids.clone();
    }

    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in =
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            if (method.equals("getData")) {
                return getData(in, reply);
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }

    private OutputStream getData(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        byte[] result = target.getData(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out =
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(cast_array(result),byte[].class);
        return out;
    }

    // This method is required as a work-around for
    // a bug in the JDK 1.1.6 verifier.

    private Serializable cast_array(Object obj) {
        return (Serializable)obj;
    }
}
