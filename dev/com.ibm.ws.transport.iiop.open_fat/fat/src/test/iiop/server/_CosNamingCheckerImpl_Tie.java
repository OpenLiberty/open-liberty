// POA Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package test.iiop.server;

import java.lang.ClassCastException;
import java.lang.Exception;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import javax.rmi.CORBA.Tie;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.BAD_PARAM;
import org.omg.CORBA.ORB;
import org.omg.CORBA.Object;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;
import org.omg.CosNaming.NameComponent;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAPackage.ObjectNotActive;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

public class _CosNamingCheckerImpl_Tie extends org.omg.PortableServer.Servant implements Tie {

    private CosNamingCheckerImpl target = null;

    private static final String[] _type_ids = {
        "RMI:test.iiop.common.CosNamingChecker:0000000000000000"
    };

    public void setTarget(Remote target) {
        this.target = (CosNamingCheckerImpl) target;
    }

    public Remote getTarget() {
        return target;
    }

    public Object thisObject() {
        return _this_object();
    }

    public void deactivate() {
        try {
            _poa().deactivate_object(_poa().servant_to_id(this));
        }
        catch(WrongPolicy e) { }
        catch(ObjectNotActive e) { }
        catch(ServantNotActive e) { }
    }

    public ORB orb() {
        return _orb();
    }

    public void orb(ORB orb) {
        try {
            ((org.omg.CORBA_2_3.ORB)orb).set_delegate(this);
        }
        catch(ClassCastException e) {
            throw new BAD_PARAM("POA Servant needs an org.omg.CORBA_2_3.ORB");
        }
    }

    public String[] _all_interfaces(POA poa, byte[] objectId) {
        return (String [] )  _type_ids.clone();
    }

    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in =
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.length()) {
                case 14:
                    if (method.equals("bindResolvable")) {
                        return bindResolvable(in, reply);
                    }
                case 24:
                    if (method.equals("bindResolvableThatThrows")) {
                        return bindResolvableThatThrows(in, reply);
                    }
                case 27:
                    if (method.equals("checkNameServiceIsAvailable")) {
                        return checkNameServiceIsAvailable(in, reply);
                    }
                case 31:
                    if (method.equals("getNameServiceListingFromServer")) {
                        return getNameServiceListingFromServer(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }

    private OutputStream checkNameServiceIsAvailable(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        try {
            target.checkNameServiceIsAvailable();
        } catch (Exception ex) {
            String id = "IDL:java/lang/Ex:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out =
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,Exception.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }

    private OutputStream getNameServiceListingFromServer(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result;
        try {
            result = target.getNameServiceListingFromServer();
        } catch (Exception ex) {
            String id = "IDL:java/lang/Ex:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out =
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,Exception.class);
            return out;
        }
        org.omg.CORBA_2_3.portable.OutputStream out =
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }

    private OutputStream bindResolvable(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        NameComponent[] arg0 = (NameComponent[]) in.read_value(NameComponent[].class);
        try {
            target.bindResolvable(arg0);
        } catch (Exception ex) {
            String id = "IDL:java/lang/Ex:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out =
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,Exception.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }

    private OutputStream bindResolvableThatThrows(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        RuntimeException arg0 = (RuntimeException) in.read_value(RuntimeException.class);
        NameComponent[] arg1 = (NameComponent[]) in.read_value(NameComponent[].class);
        try {
            target.bindResolvableThatThrows(arg0, arg1);
        } catch (Exception ex) {
            String id = "IDL:java/lang/Ex:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out =
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,Exception.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
}
