// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package test.iiop.common;

import java.io.Serializable;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.UnexpectedException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;
import org.omg.CORBA_2_3.portable.InputStream;
import org.omg.CosNaming.NameComponent;

public class _CosNamingChecker_Stub extends Stub implements CosNamingChecker {

    private static final String[] _type_ids = {
        "RMI:test.iiop.common.CosNamingChecker:0000000000000000"
    };

    public String[] _ids() {
        return (String [] )  _type_ids.clone();
    }

    public void checkNameServiceIsAvailable() throws Exception {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("checkNameServiceIsAvailable", true);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/lang/Ex:1.0")) {
                            throw (Exception) in.read_value(Exception.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("checkNameServiceIsAvailable",test.iiop.common.CosNamingChecker.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((test.iiop.common.CosNamingChecker)so.servant).checkNameServiceIsAvailable();
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof Exception) {
                        throw (Exception)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    public String getNameServiceListingFromServer() throws Exception {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("getNameServiceListingFromServer", true);
                        in = (InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/lang/Ex:1.0")) {
                            throw (Exception) in.read_value(Exception.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getNameServiceListingFromServer",test.iiop.common.CosNamingChecker.class);
                if (so == null) {
                    continue;
                }
                try {
                    return ((test.iiop.common.CosNamingChecker)so.servant).getNameServiceListingFromServer();
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof Exception) {
                        throw (Exception)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    public void bindResolvable(NameComponent[] arg0) throws Exception {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out =
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("bindResolvable", true);
                        out.write_value(cast_array(arg0),NameComponent[].class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/lang/Ex:1.0")) {
                            throw (Exception) in.read_value(Exception.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("bindResolvable",test.iiop.common.CosNamingChecker.class);
                if (so == null) {
                    continue;
                }
                try {
                    NameComponent[] arg0Copy = (NameComponent[]) Util.copyObject(arg0,_orb());
                    ((test.iiop.common.CosNamingChecker)so.servant).bindResolvable(arg0Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof Exception) {
                        throw (Exception)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    public void bindResolvableThatThrows(RuntimeException arg0, NameComponent[] arg1) throws Exception {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out =
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("bindResolvableThatThrows", true);
                        out.write_value(arg0,RuntimeException.class);
                        out.write_value(cast_array(arg1),NameComponent[].class);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:java/lang/Ex:1.0")) {
                            throw (Exception) in.read_value(Exception.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("bindResolvableThatThrows",test.iiop.common.CosNamingChecker.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    RuntimeException arg0Copy = (RuntimeException) copies[0];
                    NameComponent[] arg1Copy = (NameComponent[]) copies[1];
                    ((test.iiop.common.CosNamingChecker)so.servant).bindResolvableThatThrows(arg0Copy, arg1Copy);
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof Exception) {
                        throw (Exception)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    // This method is required as a work-around for
    // a bug in the JDK 1.1.6 verifier.

    private Serializable cast_array(Object obj) {
        return (Serializable)obj;
    }
}
