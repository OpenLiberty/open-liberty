/*******************************************************************************
 * Copyright (c) 2020, 2022 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/


// configure protobuf-gradle-plugin and liberty-gradle-plugin
buildscript {
    repositories.clear()
    repositories {
        if (isUsingArtifactory) {
            maven {
                credentials {
                    username userProps.getProperty("artifactory.download.user")
                    password userProps.getProperty("artifactory.download.token")
                }
                url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-maven-remote")
            }
        } else {
            mavenCentral()
        }
    }
    dependencies {
        if (project.hasProperty('compileProtobufs')) {
            classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
        }
        classpath 'io.openliberty.tools:liberty-gradle-plugin:3.0'
    }
}

plugins {
    id 'war'
    id "eclipse-wtp"
}

def grpcVersion = '1.57.2'
def protocVersion = '3.23.4'

// only run the protobuf compilation plugin if the build is run with "-PcompileProtobufs"
// this will allow us to avoid recompiling the protobuf stubs on every build, and additionally
// it will allow this test bucket to run on platforms not supported by the protoc tooling. 
// See https://github.com/OpenLiberty/open-liberty/issues/17913
if (project.hasProperty('compileProtobufs')) {

    apply plugin: 'com.google.protobuf'

    protobuf {
        protoc { artifact = "com.google.protobuf:protoc:" + protocVersion }
        plugins {
            grpc { artifact = "io.grpc:protoc-gen-grpc-java:" + grpcVersion }
        }
        generateProtoTasks {
            all()*.plugins { 
                grpc {} 
            }
        }
    }

    assemble.doLast {
        // update the generated-src dir with the new stubs that have been generated
        copy {
        from "build/libs/generated/source/proto/main/java"
            into "generated-src"
        }
        copy {
        from "build/libs/generated/source/proto/main/grpc"
            into "generated-src"
        }
    }
}

repositories.clear()
repositories {
    if (isUsingArtifactory) {
        maven {
            credentials {
                username userProps.getProperty("artifactory.download.user")
                password userProps.getProperty("artifactory.download.token")
            }
            url ("https://" + userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
            // for fats - this repository is used *only* contains artifacts with group "biz.aQute.bnd"
            content {
                includeGroup "biz.aQute.bnd"
                includeGroup "org.eclipse.transformer"
            }
            metadataSources {
                mavenPom()
                artifact()
            }
        }
        maven {
            credentials {
                username userProps.getProperty("artifactory.download.user")
                password userProps.getProperty("artifactory.download.token")
            }
            url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-maven-remote")
        }
    } else {
        maven {
            url ("https://public.dhe.ibm.com/ibmdl/export/pub/software/olrepo/")
            content {
                includeGroup "biz.aQute.bnd"
            }
            metadataSources {
                mavenPom()
                artifact()
            }
        }
        mavenCentral()
    }
}

configurations {
    storeAppWarLibs
}

dependencies {

    // Adding libraries the application to run in FAT
    storeAppWarLibs 'com.google.protobuf:protobuf-java-util:3.23.4',
    project(':io.openliberty.com.google.gson'),
    project(':com.ibm.ws.com.google.guava'),
    'com.google.errorprone:error_prone_annotations:2.4.0',
    'com.google.guava:failureaccess:1.0.1',
    'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava',
    'org.codehaus.mojo:animal-sniffer-annotations:1.18',
    'org.checkerframework:checker-compat-qual:2.5.5',
    'com.google.j2objc:j2objc-annotations:1.3',
    'com.google.code.findbugs:jsr305:3.0.2',
    'net.sourceforge.htmlunit:htmlunit:2.44.0'
 
    // test
    testImplementation 'commons-httpclient:commons-httpclient:3.1'
    testImplementation 'junit:junit:4.12'

    //
    implementation 'com.google.protobuf:protobuf-java-util:3.23.4'
    // @jar is needed since some of the dependencies of java-util were overwritten
    providedCompile 'io.grpc:grpc-protobuf:' + grpcVersion + '@jar'
    compileOnly 'io.grpc:grpc-stub:' + grpcVersion
    providedCompile 'io.grpc:grpc-services:' + grpcVersion + '@jar'
    providedCompile 'io.grpc:grpc-netty:' + grpcVersion + '@jar'
    //dynamic caching map
    implementation 'com.ibm.websphere.appserver.api:com.ibm.websphere.appserver.api.distributedMap:2.0.37'

    // provided
    providedCompile 'com.google.protobuf:protobuf-java:3.23.4'
    providedCompile 'javax.annotation:javax.annotation-api:1.2'
    providedCompile 'jakarta.platform:jakarta.jakartaee-api:8.0.0'
    providedCompile 'org.eclipse.microprofile:microprofile:3.2'

    // test runtime 
    requiredLibs 'net.sourceforge.htmlunit:htmlunit-cssparser:1.6.0',
      'net.sourceforge.htmlunit:htmlunit:2.44.0',
      'net.sourceforge.htmlunit:neko-htmlunit:2.44.0',
      'net.sourceforge.htmlunit:webdriver:2.6',
      'org.seleniumhq.webdriver:webdriver-common:0.9.7376',
      'org.brotli:dec:0.1.2',
      project(':io.openliberty.org.apache.xercesImpl'),
      'xalan:xalan:2.7.2',
      project(':com.ibm.ws.org.apache.commons.io'),
      'net.sourceforge.htmlunit:htmlunit-core-js:2.44.0',
      'org.apache.commons:commons-lang3:3.8',
      project(':io.openliberty.org.apache.commons.codec'),
      'org.apache.httpcomponents:httpmime:4.5.3',
      project(':com.ibm.ws.org.apache.httpcomponents'),
      project(':io.openliberty.org.apache.commons.codec'),
      project(':io.openliberty.org.apache.commons.logging'),
      'xml-apis:xml-apis:1.4.01',
      'io.grpc:grpc-core:' + grpcVersion,
      'io.grpc:grpc-stub:' + grpcVersion,
      'io.grpc:grpc-protobuf:' + grpcVersion,
      'io.grpc:grpc-netty:' + grpcVersion,
      'com.google.protobuf:protobuf-java:3.23.4',
      'com.google.protobuf:protobuf-java-util:3.23.4'
}


// copy into application lib at build time
task copyToConsumerAppWarLibs(type: Copy) {
    from configurations.storeAppWarLibs
     into new File(autoFvtDir, 'test-applications/StoreConsumerApp.war/resources/WEB-INF/lib')
}

// copy into application lib at build time
task copyToStoreAppWarLibs(type: Copy) {
    from configurations.storeAppWarLibs
        into new File(autoFvtDir, 'test-applications/StoreApp.war/resources/WEB-INF/lib')
}

//runs task at FAT build time
addRequiredLibraries {
    dependsOn copyToStoreAppWarLibs
    dependsOn copyToConsumerAppWarLibs
}

sourceSets {
    main {
        if (project.hasProperty('compileProtobufs')) {
            proto {
                srcDirs 'test-applications/HelloWorldService.war/resources/proto'
                srcDirs 'test-applications/FavoriteBeerService.war/resources/proto'
                srcDirs 'test-applications/StoreProducerApp.war/resources/proto'
                srcDirs 'test-applications/StoreConsumerApp.war/resources/proto'
                srcDirs 'test-applications/StoreApp.war/resources/proto'
                srcDirs 'test-applications/StreamingService.war/resources/proto'
            }
        } else {
            java {
                // if we're not regenerating protoc stubs, reuse the stubs in generated-src
                srcDirs 'generated-src'
            }
        }
        java {
            srcDirs 'test-applications/HelloWorldClient.war/src/java'
            srcDirs 'test-applications/HelloWorldService.war/src/java'
            srcDirs 'test-applications/FavoriteBeerService.war/src/java'
            srcDirs 'test-applications/StoreProducerApp.war/src/java'
            srcDirs 'test-applications/StoreConsumerApp.war/src/java'
            srcDirs 'test-applications/StoreApp.war/src/java'
            srcDirs 'test-applications/StreamingService.war/src/java'
       }
    }
}

addRequiredLibraries.dependsOn addJakartaTransformer
