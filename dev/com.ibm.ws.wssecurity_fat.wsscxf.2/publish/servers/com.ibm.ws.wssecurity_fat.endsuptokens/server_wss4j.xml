<!--
    Copyright (c) 2020, 2022 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License 2.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-2.0/
    
    SPDX-License-Identifier: EPL-2.0
   
    Contributors:
        IBM Corporation - initial API and implementation
 -->
 
<server>
	<featureManager>
		<feature>ssl-1.0</feature>
		<feature>usr:wsseccbh-2.0</feature>
		<feature>servlet-3.1</feature>
		<feature>appSecurity-2.0</feature>
		<feature>jsp-2.2</feature>
		<feature>jaxws-2.2</feature>
		<feature>wsSecurity-1.1</feature>
	</featureManager>

	<sslDefault sslRef="DefaultSSLSettings" />
	<ssl
		id="DefaultSSLSettings"
		keyStoreRef="myKeyStore"
		trustStoreRef="myTrustStore"
		clientAuthenticationSupported="true" />
	<keyStore
		id="myKeyStore"
		password="Liberty"
		type="jks"
		location="${server.config.dir}/key.jks" />
	<keyStore
		id="myTrustStore"
		password="LibertyServer"
		type="jks"
		location="${server.config.dir}/sslServerTrust.jks" />


	<include location="../fatTestPorts.xml" />

	<!-- user1pw, its password is different from CallbackHandler -->
	<basicRegistry
		id="basic"
		realm="customRealm"
	>
		<user
			name="user1"
			password="security" />
		<user
			name="user2"
			password="security" />
		<user
			name="test1"
			password="test1" />
		<user
			name="test2"
			password="test2" />
		<user
			name="test3"
			password="test3" />
		<user
			name="test4"
			password="test4" />
		<user
			name="admin"
			password="admin" />
		<user
			name="bob"
			password="bob" />
		<user
			name="joe"
			password="joe" />

		<user
			name="user1pw"
			password="pw8server" />
	</basicRegistry>

	<!-- basicplcy.wssecfvt.test.CommonPasswordCallback -->
	<wsSecurityClient
		id="default"
		security.encryption.username="x509ServerSecondCert"
		security.password="security"
		security.username="user1"
	>
		<!-- **Do not need the private key password in Symmetric tests ws-security.callback-handler="com.ibm.ws.wssecurity.example.cbh.CommonPasswordCallback"> -->
		<!-- signatureProperties **Do not need Signature properties in Symmetric 
			org.apache.wss4j.crypto.merlin.keystore.type="jks" org.apache.wss4j.crypto.merlin.keystore.password="LibertyX509Client" 
			org.apache.wss4j.crypto.merlin.keystore.alias="x509ClientDefault" org.apache.wss4j.crypto.merlin.file="${server.config.dir}/x509ClientDefault.jks"/ -->
		<encryptionProperties
			org.apache.wss4j.crypto.merlin.truststore.type="jks"
			org.apache.wss4j.crypto.merlin.truststore.password="LibertyX509Client2"
			org.apache.wss4j.crypto.merlin.truststore.file="${server.config.dir}/x509ClientSecond.jks"
			org.apache.wss4j.crypto.merlin.keystore.alias="x509ServerSecondCert" />
		<!-- / -->
		<!-- ** This works too, in case ws-security.encryption.username is not 
			specified chc -->
		<!--chc -->
	</wsSecurityClient>

	<wsSecurityProvider
		id="default"
		security.callback-handler="com.ibm.ws.wssecurity.example.cbhwss4j.CommonPasswordCallbackWss4j"
	>
	
		<!-- signatureProperties **Do not need Signature properties in Symmetric 
			org.apache.wss4j.crypto.merlin.keystore.type="jks" org.apache.wss4j.crypto.merlin.keystore.password="LibertyX509Server" 
			org.apache.wss4j.crypto.merlin.keystore.alias="x509ClientDefaultCert" 
			org.apache.wss4j.crypto.merlin.file="${server.config.dir}/x509ServerDefault.jks"/ -->
		<encryptionProperties
			org.apache.wss4j.crypto.merlin.keystore.type="jks"
			org.apache.wss4j.crypto.merlin.keystore.password="LibertyX509Server2"
			org.apache.wss4j.crypto.merlin.keystore.alias="x509ServerSecond"
			org.apache.wss4j.crypto.merlin.file="${server.config.dir}/x509ServerSecond.jks" />
	</wsSecurityProvider>

    <include location="imports/java2Permissions.xml" />
    
</server>

