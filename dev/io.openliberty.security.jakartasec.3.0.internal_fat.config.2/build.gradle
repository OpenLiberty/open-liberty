/*******************************************************************************
 * Copyright (c) 2023, 2024 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

dependencies {
  requiredLibs project(':com.ibm.ws.security.fat.common'),
  	  project(':com.ibm.ws.security.fat.common.jwt'),
      project(':io.openliberty.security.jakartasec.3.0.internal_fat.common'),
      project(':io.openliberty.security.jakartasec.3.0.internal_fat.config.commonTest'),
      project(':com.ibm.ws.org.apache.httpcomponents'),
      'net.sourceforge.htmlunit:htmlunit:2.44.0',
      'net.sourceforge.htmlunit:neko-htmlunit:2.44.0',
      'net.sourceforge.htmlunit:webdriver:2.6',
      'org.seleniumhq.webdriver:webdriver-common:0.9.7376',
      'org.brotli:dec:0.1.2',
      'xalan:xalan:2.7.2',
      project(':com.ibm.ws.org.apache.commons.io'),
      'net.sourceforge.htmlunit:htmlunit-core-js:2.44.0',
      'net.sourceforge.htmlunit:htmlunit-cssparser:1.6.0',
      'org.apache.commons:commons-lang3:3.14.0',
      'org.eclipse.jetty:jetty-websocket:8.2.0.v20160908',
      'org.eclipse.jetty.websocket:websocket-api:9.4.5.v20170502',
      'org.eclipse.jetty.websocket:websocket-common:9.4.5.v20170502',
      'org.eclipse.jetty.websocket:websocket-client:9.4.5.v20170502',
      'org.eclipse.jetty:jetty-util:9.4.7.RC0',
      'org.eclipse.birt.runtime:org.w3c.css.sac:1.3.1.v200903091627',
      project(':io.openliberty.org.apache.commons.codec'),
      'xml-apis:xml-apis:1.4.01',
      'xerces:xercesImpl:2.11.0',
      project(':io.openliberty.org.apache.xercesImpl'),
      'org.eclipse.parsson:parsson:1.1.0'

}

autoFVT.dependsOn ':com.ibm.ws.security.fat.common:assemble'
autoFVT.dependsOn ':com.ibm.ws.security.fat.common.jwt:assemble'
autoFVT.dependsOn ':io.openliberty.security.jakartasec.3.0.internal_fat.common:assemble'
autoFVT.dependsOn ':io.openliberty.security.jakartasec.3.0.internal_fat.config.commonTest:assemble'

autoFVT.doLast {
  
   copy {
      from project(':com.ibm.ws.security.fat.common').file('publish/shared/config')
      into new File(autoFvtDir, 'publish/shared/config')
      include '**/allAlgSSLSettings.xml'
   }

   /** copy common config files **/
   copy {
      from project(':io.openliberty.security.jakartasec.3.0.internal_fat.common').file('publish/shared/config')
      into new File(autoFvtDir, 'publish/shared/config')
      exclude 'oidcProvider.xml'
      include '**/*.xml'
   }
 
    copy {
      from project(':io.openliberty.security.jakartasec.3.0.internal_fat.config.commonTest').file('publish')
      into new File(autoFvtDir, 'publish')
   }
 
    copy {
      from project(':io.openliberty.security.jakartasec.3.0.internal_fat.common').file('publish/shared/config/oidcClient')
      into new File(autoFvtDir, 'publish/shared/config/oidcClient')
      include '**/*.properties'
   }
   
  def servers = [
	'jakartasec-3.0_fat.config.op',
	'jakartasec-3.0_fat.config.rp',
	'jakartasec-3.0_fat.config.rp.ELOverrideHttpSession'
  ]

  servers.each { server ->

    copy { 
      from new File(project(':io.openliberty.security.jakartasec.3.0.internal_fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
   }
      
    copy { 
     from project(':com.ibm.ws.security.fat.common').file('publish/shared/securityKeys')
     into new File(autoFvtDir, 'publish/servers/' + server + '/')
     include '**/allAlg*.p12'
    }
    copy { 
     from project(':com.ibm.ws.security.fat.common.jwt').file('publish/shared/securityKeys')
     into new File(autoFvtDir, 'publish/servers/' + server + '/')
     include '**/*private-key.pem'
     include '**/*public-key.pem'
     exclude '**/short_*private-key.pem'
     exclude '**/short_*public-key.pem'
    }

  }    
  
    def rpCopyServers = [
	'jakartasec-3.0_fat.config.rp.claimsDef.jwt',
	'jakartasec-3.0_fat.config.rp.claimsDef.opaque',
	'jakartasec-3.0_fat.config.rp.ELOverride.jwt',
	'jakartasec-3.0_fat.config.rp.ELOverride.opaque',
	'jakartasec-3.0_fat.config.rp.tokenMinValidity.jwt',
	'jakartasec-3.0_fat.config.rp.tokenMinValidity.opaque',
	'jakartasec-3.0_fat.config.rp.userinfo.jwt.jwt',
	'jakartasec-3.0_fat.config.rp.userinfo.jwt.opaque',
	'jakartasec-3.0_fat.config.rp.userinfo.json.jwt',
	'jakartasec-3.0_fat.config.rp.userinfo.json.opaque',
	'jakartasec-3.0_fat.config.rp.signing.jwt',
	'jakartasec-3.0_fat.config.rp.signing.opaque',
	'jakartasec-3.0_fat.config.rp.providerMetadata.jwt',
	'jakartasec-3.0_fat.config.rp.providerMetadata.opaque'

  ]

/** The RP's used in this FAT install multiple applications using shrinkwrapper **/
/** If each test class uses the same server we end up accumulating test apps    **/
/** The last rp server ends up with all of its own apps plus the apps of the    **/
/** servers that started before it.  This code will copy the original server    **/
/** so that each server can have its own instance, but, we won't need multiple  **/
/** copies of the same source for each server                                   **/
  rpCopyServers.each { rpServer ->

    copy { 
      from new File(autoFvtDir, 'publish/servers/jakartasec-3.0_fat.config.rp')
      into new File(autoFvtDir, 'publish/servers/' + rpServer )
      include '**/**'
   }

  }   
  
   def rpCopyServers2 = [
	'jakartasec-3.0_fat.config.rp.ELOverrideHttpSession.jwt',
	'jakartasec-3.0_fat.config.rp.ELOverrideHttpSession.opaque'

  ]

/** The RP's used in this FAT install multiple applications using shrinkwrapper **/
/** If each test class uses the same server we end up accumulating test apps    **/
/** The last rp server ends up with all of its own apps plus the apps of the    **/
/** servers that started before it.  This code will copy the original server    **/
/** so that each server can have its own instance, but, we won't need multiple  **/
/** copies of the same source for each server                                   **/
  rpCopyServers2.each { rpServer ->

    copy { 
      from new File(autoFvtDir, 'publish/servers/jakartasec-3.0_fat.config.rp.ELOverrideHttpSession')
      into new File(autoFvtDir, 'publish/servers/' + rpServer )
      include '**/**'
   }

  }   

   
}
