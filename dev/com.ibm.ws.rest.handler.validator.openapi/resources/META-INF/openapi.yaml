# *******************************************************************************
# Copyright (c) 2019 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
# *******************************************************************************
openapi: "3.0.2"
info:
  title: Validation API
  version: "1.0"
  description: "The Validation REST endpoint tests the basic configuration of resources by attempting to perform a simple operation on them."
servers:
  - url: https://127.0.0.1:8020/ibm/api
paths:
  /validation/cloudantDatabase/:
    get:
      tags:
      - Validation
      summary: Validation of all Cloudant Database configurations
      description: "Retrieves the validation results for all cloudantDatabase configuration elements. Validation involves establishing a connection to the database and querying basic metadata information."
      parameters:
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
      responses:
        200:
          description: Validation results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/validation.cloudantDatabase.result"
  /validation/cloudantDatabase/{uid}:
    get:
      tags:
      - Validation
      summary: Validation of a Cloudant Database configuration
      description: "Retrieves the validation result for the specified cloudantDatabase configuration element. Validation involves establishing a connection to the database and querying basic metadata information."
      parameters:
        - name: uid
          in: path
          description: "**Unique identifier**. For a cloudantDatabase element configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *cloudantDatabase[default-0]*."
          required: true
          schema:
            type: string
            example: "MyCloudantDB"
          examples:
            example-cloudantdb-id:
              summary: "Top-level cloudantDatabase element with id"
              description: "In this case, the uid is the same as the id."
              value: "myConFactory"
            example-cloudantdb-no-id:
              summary: "Top-level cloudantDatabase element without id"
              description: "A generated uid for top-level cloudantDatabase configuration element which lack an id is computed based on the order of appearance within server config, starting at 0."
              value: "cloudantDatabase[default-0]"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
      responses:
        200:
          description: Validation result retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validation.cloudantDatabase.result"
  /validation/connectionFactory/:
    get:
      tags:
      - Validation
      summary: Validation of all Connection Factories
      description: "Retrieves the validation results for all connection factories (apart from JMS, which uses different config elements). Validation involves establishing a connection to the backend, querying basic metadata information, and performing additional interface-specific operations. For JDBC connection factories, the `java.sql.Connection.isValid` operation is invoked. For CCI connection factories, the `javax.resource.cci.Connection.createInteraction` operation is invoked."
      parameters:
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/validation.connectionFactory.result"
  /validation/connectionFactory/{uid}:
    get:
      tags:
      - Validation
      summary: Validation of a Connection Factory
      description: "Retrieves the validation result for the specified connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and performing additional interface-specific operations. For JDBC connection factories, the `java.sql.Connection.isValid` operation is invoked. For CCI connection factories, the `javax.resource.cci.Connection.createInteraction` operation is invoked."
      parameters:
        - name: uid
          in: path
          description: "**Unique identifier**. For a connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *connectionFactory[default-0]*."
          required: true
          schema:
            type: string
            example: "MyConFactory"
          examples:
            example-cf-id:
              summary: "Top-level connection factory with id"
              description: "In this case, the uid is the same as the id."
              value: "myConFactory"
            example-cf-no-id:
              summary: "Top-level connection factory without id"
              description: "A generated uid for top-level connection factories which lack an id is computed based on the order of appearance within server config, starting at 0."
              value: "connectionFactory[default-0]"
            example-cf-app-def:
              summary: "App-defined connection factory"
              description: "References a connection factory defined by @ConnectionFactoryDefinition within the MyApp application, with a name of java:app/env/eis/cf1"
              value: "application[MyApp]/connectionFactory[java:app/env/eis/cf1]"
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation result retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validation.connectionFactory.result"
  /validation/dataSource/:
    get:
      tags:
      - Validation
      summary: Validation of all Data Sources
      description: "Retrieves the validation results for all data sources. Validation involves establishing a connection to the database, querying basic metadata information, and performing the `java.sql.Connection.isValid` operation."
      parameters:
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/validation.dataSource.result"
  /validation/dataSource/{uid}:
    get:
      tags:
      - Validation
      summary: Validation of a Data Source
      description: "Retrieves the validation result for the specified data source. Validation involves establishing a connection to the database, querying basic metadata information, and performing the `java.sql.Connection.isValid` operation."
      parameters:
        - name: uid
          in: path
          description: "**Unique identifier**. For a data source configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *databaseStore[defaultDatabaseStore]/dataSource[default-0]*."
          required: true
          schema:
            type: string
            example: "DefaultDataSource"
          examples:
            example-ds-id:
              summary: "Top-level dataSource with id"
              description: "The default data source is configured at top-level and has an id of DefaultDataSource."
              value: "DefaultDataSource"
            example-ds-no-id:
              summary: "Top-level dataSource without id"
              description: "A generated uid for top-level data sources which lack an id is computed based on the order of appearance within server config, starting at 0."
              value: "dataSource[default-0]"
            example-ds-nested:
              summary: "Nested dataSource without id"
              description: "References the first dataSource (index 0) that is nested under the databaseStore element with id of defaultDatabaseStore."
              value: "databaseStore[defaultDatabaseStore]/dataSource[default-0]"
            example-ds-nested-under-singleton:
              summary: "Nested dataSource (without id) under singleton"
              description: "References the first dataSource (index 0) that is nested under the transaction element. The transaction element is a singleton and cannot have an id."
              value: "transaction/dataSource[default-0]"
            example-ds-app-def:
              summary: "App-defined data source"
              description: "References a data source defined by @DataSourceDefinition within the MyApp application, in the MyWebModule module, with a name of java:module/env/jdbc/ds1"
              value: "application[MyApp]/module[MyWebModule]/dataSource[java:module/env/jdbc/ds1]"
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation result retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validation.dataSource.result"
  /validation/jmsConnectionFactory/:
    get:
      tags:
      - Validation
      summary: Validation of all basic JMS Connection Factories
      description: "Retrieves the validation results for all basic JMS connection factories (apart from QueueConnectionFactory and TopicConnectionFactory, which uses different config elements). Validation involves establishing a connection to the backend, querying basic metadata information, and creating & closing a session."
      parameters:
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/validation.jms.result"
  /validation/jmsConnectionFactory/{uid}:
    get:
      tags:
      - Validation
      summary: Validation of a basic JMS Connection Factory
      description: "Retrieves the validation result for the specified basic JMS connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and creating & closing a session."
      parameters:
        - name: uid
          in: path
          description: "**Unique identifier**. For a JMS connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *jmsConnectionFactory[default-0]*."
          required: true
          schema:
            type: string
            example: "DefaultJMSConnectionFactory"
          examples:
            example-jmscf-id:
              summary: "Top-level JMS connection factory with id"
              description: "In this case, the uid is the same as the id."
              value: "DefaultJMSConnectionFactory"
            example-jmscf-no-id:
              summary: "Top-level JMS connection factory without id"
              description: "A generated uid for top-level JMS connection factories which lack an id is computed based on the order of appearance within server config, starting at 0."
              value: "jmsConnectionFactory[default-0]"
            example-jmscf-app-def:
              summary: "App-defined JMS connection factory"
              description: "References a JMS connection factory defined by @JMSConnectionFactoryDefinition within the MyApp application, with a name of java:app/env/jms/cf1"
              value: "application[MyApp]/jmsConnectionFactory[java:app/env/jms/cf1]"
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation result retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validation.jms.result"
  /validation/jmsQueueConnectionFactory/:
    get:
      tags:
      - Validation
      summary: Validation of all JMS Queue Connection Factories
      description: "Retrieves the validation results for all JMS queue connection factories. Validation involves establishing a connection to the backend, querying basic metadata information, and creating & closing a session."
      parameters:
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/validation.jms.result"
  /validation/jmsQueueConnectionFactory/{uid}:
    get:
      tags:
      - Validation
      summary: Validation of a JMS Queue Connection Factory
      description: "Retrieves the validation result for the specified JMS queue connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and creating & closing a session."
      parameters:
        - name: uid
          in: path
          description: "**Unique identifier**. For a JMS queue connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *jmsQueueConnectionFactory[default-0]*."
          required: true
          schema:
            type: string
            example: "MyQueueConFactory"
          examples:
            example-qcf-id:
              summary: "Top-level JMS queue connection factory with id"
              description: "In this case, the uid is the same as the id."
              value: "myQueueConFactory"
            example-qcf-no-id:
              summary: "Top-level JMS queue connection factory without id"
              description: "A generated uid for top-level JMS queue connection factories which lack an id is computed based on the order of appearance within server config, starting at 0."
              value: "jmsQueueConnectionFactory[default-0]"
            example-qcf-app-def:
              summary: "App-defined JMS queue connection factory"
              description: "References a JMS queue connection factory defined by @JMSConnectionFactoryDefinition within the MyApp application, in the MyWebModule module, with a name of java:module/env/jms/qcf1"
              value: "application[MyApp]/module[MyWebModule]/jmsQueueConnectionFactory[java:module/env/jms/qcf1]"
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation result retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validation.jms.result"
  /validation/jmsTopicConnectionFactory/:
    get:
      tags:
      - Validation
      summary: Validation of all JMS Topic Connection Factories
      description: "Retrieves the validation results for all JMS topic connection factories. Validation involves establishing a connection to the backend, querying basic metadata information, and creating & closing a session."
      parameters:
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/validation.jms.result"
  /validation/jmsTopicConnectionFactory/{uid}:
    get:
      tags:
      - Validation
      summary: Validation of a JMS Topic Connection Factory
      description: "Retrieves the validation result for the specified JMS topic connection factory. Validation involves establishing a connection to the backend, querying basic metadata information, and creating & closing a session."
      parameters:
        - name: uid
          in: path
          description: "**Unique identifier**. For a JMS topic connection factory configured at top level, this is the value of the `id` attribute, if present. Otherwise, it is a generated value, such as *jmsTopicConnectionFactory[default-0]*."
          required: true
          schema:
            type: string
            example: "MyTopicConFactory"
          examples:
            example-tcf-id:
              summary: "Top-level JMS topic connection factory with id"
              description: "In this case, the uid is the same as the id."
              value: "myTopicConFactory"
            example-tcf-no-id:
              summary: "Top-level JMS topic connection factory without id"
              description: "A generated uid for top-level JMS topic connection factories which lack an id is computed based on the order of appearance within server config, starting at 0."
              value: "jmsTopicConnectionFactory[default-0]"
            example-tcf-app-def:
              summary: "App-defined JMS topic connection factory"
              description: "References a JMS topic connection factory defined by @JMSConnectionFactoryDefinition within the MyApp application, in the MyWebModule module, with a name of java:comp/env/jms/tcf1"
              value: "application[MyApp]/module[MyWebModule]/jmsTopicConnectionFactory[java:copy/env/jms/tcf1]"
        - $ref: "#/components/parameters/X-Validation-User"
        - $ref: "#/components/parameters/X-Validation-Password"
        - $ref: "#/components/parameters/auth"
        - $ref: "#/components/parameters/authAlias"
        - $ref: "#/components/parameters/loginConfig"
        - $ref: "#/components/parameters/X-Login-Config-Props"
        - $ref: "#/components/parameters/headerParamsURLEncoded"
      responses:
        200:
          description: Validation result retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validation.jms.result"
security:
  - basicAuth: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  parameters:
    X-Validation-User:
      name: X-Validation-User
      in: header
      description: "**User**. Supplies a user name when not using Container-managed authentication. All non-ASCII characters and other characters not allowed in a header must be URL encoded, in which case be sure to specify the *headerParamsURLEncoded* parameter."
      schema:
        type: string
    X-Validation-Password:
      name: X-Validation-Password
      in: header
      description: "**Password**. Supplies a password when not using Container-managed authentication. All non-ASCII characters and other characters not allowed in a header must be URL encoded, in which case be sure to specify the *headerParamsURLEncoded* parameter."
      schema:
        type: string
        format: password
    auth:
      name: auth
      in: query
      description: "**Authentication**. Determines whether to use a resource reference with Application-managed or Container-managed authentication, or no resource reference."
      schema:
       type: string
       enum:
         - application
         - container
    authAlias:
      name: authAlias
      in: query
      description: "**Authentication Alias**. Supplies the `id` of an `authData` to use for Container-managed authentication."
      schema:
        type: string
    loginConfig:
      name: loginConfig
      in: query
      description: "**Custom Login**. Supplies the `name` of a `jaasLoginContextEntry` to use for Container-managed authentication."
      schema:
        type: string
    X-Login-Config-Props:
      name: X-Login-Config-Props
      in: header
      description: "**Login Config Properties**. Supply login config properties as name/value pairs. Each name/value pair is a list element, within which the name and value are delimited by the first `=` character. For example, *prop1=value1*. All non-ASCII characters and other characters not allowed in a header must be URL encoded, in which case be sure to specify the *headerParamsURLEncoded* parameter."
      schema:
        type: array
        items:
          type: string
    headerParamsURLEncoded:
      name: headerParamsURLEncoded
      in: query
      description: "Enable this if you URL-encode values for header parameters, such as X-Validation-User, X-Validation-Password, or X-Login-Config-Props. URL encoding is necessary to supply values that include non-ASCII characters and other characters that are not allowed in a header."
      schema:
        type: boolean
      example: false
  schemas:
    validation.cloudantDatabase.result:
      type: object
      properties:
        uid:
          description: "unique identifier"
          type: string
        id:
          description: "id of cloudantDatabase"
          type: string
        jndiName:
          description: "jndiName of cloudantDatabase"
          type: string
        successful:
          description: "result of validation"
          type: boolean
        info:
          type: object
          properties:
            uri:
              type: string
            serverVersion:
              type: string
            vendorName:
              type: string
            vendorVersion:
              type: string
            vendorVariant:
              type: string
        failure:
          $ref: "#/components/schemas/cause"
      required:
        - uid
        - successful
      example:
        uid: "myCloudantDB"
        id: "myCloudantDB"
        jndiName: "cloudant/db1"
        successful: true
        info:
          uri: "http://myhost.rchland.ibm.com:5984/exampledb1"
          serverVersion: "2.0.0"
          vendorName: "IBM Cloudant"
          vendorVersion: "1.1.0"
          vendorVariant: "local"
    validation.connectionFactory.result:
      type: object
      properties:
        uid:
          description: "unique identifier"
          type: string
        id:
          description: "id of connectionFactory"
          type: string
        jndiName:
          description: "jndiName of connectionFactory"
          type: string
        successful:
          description: "result of validation"
          type: boolean
        info:
          anyOf:
            - type: object
              properties:
                resourceAdapterName:
                  type: string
                resourceAdapterVersion:
                  type: string
                resourceAdapterVendor:
                  type: string
                resourceAdapterDescription:
                  type: string
                connectorSpecVersion:
                  type: string
                eisProductName:
                  type: string
                eisProductVersion:
                  type: string
                user:
                  type: string
            - $ref: "#/components/schemas/info"
        failure:
          $ref: "#/components/schemas/cause"
      required:
        - uid
        - successful
      example:
        uid: "myConnectionFactory"
        id: "myConnectionFactory"
        jndiName: "eis/conFactory1"
        successful: false
        info:
          resourceAdapterName: "LibConnect Adapter"
          resourceAdapterVersion: "104.153.185"
          resourceAdapterVendor: "OpenLiberty"
          resourceAdapterDescription: "This isn't a real resource adapter."
          connectorSepcVersion: "1.7"
          eisProductName: "VeryFast Enterprise DB"
          eisProductVersion: "44.117.125"
          user: "dbuser1"
        failure:
          errorCode: "ERR_NOT_AUTHORIZED"
          class: "javax.resource.spi.SecurityException"
          message: "User has insufficient privileges to access the backend data store."
          stack:
            - "org.example.lca.ConnectionImpl.createInteraction(ConnectionImpl.java:146)"
            - "com.ibm.ws.rest.handler.validator.jca.ConnectionFactoryValidator.validateCCIConnectionFactory(ConnectionFactoryValidator.java:304)"
            - "com.ibm.ws.rest.handler.validator.jca.ConnectionFactoryValidator.validate(ConnectionFactoryValidator.java:169)"
            - "com.ibm.ws.rest.handler.validator.internal.ValidatorRestHandler.handleSingleInstance(ValidatorRestHandler:231)"
          cause:
            class: "javax.security.auth.login.LoginException"
            message: "unauthorized"
            stack:
              - "org.example.lca.AuthHelper.verifyPrivileges(AuthHelper.java:82)"
              - "org.example.lca.ConnectionImpl.authenticate(EFConnection.java:223)"
              - "org.example.lca.ConnectionImpl.deferredLogin(EFConnection.java:385)"
    validation.dataSource.result:
      type: object
      properties:
        uid:
          description: "unique identifier"
          type: string
        id:
          description: "id of dataSource"
          type: string
        jndiName:
          description: "jndiName of dataSource"
          type: string
        successful:
          description: "result of validation"
          type: boolean
        info:
          $ref: "#/components/schemas/info"
        failure:
          $ref: "#/components/schemas/cause"
      required:
        - uid
        - successful
      example:
        uid: "myDataSource"
        id: "myDataSource"
        jndiName: "jdbc/ds1"
        successful: false
        info:
          databaseProductName: "VeryFast Enterprise DB"
          databaseProductVersion: "44.117.125"
          jdbcProductName: "EvenFaster JDBC"
          jdbcProductVersion: "52.165.173"
          catalog: "exampledb"
          schema: "MYSCHEMA"
          user: "dbuser1"
        failure:
          sqlState: "08004"
          errorCode: "9409"
          class: "java.sql.SQLInvalidAuthorizationSpecException"
          message: "User has insufficient privileges to access database."
          stack:
            - "org.example.efjdbc.EFConnection.isValid(EFConnection.java:253)"
            - "com.ibm.ws.rest.handler.validator.jdbc.DataSourceValidator(DataSourceValidator.java:129)"
            - "com.ibm.ws.rest.handler.validator.internal.ValidatorRestHandler.handleSingleInstance(ValidatorRestHandler:231)"
          cause:
            class: "javax.security.auth.login.LoginException"
            message: "unauthorized"
            stack:
              - "org.example.efjdbc.AuthHelper.verifyPrivileges(AuthHelper.java:82)"
              - "org.example.efjdbc.EFConnection.authenticate(EFConnection.java:223)"
              - "org.example.efjdbc.EFConnection.deferredLogin(EFConnection.java:385)"
    validation.jms.result:
      type: object
      properties:
        uid:
          description: "unique identifier"
          type: string
        id:
          description: "id of config element"
          type: string
        jndiName:
          description: "jndiName of config element"
          type: string
        successful:
          description: "result of validation"
          type: boolean
        info:
          type: object
          properties:
            jmsProviderName:
              type: string
            jmsProviderVersion:
              type: string
            jmsProviderSpecVersion:
              type: string
            clientID:
              type: string
        failure:
          $ref: "#/components/schemas/cause"
      required:
        - uid
        - successful
      example:
        uid: "myJMS1"
        id: "myJMS1"
        jndiName: "jms/cf1"
        successful: false
        info:
          jmsProviderName: "OpenL Messaging Provider"
          jmsProviderVersion: "39.80.89"
          jmsProviderSpecVersion: "2.0"
          clientID: "MyClient"
        failure:
          errorCode: "ERR_UNAUTHORIZED"
          class: "javax.jms.SecurityException"
          message: "User lacks authority to send or receive messages."
          stack:
            - "org.example.am.JMSConnectionImpl.createSession(JMSConnectionImpl.java:71)"
            - "com.ibm.ws.rest.handler.validator.jms.JMSConnectionFactoryValidator.validate(JMSConnectionFactoryValidator.java:150)"
            - "com.ibm.ws.rest.handler.validator.jca.ConnectionFactoryValidator.validate(ConnectionFactoryValidator.java:189)"
            - "com.ibm.ws.rest.handler.validator.internal.ValidatorRestHandler.handleSingleInstance(ValidatorRestHandler:231)"
          cause:
            class: "javax.security.auth.login.LoginException"
            message: "unauthorized"
            stack:
              - "org.example.lca.AuthHelper.verifyPrivileges(AuthHelper.java:82)"
              - "org.example.lca.ConnectionImpl.authenticate(EFConnection.java:223)"
              - "org.example.lca.ConnectionImpl.deferredLogin(EFConnection.java:385)"
    info:
      type: object
      properties:
        databaseProductName:
          type: string
        databaseProductVersion:
          type: string
        jdbcDriverName:
          type: string
        jdbcDriverVersion:
          type: string
        catalog:
          type: string
        schema:
          type: string
        user:
          type: string
    cause:
      type: object
      properties:
        sqlState:
          type: string
        errorCode:
          type: string
        class:
          type: string
        message:
          type: string
        stack:
          type: array
          items:
            type: string
        cause:
          $ref: "#/components/schemas/cause"
