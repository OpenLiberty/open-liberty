/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
/*
 * Master Gradle build script
 *
 * Depends on bnd_* values from gradle.properties.
 */


ext {
  cnf = rootProject.project(bnd_cnf)
  buildImage = project(':build.image')
}


subprojects {
  plugins.apply 'java'
  
  def bndProject = bndWorkspace.getProject(name)

  if (bndProject != null) {
    plugins.apply 'biz.aQute.bnd'
  } else {
    task publish { }
    task release { }
    task releaseNeeded { dependsOn release }
    task copyPiiFiles { }
  }

  /* For Java 9 builds, set the --release compiler flag to keep bootclasspath in sync */
  tasks.withType(JavaCompile) {
    doFirst {
      if(JavaVersion.current().isJava9Compatible() && !'off'.equals(bnd('javac.args.release'))) {
        def release = sourceCompatibility
        if(sourceCompatibility.startsWith('1.'))
          release = sourceCompatibility.substring(2);
        if('current'.equals(bnd('javac.args.release')))
          release = JavaVersion.current().getMajorVersion() 
        options.compilerArgs.addAll([ '--release', release])
      }
    }
  }
  tasks.withType(Javadoc) {
    doFirst {
      // Starting with JDK 9.0.4 the javadoc compiler started to striclty enforce proper HTML
      // syntax and other breaking changes.  Fixing all of these ocurrances would take far too
      // long and be a poor use of time, so we will disable these checks for JDK9 and up
      if(JavaVersion.current().isJava9Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  if (bndProject != null) {
    apply from: cnf.file('gradle/scripts/repos.gradle')
    apply from: cnf.file('gradle/scripts/publish.gradle')
    apply from: cnf.file('gradle/scripts/anttaskdefs.gradle')
    apply from: cnf.file('gradle/scripts/tasks.gradle')

    if (bndis('fat.project')) {
      apply from: cnf.file('gradle/scripts/fat.gradle')
    }

  }

  // Make the release task depend on assemble so that invoking 'release' or 'releaseNeeded'
  // will publish jar updates to the local build.image/wlp image
  release.dependsOn assemble
  release.dependsOn publish
}

task testReport(type: TestReport) {
    // make sure this task is run after all subproject test tasks
    mustRunAfter subprojects.test

    destinationDir = cnf.file('generated/testReports/allUnitTests')
    // Include the results from the `test` task in all subprojects
    reportOn subprojects.test
}

task zipTestReport(type: Zip) {
  dependsOn testReport
    baseName 'openliberty_test_report'
    from cnf.file('generated/testReports/allUnitTests')
    destinationDir cnf.file('generated/testReports')
}
    

task testResults {
  dependsOn subprojects.test

  doLast {
    userProps.setProperty('tests.total.failed', failedTestCountTotal.toString())
    userProps.setProperty('tests.total.successful', successfulTestCountTotal.toString())

    File propsFile = new File('generated.properties')
    userProps.store(propsFile.newWriter(), null)
  }
}
testResults.dependsOn zipTestReport

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}


