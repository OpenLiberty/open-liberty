<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />
    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />
    
    <bean id="PopulateAuthenticationContext"
        class="net.shibboleth.idp.authn.impl.PopulateAuthenticationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.AvailableAuthenticationFlows"
        p:potentialFlows="#{@'shibboleth.AvailableAuthenticationFlows'.?[id matches 'authn/(' + '%{idp.authn.flows:}'.trim() + ')']}"
        p:principalEvalPredicateFactoryRegistry-ref="shibboleth.AuthnComparisonRegistry" />

    <bean id="PopulateAuthenticationContextWithInitialFlow"
        class="net.shibboleth.idp.authn.impl.PopulateAuthenticationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.AvailableAuthenticationFlows"
        p:potentialFlows="#{@'shibboleth.AvailableAuthenticationFlows'.?[id matches 'authn/(' + '%{idp.authn.flows.initial:}'.trim() + ')']}"
        p:principalEvalPredicateFactoryRegistry-ref="shibboleth.AuthnComparisonRegistry" />

    <bean id="PopulateSessionContext"
        class="net.shibboleth.idp.session.impl.PopulateSessionContext" scope="prototype"
        p:activationCondition="%{idp.session.enabled:true}"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:sessionResolver-ref="shibboleth.SessionManager" />
    
    <bean id="SetRPUIInformation"
            class="net.shibboleth.idp.ui.impl.SetRPUIInformation" scope="prototype"
            p:activationCondition="%{idp.authn.rpui:true}"
            p:httpServletRequest-ref="shibboleth.HttpServletRequest">
        <property name="fallbackLanguages">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.ui.fallbackLanguages:}'.trim()}" />
        </property>
    </bean>
    
    <bean id="ExtractActiveAuthenticationResults"
        class="%{idp.session.activeResultExtraction:net.shibboleth.idp.session.impl.ExtractActiveAuthenticationResults}"
        scope="prototype" />

    <bean id="InitializeRequestedPrincipalContext"
        class="net.shibboleth.idp.authn.impl.InitializeRequestedPrincipalContext" scope="prototype"
        p:replaceExistingContext="%{idp.authn.overrideRequestedAuthnContext:false}" />

    <bean id="ResolveAttributes"
            class="net.shibboleth.idp.profile.impl.ResolveAttributes" scope="prototype"
            c:resolverService-ref="shibboleth.AttributeResolverService"
            p:activationCondition="#{ '%{idp.authn.resolveAttribute:null}' != 'null' }"
            p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}">
        <property name="attributesToResolve">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{ '%{idp.authn.resolveAttribute:null}'.trim() }" />
        </property>
        <property name="principalNameLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.PrincipalNameLookup.Session"
                c:f-ref="shibboleth.ChildLookup.SessionContext" />
        </property>
        <property name="attributeContextCreationStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookupOrCreate.AttributeContext"
                c:f-ref="shibboleth.ChildLookup.AuthenticationContext" />
        </property>
    </bean>

    <bean id="FilterFlowsByAttribute"
        class="net.shibboleth.idp.authn.impl.FilterFlowsByAttribute" scope="prototype"
        p:activationCondition="#{ '%{idp.authn.resolveAttribute:null}' != 'null' }"
        p:attributeId="#{ T(org.springframework.util.StringUtils).commaDelimitedListToStringArray('%{idp.authn.resolveAttribute:null}'.trim())[0] }"
        p:filterActiveResults="%{idp.authn.filterActiveResultsByAttribute:true}" />

    <bean id="FilterFlowsByForcedAuthn"
        class="net.shibboleth.idp.authn.impl.FilterFlowsByForcedAuthn" scope="prototype" />
    
    <bean id="FilterFlowsByNonBrowserSupport"
        class="net.shibboleth.idp.authn.impl.FilterFlowsByNonBrowserSupport" scope="prototype" />

    <bean id="SelectAuthenticationFlow"
        class="net.shibboleth.idp.authn.impl.SelectAuthenticationFlow" scope="prototype"
        p:favorSSO="%{idp.authn.favorSSO:false}" />
    
    <bean id="PopulateSubjectCanonicalizationContext"
        class="net.shibboleth.idp.authn.impl.PopulateSubjectCanonicalizationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.PostLoginSubjectCanonicalizationFlows" />
    
    <bean id="DetectIdentitySwitch"
        class="net.shibboleth.idp.session.impl.DetectIdentitySwitch" scope="prototype"
        p:sessionManager-ref="shibboleth.SessionManager" />
    
    <bean id="IdentitySwitchIsError" class="java.lang.Boolean">
        <constructor-arg value="%{idp.authn.identitySwitchIsError:false}" type="boolean" />
    </bean>
    
    <bean id="FinalizeAuthentication"
        class="net.shibboleth.idp.authn.impl.FinalizeAuthentication" scope="prototype"
        p:weightMap="#{getObject('shibboleth.AuthenticationPrincipalWeightMap')}" />
    
    <bean id="UpdateSessionWithAuthenticationResult"
        class="net.shibboleth.idp.session.impl.UpdateSessionWithAuthenticationResult" scope="prototype"
        p:activationCondition="%{idp.session.enabled:true}"
        p:sessionManager-ref="shibboleth.SessionManager" />
    
</beans>
