<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
    default-init-method="initialize"
    default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <!-- Profile ID for flow. -->    
    <bean id="shibboleth.AdminProfileId" class="java.lang.String"
        c:_0="http://shibboleth.net/ns/profiles/resolvertest" />

    <!-- Default operation/resource suppliers for access checks. -->
    
    <bean id="shibboleth.AdminOperationLookupStrategy" class="com.google.common.base.Functions"
        factory-method="constant" c:_0="read" />
        
    <bean id="shibboleth.AdminResourceLookupStrategy"
        class="net.shibboleth.idp.profile.context.navigate.SpringExpressionContextLookupFunction"
        c:inClass="#{T(org.opensaml.profile.context.ProfileRequestContext)}"
        c:outputType="#{T(java.lang.String)}"
        c:expression="'subject/' + #input.getInboundMessageContext().getMessage().getPrincipal() + '/attributes'" />
        
    <bean id="DecodeMessage" class="org.opensaml.profile.action.impl.DecodeMessage" scope="prototype">
        <constructor-arg>
            <bean class="%{idp.resolvertest.decoderClass:net.shibboleth.idp.profile.impl.ResolverTestRequestDecoder}"
                    scope="prototype">
                <property name="httpServletRequest" ref="shibboleth.HttpServletRequest" />
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="PostDecodePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext">
        <property name="fieldExtractors">
            <map>
                <entry>
                    <key>
                        <util:constant static-field="net.shibboleth.idp.saml.profile.SAMLAuditFields.PROTOCOL"/>
                    </key>
                    <bean class="com.google.common.base.Functions" factory-method="compose">
                        <constructor-arg name="g">
                            <bean class="com.google.common.base.Functions" factory-method="compose">
                                <constructor-arg name="g">
                                    <bean class="org.opensaml.saml.common.messaging.context.navigate.SAMLProtocolContextProtocolFunction" />
                                </constructor-arg>
                                <constructor-arg name="f">
                                    <ref bean="shibboleth.ChildLookup.SAMLProtocolContext" />
                                </constructor-arg>
                            </bean>
                        </constructor-arg>
                        <constructor-arg name="f">
                            <ref bean="shibboleth.MessageContextLookup.Inbound" />
                        </constructor-arg>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
    
    <bean id="SAMLMetadataLookup"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLMetadataLookupHandler" scope="prototype">
                <property name="roleDescriptorResolver">
                    <bean class="org.opensaml.saml.metadata.resolver.impl.PredicateRoleDescriptorResolver"
                        c:mdResolver-ref="shibboleth.MetadataResolver" />
                </property>
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="SAMLPopulateAttributeConsumingService"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLAddAttributeConsumingServiceHandler" scope="prototype" />
        </constructor-arg>
    </bean>

    <bean id="InitializeRelyingPartyContexFromSAMLPeer"
        class="net.shibboleth.idp.saml.profile.impl.InitializeRelyingPartyContextFromSAMLPeer" scope="prototype" />

    <bean id="SelectRelyingPartyConfiguration"
        class="net.shibboleth.idp.profile.impl.SelectRelyingPartyConfiguration" scope="prototype"
        p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyConfigurationResolver" />
    
    <bean id="PostLookupPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.PostLookupAuditExtractors') ?: getObject('shibboleth.DefaultPostLookupAuditExtractors')}" />

    <bean id="PopulateSubjectContext"
            class="net.shibboleth.idp.profile.impl.PopulateSubjectContext" scope="prototype">
        <property name="principalNameLookupStrategy">
            <bean class="net.shibboleth.idp.profile.impl.ResolverTestPrincipalLookup" />
        </property>
    </bean>

    <bean id="FilterAttributes" class="net.shibboleth.idp.profile.impl.FilterAttributes" scope="prototype"
        c:filterService-ref="shibboleth.AttributeFilterService"
        p:maskFailures="%{idp.service.attribute.filter.maskFailures:true}" />
        
    <util:map id="ProtocolStateMap">
        <entry>
            <key>
                <null/>
            </key>
            <value>PrepareForView</value>
        </entry>
        <entry>
            <key>
                <util:constant static-field="org.opensaml.saml.common.xml.SAMLConstants.SAML11P_NS" />
            </key>
            <value>EncodeToSAML1</value>
        </entry>
        <entry>
            <key>
                <util:constant static-field="org.opensaml.saml.common.xml.SAMLConstants.SAML20P_NS" />
            </key>
            <value>EncodeToSAML2</value>
        </entry>
    </util:map>
    
    <bean id="InitializeOutboundMessageContext"
        class="net.shibboleth.idp.saml.profile.impl.InitializeOutboundMessageContext" scope="prototype" />
    
    <bean id="AddSAML1AttributeStatementToAssertion"
            class="net.shibboleth.idp.saml.saml1.profile.impl.AddAttributeStatementToAssertion" scope="prototype">
        <property name="identifierGeneratorLookupStrategy">
            <bean class="net.shibboleth.idp.profile.config.navigate.IdentifierGenerationStrategyLookupFunction"
                p:defaultIdentifierGenerationStrategy-ref="shibboleth.DefaultIdentifierGenerationStrategy" />
        </property>
    </bean>

    <bean id="AddNameIdentifierToSubjects"
            class="org.opensaml.saml.saml1.profile.impl.AddNameIdentifierToSubjects" scope="prototype">
        <property name="formatLookupStrategy">
            <bean class="net.shibboleth.idp.saml.profile.logic.DefaultNameIdentifierFormatStrategy"
                    p:defaultFormat="%{idp.nameid.saml1.default:urn:mace:shibboleth:1.0:nameIdentifier}">
                <property name="profileId">
                    <util:constant static-field="net.shibboleth.idp.saml.saml1.profile.config.BrowserSSOProfileConfiguration.PROFILE_ID" />
                </property>
            </bean>
        </property>
        <property name="nameIdentifierGenerator">
            <bean class="net.shibboleth.idp.saml.nameid.impl.ProxySAML1NameIdentifierGenerator"
                c:service-ref="shibboleth.NameIdentifierGenerationService" />
        </property>
    </bean>

    <bean id="AddSAML2AttributeStatementToAssertion"
            class="net.shibboleth.idp.saml.saml2.profile.impl.AddAttributeStatementToAssertion" scope="prototype">
        <property name="identifierGeneratorLookupStrategy">
            <bean class="net.shibboleth.idp.profile.config.navigate.IdentifierGenerationStrategyLookupFunction"
                p:defaultIdentifierGenerationStrategy-ref="shibboleth.DefaultIdentifierGenerationStrategy" />
        </property>
    </bean>

    <bean id="AddNameIDToSubjects"
            class="org.opensaml.saml.saml2.profile.impl.AddNameIDToSubjects" scope="prototype">
        <property name="formatLookupStrategy">
            <bean class="net.shibboleth.idp.saml.profile.logic.DefaultNameIdentifierFormatStrategy"
                    p:defaultFormat="%{idp.nameid.saml2.default:urn:oasis:names:tc:SAML:2.0:nameid-format:transient}">
                <property name="profileId">
                    <util:constant static-field="net.shibboleth.idp.saml.saml2.profile.config.BrowserSSOProfileConfiguration.PROFILE_ID" />
                </property>
            </bean>
        </property>
        <property name="nameIDGenerator">
            <bean class="net.shibboleth.idp.saml.nameid.impl.ProxySAML2NameIDGenerator"
                c:service-ref="shibboleth.NameIdentifierGenerationService" />
        </property>
        <property name="nameIDPolicyPredicate">
            <bean class="org.opensaml.saml.common.profile.logic.AffiliationNameIDPolicyPredicate"
                    p:metadataResolver-ref="shibboleth.MetadataResolver"
                    p:responderIdLookupStrategy-ref="shibboleth.ResponderIdLookup.Simple"
                    p:requesterIdLookupStrategy-ref="shibboleth.RelyingPartyIdLookup.Simple">
                <property name="objectLookupStrategy">
                    <bean class="org.opensaml.saml.saml2.profile.impl.AddNameIDToSubjects.NameIDPolicyLookupFunction" />
                </property>
            </bean>
        </property>
    </bean>
    
    <bean id="PostAssertionPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.PostAssertionAuditExtractors') ?: getObject('shibboleth.DefaultPostAssertionAuditExtractors')}" />
    
    <bean id="PostResponsePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.PostResponseAuditExtractors') ?: getObject('shibboleth.DefaultPostResponseAuditExtractors')}" />

</beans>
