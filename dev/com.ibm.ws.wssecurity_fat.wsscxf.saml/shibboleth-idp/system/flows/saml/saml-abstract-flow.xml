<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    abstract="true">

    <!--  Actions common to most SAML profile flows. -->

    <!-- Decode / Configuration Lookup / Request Checking -->

    <action-state id="DecodeMessage">
        <evaluate expression="PopulateMetricContext" />
        <evaluate expression="DecodeMessage" />
        <evaluate expression="PostDecodePopulateAuditContext" />

        <evaluate expression="CheckMessageVersion" />
        <evaluate expression="SAML1ArtifactRequestIssuer" />
        <evaluate expression="SAMLProtocolAndRole" />
        <evaluate expression="SAMLMetadataLookup" />
        <evaluate expression="SAMLPopulateAttributeConsumingService" />

        <evaluate expression="InitializeRelyingPartyContexFromSAMLPeer" />
        <evaluate expression="SelectRelyingPartyConfiguration" />

        <evaluate expression="PostLookupPopulateAuditContext" />
        
        <evaluate expression="SelectProfileConfiguration" />

        <evaluate expression="PopulateSignatureValidationParameters" />
        <evaluate expression="PopulateClientTLSValidationParameters" />
        
        <evaluate expression="PopulateInboundInterceptContext" />
        <evaluate expression="PopulateUserAgentContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckInboundInterceptContext" />
    </action-state>

    <decision-state id="CheckInboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="OutboundContextsAndSecurityParameters" else="DoInboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoInboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="OutboundContextsAndSecurityParameters" />
    </subflow-state>
    
    <action-state id="OutboundContextsAndSecurityParameters">
        <evaluate expression="InitializeOutboundMessageContext" />
        <evaluate expression="InitializeMessageChannelSecurityContext" />
        <evaluate expression="PopulateBindingAndEndpointContexts" />
        <evaluate expression="PopulateDelegationContext" />
        <evaluate expression="PopulateResponseSignatureSigningParameters" />
        <evaluate expression="PopulateAssertionSignatureSigningParameters" />
        <evaluate expression="PopulateEncryptionParameters" />
        <evaluate expression="PopulateDecryptionParameters" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ExtractSubject" />
    </action-state>

    <!-- Pull SAML Subject if present and turn it into a principal name. -->

    <action-state id="ExtractSubject">
        <evaluate expression="DecryptNameIDs" />
        <evaluate expression="ExtractSubjectFromRequest" />
        <evaluate expression="PopulateSubjectCanonicalizationContext" />
        <evaluate expression="'proceed'" />
        
        <!-- No subject to operate on, so just skip to the profile. -->
        <transition on="NoSubject" to="DoProfileWork" />
        
        <transition on="proceed" to="CallSubjectCanonicalization" />
    </action-state>

    <subflow-state id="CallSubjectCanonicalization" subflow="c14n">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="FinalizeSAMLSubjectCanonicalization" />
    </subflow-state>
    
    <action-state id="FinalizeSAMLSubjectCanonicalization">
        <evaluate expression="FinalizeSAMLSubjectCanonicalization" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoProfileWork" />
    </action-state>
        
    <!--
    The meat will be inserted here by defining DoProfileWork and transitioning
    from there to profile activity and eventually to the final stages below.
    -->

    <!-- Post Processing / Encode -->

    <!--
    These actions handle errors by routing to the catch-all end-state, because
    it's assumed that any error here is unrecoverable and would prevent returning
    a SAML protocol message regardless.
    -->

    <!-- Pick back up with profile. -->

    <action-state id="ReturnToParentFlow">
        <evaluate expression="PopulateOutboundInterceptContext" />
        <evaluate expression="'proceed'" />
    
        <transition on="proceed" to="CheckOutboundInterceptContext" />
        <transition to="HandleErrorWithView" />
    </action-state>

    <decision-state id="CheckOutboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="HandleOutboundMessage" else="DoOutboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoOutboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="HandleOutboundMessage" />
        <transition to="HandleErrorWithView" />
    </subflow-state>

    <action-state id="HandleOutboundMessage">
        <evaluate expression="HandleOutboundMessage" />
        <evaluate expression="EncodeMessage" />
        <evaluate expression="RecordResponseComplete" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="end" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <!-- Passthrough state if an exception is thrown. -->

    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.saml.profile').error('Uncaught runtime exception', flowExecutionException.getCause() ?: flowExecutionException)" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        <transition to="HandleError" />
    </action-state>

    <!-- Unsuccessful terminal states. -->
    
    <decision-state id="HandleErrorWithView">
        <if test="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').containsKey(currentEvent.id) and flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').get(currentEvent.id)"
            then="AuditedErrorView" else="ErrorView" />
    </decision-state>
    
    <end-state id="AuditedErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <end-state id="ErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <!-- Successful terminal state (success meaning outbound SAML message encoded). -->

    <end-state id="end">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
        </on-entry>
    </end-state>

    <!--
    Default is to turn non-proceed events into an error, and initiate error handling sequence
    defined by action in child flows.
    -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleError" />
    </global-transitions>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="../saml-abstract-beans.xml" />

</flow>
