/*******************************************************************************
 * Copyright (c) 2021 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
apply from: '../com.ibm.ws.security.saml.sso_fat.common/ShibbolethCommon.gradle'

dependencies {
  requiredLibs project(':com.ibm.ws.wssecurity.fat.utils.common'),
               project(':com.ibm.ws.security.saml.sso_fat.common'),
               project(':com.ibm.ws.org.apache.commons.io'),
               project(':io.openliberty.org.apache.commons.logging'),
               project(':io.openliberty.org.apache.commons.codec'),
               'org.apache.httpcomponents:httpclient:4.5.4',
               'org.apache.httpcomponents:httpcore:4.4.9',
               'org.apache.commons:commons-lang3:3.5',
               'org.apache.ws.security:wss4j:1.6.18',
               'httpunit:httpunit:1.6.2',                           
               'jtidy:jtidy:4aug2000r7-dev',
               'rhino:js:1.6R5',
               'xml-apis:xml-apis:1.4.01',
               'net.sourceforge.htmlunit:htmlunit-cssparser:1.6.0',
               'org.brotli:dec:0.1.2',
               'net.sourceforge.htmlunit:htmlunit-core-js:2.44.0',
               'org.apache.httpcomponents:httpmime:4.5.3',
               'org.apache.httpcomponents:httpcomponents-client:4.5.3',
               'net.sourceforge.htmlunit:neko-htmlunit:2.44.0',
               'xalan:xalan:2.7.2',
               'xerces:xercesImpl:2.11.0',
               'xml-apis:xml-apis:1.4.01'
               
                        
}
/* 'xml-apis:xml-apis:1.4.01'*
/*
 * This is where all application WARs will be built.
 */
def appBuildDir = "${buildDir}/test-application"


/******************************************************************
 ******************************************************************
 **
 ** samlcxfclient.war
 **
 ******************************************************************
 ******************************************************************/
task samlcxfclient_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "samlcxfclient.war"
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/samlcxfclient/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'com/ibm/ws/wssecurity/fat/samlcxfclient/**' 
    include 'fats/cxf/basic/wssec/**'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** samltoken.war
 **
 ******************************************************************
 ******************************************************************/
task samltoken_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "samltoken.war"
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/samltoken/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'com/ibm/ws/wssecurity/fat/samltoken/**' 
    into 'WEB-INF/classes'
  }
}

/******************************************************************
 ******************************************************************
 **
 ** samlwsstemplates.war
 **
 ******************************************************************
 ******************************************************************/
task samlwsstemplates_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "samlwsstemplates.war"
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/samlwsstemplates/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'com/ibm/ws/wssecurity/fat/wsstemplates/**' 
    into 'WEB-INF/classes'
  }
}

/******************************************************************
 ******************************************************************
 **
 ** samlcallertoken.war
 **
 ******************************************************************
 ******************************************************************/
task samlcallertoken_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "samlcallertoken.war"
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/samlcallertoken/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'test/libertyfat/samlcaller/**' 
    into 'WEB-INF/classes'
  }
}

/******************************************************************
 ******************************************************************
 **
 ** samlwsstemplatesclient.war
 **
 ******************************************************************
 ******************************************************************/
task samlwsstemplatesclient_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "samlwsstemplatesclient.war"
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/samlwsstemplatesclient/resources') {
    include '**'
  }
  
  from ('build/classes/java/main') {
    include 'com/ibm/ws/wssecurity/fat/wsstemplatesclient/**' 
    include 'test/wssecfvt/wsstemplates/**'
    into 'WEB-INF/classes'
  }
}

/******************************************************************
 ******************************************************************
 **
 ** samlwsstemplatesclientwithep.war
 **
 ******************************************************************
 ******************************************************************/
task samlwsstemplatesclientwithep_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "samlwsstemplatesclientwithep.war"
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/samlwsstemplatesclientwithep/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'com/ibm/ws/wssecurity/fat/wsstemplatesclient/**' 
    include 'test/wssecfvt/wsstemplates/**'
    into 'WEB-INF/classes'
  }
}

/******************************************************************
 ******************************************************************
 **
 ** samlwsstemplateswithep.war
 **
 ******************************************************************
 ******************************************************************/
task samlwsstemplateswithep_WAR(type: War, dependsOn: classes) {
  destinationDir file(appBuildDir)
  archiveName "samlwsstemplateswithep.war"
  
  manifest {
    attributes("Class-Path": "")
  }
  
  from ('test-applications/samlwsstemplateswithep/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'com/ibm/ws/wssecurity/fat/wsstemplates/**' 
    into 'WEB-INF/classes'
  }
}


/*
 * The 'assemble' task builds all these applications.
 */
assemble { 
  dependsOn samlcxfclient_WAR
  dependsOn samltoken_WAR
  dependsOn samlwsstemplates_WAR
  dependsOn samlcallertoken_WAR
  dependsOn samlwsstemplatesclient_WAR
  dependsOn samlwsstemplatesclientwithep_WAR
  dependsOn samlwsstemplateswithep_WAR
}

addRequiredLibraries.dependsOn copyShibbolethIdpConfig, copyShibbolethServer

autoFVT.doLast {

/* Copy common files to autoFVT */
    copy { 
      from project.file('securitykeys')
      include '**'
      into new File(autoFvtDir, 'securitykeys')
    }
    
    copy {
    from project.file('publish/files/serversettings')
    include '**'
    into new File(autoFvtDir, 'imports')
    }
    
    copy {
    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
    include 'misc.xml'
    into new File(autoFvtDir, 'imports')
    }
    
    copy {
    from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
    include 'fatTestPorts.xml'
    into new File(autoFvtDir, 'imports')
    }
    
    copy {
    from project.file('publish/files/serversettings')
    include 'fattestports2.xml'
    into new File(autoFvtDir, '/')
    }
    
    copy {
    from project.file('publish/files')
    include '**'
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles')
    }
    
    copy {
    from project.file('publish/files/features')
    include 'wsseccbh-1.0.mf'
    into new File(autoFvtDir, 'publish/features')
    }
    
    copy {
    from project.file('publish/files/bundles')
    include 'com.ibm.ws.wssecurity.example.cbh_1.0.0.jar'
    into new File(autoFvtDir, 'publish/bundles')
    }
    
    copy {
    from project.file('publish/files/features')
    include 'wsseccbh-2.0.mf'
    into new File(autoFvtDir, 'publish/features')
    }
    
    copy {
    from project.file('publish/files/bundles')
    include 'com.ibm.ws.wssecurity.example.cbhwss4j.jar'
    into new File(autoFvtDir, 'publish/bundles')
    }
      
    copy {
    from project(':com.ibm.ws.security.saml.sso_fat.common').buildDir
    include 'shibboleth-idp/**'
    into autoFvtDir
    }
       
    copy { 
      from project.file('override/autoFVT/cxfclient-policies')
      include '**'
      into new File(autoFvtDir, 'cxfclient-policies')
    }
    
/* Copy common files to all servers */
  def servers = [
        'com.ibm.ws.wssecurity_fat.saml',
        'com.ibm.ws.wssecurity_fat.saml.2servers',
        'com.ibm.ws.wssecurity_fat.saml.wssTemplates',
        'com.ibm.ws.wssecurity_fat.saml.2serverswithep',
        'com.ibm.ws.wssecurity_fat.saml.wssTemplateswithep'
  ]

  servers.each { server ->

    copy {
    from project.file('publish/servers/' + server + '/configs')
    into new File(autoFvtDir, 'publish/servers/' + server + '/configs')
    }

    copy {
    from project.file('publish/servers/' + server + '/bootstrap.properties')
    into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }

    copy {
    from project.file('publish/files/serversettings')
    include '*.xml'
    into new File(autoFvtDir, 'publish/servers/' + server + '/imports')
    }
  
    copy {
    from project.file('publish/files/serversettings/SAMLServerFiles')
    include '**'
    into new File(autoFvtDir, 'publish/servers/' + server + '/imports')
    }
    
    copy {
    from project.file('publish/files/serversettings/SAMLServerFiles')
    include '**'
    into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }
     
    copy { 
      from project.file('securitykeys')
      include "**"
      into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }
    
    copy {
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
    }
  }    

/* Copy files for specific server */
  servers = [
        'com.ibm.ws.wssecurity_fat.saml'
  ]
  
  servers.each { server ->
    copy {
    from new File(appBuildDir, 'samlcxfclient.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
    
    copy {
    from new File(appBuildDir, 'samltoken.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
    
  }
  
  servers = [
        'com.ibm.ws.wssecurity_fat.saml.2servers'
  ]
  
  servers.each { server ->    
    copy {
    from new File(appBuildDir, 'samltoken.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
    
    copy {
    from new File(appBuildDir, 'samlwsstemplates.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
    
    copy {
    from new File(appBuildDir, 'samlcallertoken.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
  }
  
  servers = [
        'com.ibm.ws.wssecurity_fat.saml.wssTemplates'
  ]
  
  servers.each { server ->
    copy {
    from new File(appBuildDir, 'samlwsstemplatesclient.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
    
    copy {
    from new File(appBuildDir, 'samlwsstemplates.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
  }
  
  servers = [
        'com.ibm.ws.wssecurity_fat.saml.wssTemplateswithep'
  ]
  
  servers.each { server ->
    copy {
    from new File(appBuildDir, 'samlwsstemplatesclientwithep.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
  }
  
  servers = [
        'com.ibm.ws.wssecurity_fat.saml.2serverswithep'
  ]
  
  servers.each { server ->
    copy {
    from new File(appBuildDir, 'samlwsstemplateswithep.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
  }
  
}