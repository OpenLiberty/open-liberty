/*******************************************************************************
 * Copyright (c) 2019, 2023 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

/**
 * Apply Java plugin to all subprojects.
 * See: https://docs.gradle.org/current/userguide/java_plugin.html
 */
subprojects {
  apply plugin: 'java'

  tasks.withType(Copy).all {
  	duplicatesStrategy 'include'
  }

  task publishJunitReport() {
    ext {
      outputFilesDir = rootProject.file(rootProject.ext.get('published.outputs.files'))
      outputEventsDir = rootProject.file(rootProject.ext.get('published.outputs.events')+"/rawJUnitResults")
      reportDir = project.file("${project.buildDir}/libs/merged-test-reports/test/")
    }
    doLast {
      if(new File(reportDir,"TESTS-TestSuites.xml").exists()){
        mkdir outputFilesDir
        mkdir outputEventsDir;

        ant.checksum(file: new File(reportDir,"TESTS-TestSuites.xml"), algorithm: "SHA-256", property: "junitSHA256")
        copy {
          from reportDir
          include "TESTS-TestSuites.xml"
          into new File(outputFilesDir,"junits/unit_"+project.name+"/"+ant.junitSHA256+"/")
        }

        def prop = new Properties()
        def propFile = File.createTempFile("unit_"+project.name,".properties",outputEventsDir) 
        prop.put("event","rawJUnitResult")
        prop.put("bucketName","unit_"+project.name)
        prop.put("bucketType","Unit")
        prop.put("bucketRunMode","n/a")
        prop.put("resultType","normal")
        prop.put("junit","junits/unit_"+project.name+"/"+ant.junitSHA256+"/TESTS-TestSuites.xml")
        def propWriter = new FileWriter(propFile)
        try {
          prop.store(propWriter, null)
        } finally {
          propWriter.close()
        }
      }
    }
    
  }

  task junitReport() {
    finalizedBy publishJunitReport
    ext {
        resultsDir = file("$project.buildDir/libs/test-reports/test/")
        targetDir = file("$project.buildDir/libs/merged-test-reports/test/")
    }
    doLast {
        if(resultsDir.exists()){
          mkdir targetDir
          ant.taskdef(name: 'junitreport', 
                      classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator', 
                      classpath: bnd.get('repo.junitReportTask.path'))

          ant.junitreport(todir: targetDir) {
              fileset(dir: resultsDir, includes: 'TEST-*.xml')
              report(todir: targetDir, format: 'frames')
          }
        }
    }
  }

  test { 
    // Once testing is complete copy 
    finalizedBy junitReport
    
	ignoreFailures = true
	
    //  A number of tests make heavy use of java.util.Random, which can drain the entropy pool of /dev/random on Linux when
    // running on OpenJDK-based distributions. This results in large delays as tests wait for the entropy pool to be repopulated.
    // The fix is thus to ensure we use the pseudorandom entropy pool (/dev/urandom) (which is also valid for Windows/zOS).
    jvmArgs '-Djava.security.egd=file:/dev/urandom'
  }

  
  tasks.withType(JavaCompile).configureEach({
      int javaVersionNumVal = Integer.parseInt(JavaVersion.current().getMajorVersion())
      // javac 20 has a min target of 1.8, so upgrade any 1.7 projects to 1.8 if running on Java 20
      
      if ('1.7'.equals(sourceCompatibility) && javaVersionNumVal >= 20) {
          sourceCompatibility = "1.8"
          targetCompatibility = "1.8"
      }

      if (javaVersionNumVal < 21 && '21'.equals(sourceCompatibility)) {
          javaCompiler = javaToolchains.compilerFor {
              languageVersion = JavaLanguageVersion.of(21)
          }
      }

      // Set the --release compiler flag to keep bootclasspath in sync 
      if(!'off'.equals(bnd.get('javac.args.release'))) {
        def release = sourceCompatibility
        if(sourceCompatibility.startsWith('1.'))
          release = sourceCompatibility.substring(2);
        if('current'.equals(bnd.get('javac.args.release')))
          release = JavaVersion.current().getMajorVersion() 
        options.release = Integer.valueOf(release)
      }
  })

  tasks.withType(Javadoc) {
    doFirst {
      // Starting with JDK 9.0.4 the javadoc compiler started to striclty enforce proper HTML
      // syntax and other breaking changes.  Fixing all of these ocurrances would take far too
      // long and be a poor use of time, so we will disable these checks for JDK9 and up
      options.addBooleanOption('Xdoclint:none', true)
    }
  }
  
}

/**
 * Generate a HTML test report of all unit test results.
 * See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.TestReport.html
 */
task testReport(type: TestReport) {
  // Run after all `test` tasks, so no test results are missing
  mustRunAfter subprojects*.test
  destinationDirectory = cnf.file('generated/testReports/allUnitTests')

  // Include the results from the `test` task in all subprojects
  Test[] tests = subprojects*.test
  ConfigurableFileCollection results = getTestResults()
  for (Test test : tests) {
    results.from(test.getBinaryResultsDirectory())
  }

  doLast {
    // Save test count properties to a file, so they can be loaded by subsequent builds
    userProps.setProperty('tests.total.all', testCountTotal.toString())
    userProps.setProperty('tests.total.failed', failedTestCountTotal.toString())
    userProps.setProperty('tests.total.successful', successfulTestCountTotal.toString())
    userProps.setProperty('tests.total.skipped', skippedTestCountTotal.toString())

    File propsFile = new File('generated.properties')
    userProps.store(propsFile.newWriter(), null)
  }
}

task testResults {
  dependsOn subprojects.test
  dependsOn testReport
}


