/*******************************************************************************
 * Copyright (c) 2019,2023 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

def toolProject = parseBoolean(bnd.get('tool.project', 'false'))
def testProject = parseBoolean(bnd.get('test.project', 'false'))
def fatProject = parseBoolean(bnd.get('fat.project', 'false'))

def publishWlpJarDefault = testProject ? 'true' : 'false'

if (bnd.get('publish.tool.jar', '').empty && !parseBoolean(bnd.get('publish.wlp.jar.disabled', publishWlpJarDefault))) {
    task publishWLPJars(type: Copy) {
        dependsOn jar
        from project.buildDir
        into buildImage.file('wlp/' + bnd.get('publish.wlp.jar.suffix', 'lib'))
        include bnd.get('publish.wlp.jar.include', '*.jar')
        def hasIFIXHeaders = [:]
        def fullVersions = [:]
        if (parseBoolean(bnd.get('publish.wlp.jar.rename', 'true'))) {
            def outerSymbolicName = bnd.get('Bundle-SymbolicName', project.name)
            if (outerSymbolicName != null) {
                int index = outerSymbolicName.indexOf(";")
                if (index != -1) {
                    outerSymbolicName = outerSymbolicName.substring(0, index).trim()
                }
            }

            // store the full version information for the outer project from
            // the projects bnd.bnd file.  
            def outerVersion = bnd.get('bVersion')
            def outerFullVersion = bnd.get('bFullVersion')
            fullVersions.put(outerSymbolicName, outerFullVersion)

            boolean outerFixHeaders = ((!bnd.get('IBM-Interim-Fixes', '').empty) || (!bnd.get('IBM-Test-Fixes', '').empty))
            boolean subBundles = (!bnd.get('-sub', '').empty)

            // iFixed jars should get renamed with a qualifier so they can exist in the filesystem
            // next to the base version of the jar, *except* for jars that are directly
            // referenced in a tool script's classpath...
            if (outerFixHeaders && !subBundles
                    && (!project.name.equals("com.ibm.ws.kernel.boot"))
                    && (!project.name.equals("com.ibm.ws.kernel.boot.archive"))
                    && (!project.name.equals("com.ibm.ws.appclient.boot"))
                    && (!project.name.equals("com.ibm.ws.kernel.boot.cmdline"))) {
                hasIFIXHeaders.put(outerSymbolicName, true)
            }

            if (subBundles) {
                fileTree(dir: projectDir, include: bnd.get('-sub', '')).each { subBndFile ->
                    Properties subBndProperties = new Properties()
                    subBndFile.withInputStream { subBndProperties.load(it) }
                    def symbolicName = subBndProperties.getProperty("Bundle-SymbolicName")
                    if (symbolicName != null) {
                        int index = symbolicName.indexOf(";")
                        if (index != -1) {
                            symbolicName = symbolicName.substring(0, index).trim()
                        }

                        if (outerFixHeaders || subBndProperties.getProperty("IBM-Interim-Fixes") != null
                            || subBndProperties.getProperty("IBM-Test-Fixes") != null) {
                            hasIFIXHeaders.put(symbolicName, true)
                        }

                        // Sub bundles in a project can have a different bundle
                        // version number than the outer project's bnd.bnd file
                        // This logic stores the correctly full bundle version
                        // for sub bundles in a project.
                        def subBVersion = subBndProperties.getProperty('bVersion')
                        if (subBVersion == null || outerVersion.equals(subBVersion)) {
                            fullVersions.put(symbolicName, outerFullVersion)
                        } else {
                            fullVersions.put(symbolicName, subBVersion + outerFullVersion.substring(outerVersion.length()))
                        }
                    }
                }
            }

            // Update each published bundle to have the full version suffix.
            eachFile {
                // If the sub.bnd that built this jar contains iFix headers, rename it with a qualifer.
                def symbolicName = it.getSourceName().substring(0, it.getSourceName().lastIndexOf("."))
                def fullVersion = fullVersions.get(symbolicName)
                if (fullVersion == null) {
                    fullVersion = outerFullVersion
                }

                def selectedSymbolicName = symbolicName
                    
                if (!hasIFIXHeaders.get(selectedSymbolicName)) {
                    it.setName(symbolicName + "_" + fullVersion + ".jar")
                } else {
                    it.setName(symbolicName + "_" + fullVersion + ".${qualifier}.jar")
                }
            }
        }
    }
    assemble.dependsOn publishWLPJars
}

if (bnd.get('publish.wlp.jar.suffix', 'lib').contains('api/ibm') || bnd.get('publish.wlp.jar.suffix', 'lib').contains('spi/ibm')) {
    task publishJavadoc(type: Copy) {
        dependsOn zipJavadoc
        from new File(project.buildDir, 'distributions')
        include bnd.get('publish.wlp.javadoc.include', '*javadoc.zip')
        into rootProject.file("build.image/wlp/" + bnd.get('publish.wlp.jar.suffix', 'lib') + "/javadoc")
        rename '.javadoc.zip', "_${bnd.bVersion}-javadoc.zip"
    }
    assemble.dependsOn publishJavadoc
}

if (!bnd.get('publish.tool.jar', '').empty) {
    task publishToolScripts(type: Copy) {
        enabled !bnd.get('publish.tool.script', '').empty
        dependsOn jar
        from cnf.file('resources/bin')
        into buildImage.file('wlp/bin/' + bnd.get('publish.tool.script.subdir', ''))
        fileMode 0755
        rename 'tool(.*)', bnd.get('publish.tool.script') + '$1'
        filter(org.apache.tools.ant.filters.ReplaceTokens,
                tokens: [TOOL_JAR: bnd.get('publish.tool.script.subdir', '') + 'tools/' + bnd.get('publish.tool.jar', ''),
                        TOOL_SCRIPT: bnd.get('publish.tool.script.subdir', '') + bnd.get('publish.tool.script', ''),
                        TOOL_SCRIPT_DIR_LENGTH: bnd.get('publish.tool.script.dir.length', '5'),
                        TOOL_SCRIPT_RELATIVE: bnd.get('publish.tool.script.relative', '')])
    }

    task publishToolJars(type: Copy) {
        dependsOn jar
        dependsOn publishToolScripts
        from project.buildDir
        into buildImage.file('wlp/bin/' + bnd.get('publish.tool.script.subdir', '') + 'tools')
        include bnd.get('publish.tool.jar', '')
    }
    assemble.dependsOn publishToolJars
}

if (project.file('resources/schemas').exists()) {
    task publishSchemaResources(type: Copy) {
        dependsOn jar
        from project.file('resources/schemas')
        into buildImage.file('wlp/dev/api/ibm/schema')
    }
    assemble.dependsOn publishSchemaResources
}

if (project.file('publish/platform').exists()) {
    task publishPlatformManifests(type: Copy) {
        dependsOn jar
        from project.file('publish/platform')
        into buildImage.file('wlp/lib/platform')
        include '*.mf'
        filter(org.apache.tools.ant.filters.ConcatFilter,
                append: file(cnf.file('resources/IBM-ProductID.txt')))
    }
    assemble.dependsOn publishPlatformManifests

    task publishPlatformFiles(type: Copy) {
        dependsOn publishPlatformManifests
        from project.file('publish/platform')
        into buildImage.file('wlp/lib/platform')
        exclude '*.mf'
    }
    assemble.dependsOn publishPlatformFiles
}

if (project.file('publish/templates').exists()) {
    task publishTemplates(type: Copy) {
        dependsOn jar
        from project.file('publish/templates')
        into buildImage.file('wlp/templates')
    }
    assemble.dependsOn publishTemplates
}

if (project.file('publish/bin').exists()) {
    task publishBinScripts(type: Copy) {
        dependsOn jar
        from project.file('publish/bin')
        into buildImage.file('wlp/bin')
        fileMode 0755
    }
    assemble.dependsOn publishBinScripts
}

if (parseBoolean(bnd.get('publish.wlp.clients', 'false'))) {
    task publishClientScripts(type: Copy) {
        dependsOn jar
        from project.file('publish/clients')
        into buildImage.file('wlp/clients')
    }
    assemble.dependsOn publishClientScripts
}

if (project.file('lib/native').exists()) {
    task publishLibNative(type: Copy) {
        dependsOn jar
        from project.file('lib/native')
        into buildImage.file('wlp/lib/native')
    }
    assemble.dependsOn publishLibNative
}
