/*******************************************************************************
 * Copyright (c) 2021, 2024 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
package io.openliberty.netty.internal.tcp;

import java.util.concurrent.TimeUnit;

import com.ibm.websphere.ras.Tr;
import com.ibm.websphere.ras.TraceComponent;

import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.timeout.IdleStateEvent;
import io.netty.handler.timeout.IdleStateHandler;

/**
 * Channel handler which closes the connection upon receiving {@link IdleStateEvent} events generated by 
 * {@link IdleStateHandler}. 
 */
public class InactivityTimeoutHandler extends IdleStateHandler {
    
    private static final TraceComponent tc = Tr.register(InactivityTimeoutHandler.class, TCPMessageConstants.NETTY_TRACE_NAME, 
            TCPMessageConstants.TCP_BUNDLE);

    public InactivityTimeoutHandler(long readerIdleTime, long writerIdleTime, long allIdleTime, TimeUnit unit) {
        super(readerIdleTime, writerIdleTime, allIdleTime, unit);
    }

    @Override
    protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws Exception{
        // Overriden to call the userEventTriggered of this handler instead of the next to keep the timeout logic contained to one class/handler
        userEventTriggered(ctx, evt);
    }

    @Override
   public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
       if (evt instanceof IdleStateEvent) {
           ctx.close();
           if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
               Tr.debug(tc, "connection closed due to idle timeout: " + ctx.channel());
           }
           return;
       }
       ctx.fireUserEventTriggered(evt);
   }
}
