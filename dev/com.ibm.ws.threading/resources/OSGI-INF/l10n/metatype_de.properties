###############################################################################
# Copyright (c) 2011 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#CMVCPATHNAME com.ibm.ws.threading/resources/OSGI-INF/l10n/metatype.properties
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#
executor.service.name=Verwaltung des Steuerprogramms
executor.service.desc=Definiert Einstellungen f\u00fcr das Standardsteuerprogramm des Liberty-Kernels. Beachten Sie, dass es nur ein einziges Standardsteuerprogramm gibt, das nur f\u00fcr die Liberty-Laufzeitumgebung bestimmt und f\u00fcr die Anwendungen nicht direkt zug\u00e4nglich ist. Anwendungen, die Steuerprogramme konfigurieren und nutzen m\u00fcssen, sollten stattdessen verwaltete Steuerprogramme verwenden.

name=Name
name.desc=Der Name des Standardsteuerprogramms des Liberty-Kernels.

core.threads=Kernthreads
core.threads.desc=Die stabile oder Kernanzahl der Threads, die diesem Executor (Steuerprogramm) zugeordnet werden. Die Anzahl der dem Executor zugeordneten Threads steigt schnell auf diese Zahl an. Wenn dieser Wert kleiner als 0 ist, wird ein Standardwert verwendet. Dieser Standardwert wird basierend auf der Anzahl der Hardware-Threads im System berechnet.

max.threads=Maximale Anzahl Threads
max.threads.desc=Die maximale Anzahl an Threads, die dem Executor (Steuerprogramm) zugeordnet werden k\u00f6nnen. Wenn der Wert gr\u00f6\u00dfer als 0 ist, muss dieser Wert gr\u00f6\u00dfer-gleich dem Wert von coreThreads sein.  Wenn der Wert von maxThreads kleiner-gleich 0 ist, ist die maximale Threadanzahl nicht begrenzt. Die tats\u00e4chliche Anzahl der dem Steuerprogramm zugeordneten Threads wird dynamisch vom Liberty-Kernel bestimmt. Wenn die Threadanzahl nicht beschr\u00e4nkt wird, bedeutet dies nicht, dass die Laufzeitumgebung aktiv sehr viele Threads erstellt. In diesem Fall entscheidet einfach der Liberty-Kernel, wie viele Threads dem Steuerprogramm zugeordnet werden, ohne dass eine Obergrenze definiert wird.

keep.alive=Keepalive-Zeit
keep.alive.desc=Gibt an, wie lange ein inaktiver Thread im Pool bleiben darf, bevor er beendet werden kann.
steal.policy=Richtlinie f\u00fcr Arbeits\u00fcbernahme
steal.policy.desc=Die zu verwendende Richtlinie f\u00fcr Arbeits\u00fcbernahme. Die Optionen f\u00fcr diese Richtlinie bestimmen, wie Arbeiten in die Warteschlange eingereiht werden und wie Threads Arbeiten aus der Warteschlange abrufen.
steal.policy.strict=Alle Threads, die Arbeiten in einem lokalen Arbeitsstapel generieren. Threads, die dem Executor zugeordnet sind, \u00fcbernehmen Arbeiten aus anderen Threads, wenn der lokale Arbeitsstapel abgearbeitet ist.
steal.policy.local=f\u00fcr Arbeiten, die von Threads generiert werden, die dem Executor nicht zugeordnet sind, wird eine globale Arbeitswarteschlange verwendet. Arbeiten, die von Threads generiert werden, die dem Executor zugeordnet sind, werden in einem lokalen Arbeitsstapel abgelegt. Der Arbeitsstapel geh\u00f6rt dem generierenden Thread, sofern er nicht von einem anderen Thread \u00fcbernommen wird. Threads, die dem Executor zugeordnet sind, \u00fcbernehmen Arbeiten, die anderen Threads zugeordnet sind, wenn der lokale Arbeitsstapel leer ist und keine Arbeiten in der globalen Arbeitswarteschlange enthalten sind.
steal.policy.never=Eine globale Arbeitswarteschlange wird verwendet, um Threads, die dem Executor zugeordnet sind, mit Arbeiten zu versorgen. Es findet keine Arbeits\u00fcbernahme statt.

reject.policy=Richtlinie f\u00fcr abgelehnte Ausf\u00fchrung
reject.policy.desc=Die Richtlinie, die eingesetzt wird, wenn der Executor nicht in der Lage ist, Arbeit f\u00fcr die Ausf\u00fchrung bereitzustellen.
reject.policy.abort=Ausnahme ausl\u00f6sen
reject.policy.caller=Arbeiten sofort im Thread des Aufrufenden ausf\u00fchren
