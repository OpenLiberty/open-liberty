###############################################################################
# Copyright (c) 2011 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#CMVCPATHNAME com.ibm.ws.threading/resources/OSGI-INF/l10n/metatype.properties
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#
executor.service.name=Gestione executor
executor.service.desc=Definisce le impostazioni per l'executor predefinito del kernel Liberty. Notare che esiste sempre un solo executor predefinito, per l'esclusivo utilizzo da parte del runtime Liberty e non \u00e8 direttamente accessibile dalle applicazioni. Le applicazioni che necessitano di configurare e utilizzare gli executor devono invece utilizzare gli executor gestiti.

name=Nome
name.desc=Il nome dell'executor predefinito del kernel Liberty.

core.threads=Thread principali
core.threads.desc=Il numero di thread principali o con stato stabile da associare all'executor. Il numero di thread associati all'executor raggiunger\u00e0 rapidamente questo valore. Se questo valore \u00e8 inferiore a 0, si utilizzer\u00e0 un valore predefinito. Questo valore predefinito si calcola in base al numero di thread hardware sul sistema.

max.threads=Numero massimo di thread
max.threads.desc=Il numero massimo di thread che pu\u00f2 essere associato all'executor. Se maggiore di 0, questo valore deve essere superiore o uguale al valore di coreThreads. Se il valore maxThreads \u00e8 inferiore o uguale a 0, il numero massimo di thread \u00e8 illimitato.  Tenere presente che il numero effettivo di thread associati all'executor viene determinato dinamicamente dal kernel Liberty, quindi lasciare il valore per il numero massimo di thread illimitato non implica che il runtime creer\u00e0 grandi quantit\u00e0 di thread, semplicemente consentir\u00e0 al kernel Liberty di decidere quanti thread associare all'executor senza avere un limite massimo definito.

keep.alive=Tempo keepalive
keep.alive.desc=L'intervallo di tempo durante cui si mantiene un thread inattivo nel pool prima di consentirne la chiusura.
steal.policy=Politica di work-stealing
steal.policy.desc=La politica di work-stealing da impiegare. Le opzioni per questa politica determinano la modalit\u00e0 di accodamento del lavoro e la modalit\u00e0 in base alla quale i thread ottengono il lavoro accodato.
steal.policy.strict=Tutti i thread che generano lavoro sono proprietari di una pila di lavori locale. I thread associati all'executor rilevano il lavoro da altri thread, quando si esaurisce la pila di lavori locale.
steal.policy.local=Si utilizza una coda di lavori globale per il lavoro che viene generato da thread non associati all'executor. Il lavoro generato dai thread associati all'executor viene inserito in una pila di lavori locale. Il thread generatore \u00e8 il proprietario di questa pila di lavori, a meno che non ne assuma la propriet\u00e0 un altro thread in modo illegittimo. I thread associati all'executor rilevano il lavoro associato ad altri thread, se la pila di lavori locale \u00e8 vuota e non sono presenti lavori nella coda di lavori globale.
steal.policy.never=Si utilizza una coda di lavori globale per fornire lavoro ai thread associati all'executor. Non si verificher\u00e0 alcuna assegnazione non autorizzata.

reject.policy=Politica di esecuzione rifiutata
reject.policy.desc=La politica da impiegare quando l'executor non \u00e8 in grado di organizzare il lavoro per l'esecuzione.
reject.policy.abort=Generare un'eccezione.
reject.policy.caller=Eseguire immediatamente il lavoro sul thread del chiamante.
