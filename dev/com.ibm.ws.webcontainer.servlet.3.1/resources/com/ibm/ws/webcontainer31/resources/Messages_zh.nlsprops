###############################################################################
# Copyright (c) 1997, 2001 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
# cmvc_en_version_level=
#
#CMVCPATHNAME 
#COMPONENTPREFIX SRVE
#COMPONENTNAMEFOR SRVE Servlet Engine
#ISMESSAGEFILE TRUE
#NLS_MESSAGEFORMAT_VAR
#NLS_ENCODING=UNICODE

failed.to.create.httpupgradehandler=SRVE9000E: \u672a\u80fd\u521b\u5efa HttpUpgradeHandler\uff1a{0}\u3002\u8bf7\u786e\u4fdd\u5b83\u5177\u6709\u7f3a\u7701\u6784\u9020\u51fd\u6570\u5e76\u4e14\u53ef\u5b9e\u4f8b\u5316\u3002
failed.to.create.httpupgradehandler.explanation=\u672a\u80fd\u521b\u5efa HttpUpgradeHandler\u3002
failed.to.create.httpupgradehandler.useraction=\u8bf7\u68c0\u67e5 FFDC \u65e5\u5fd7\u4ee5\u4e86\u89e3\u6709\u5173\u6b64\u9519\u8bef\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002
# --------------------------------
servlet.31.not.in.use=SRVE9001E: servlet-3.1 \u529f\u80fd\u90e8\u4ef6\u672a\u5728\u4f7f\u7528\u4e2d\u3002
servlet.31.not.in.use.explanation=servlet-3.1 \u529f\u80fd\u90e8\u4ef6\u672a\u4f7f\u7528\u3002\u53ef\u80fd\u5df2\u4f7f\u7528\u5148\u524d\u7248\u672c\u7684 servlet\u3002
servlet.31.not.in.use.useraction=\u5411 server.xml \u6587\u4ef6\u6dfb\u52a0 servlet-3.1 \u529f\u80fd\u90e8\u4ef6\u3002
# --------------------------------
# Translation note: {0} = operation being performed, {1} = the listener that called the operation, {2} = the application that contains the listener: SRVE9002E: You cannot start this operation from a programmatically added listener when using servlet-3.1 feature. (Operation: {0} | Listener: {1} | Application: {2})
Unsupported.op.from.servlet.context.listener.31=SRVE9002E: \u4f7f\u7528 servlet-3.1 \u529f\u80fd\u90e8\u4ef6\u65f6\uff0c\u4e0d\u80fd\u4ece\u901a\u8fc7\u7a0b\u5e8f\u6dfb\u52a0\u7684\u4fa6\u542c\u5668\u542f\u52a8\u6b64\u64cd\u4f5c\u3002\uff08\u64cd\u4f5c\uff1a{0} | \u4fa6\u542c\u5668\uff1a{1} | \u5e94\u7528\u7a0b\u5e8f\uff1a{2}\uff09
Unsupported.op.from.servlet.context.listener.31.explanation=\u4e0d\u80fd\u4ece\u901a\u8fc7\u7a0b\u5e8f\u6dfb\u52a0\u7684\u4fa6\u542c\u5668\u542f\u52a8\u67d0\u4e9b\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5728\u6807\u8bb0\u5e93\u63cf\u8ff0\u7b26 (TLD) \u4e2d\u5b9a\u4e49\u8fd9\u4e9b\u64cd\u4f5c\u65f6\u6ca1\u6709\u7528\u4e8e\u9650\u5236\u5b83\u4eec\u7684\u542f\u52a8\u7684\u914d\u7f6e\u9009\u9879\u3002
Unsupported.op.from.servlet.context.listener.31.useraction=\u8bf7\u4f7f\u7528\u6ce8\u91ca\u6216\u5728 web.xml \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4fa6\u542c\u5668\u4ee5\u5141\u8bb8\u542f\u52a8\u6b64\u65b9\u6cd5\u3002
# --------------------------------
# 
# Notes for translation:
# {0} is the application name
handlerClass.is.null==SRVE9003E: \u968f Web \u5e94\u7528\u7a0b\u5e8f\u4f20\u9012\u7684 HttpUpgradeHandler \u5bf9\u8c61\u4e3a\u7a7a\uff1a{0}\u3002
handlerClass.is.null.explanation=\u65e0\u6cd5\u5347\u7ea7\u8be5\u8bf7\u6c42\uff0c\u56e0\u4e3a\u4f20\u9012\u7684 HttpUpgradeHandler \u5bf9\u8c61\u4e3a\u7a7a\u3002
handlerClass.is.null.useraction= \u8bf7\u786e\u4fdd\u63d0\u4f9b\u4e86\u6b63\u786e\u7684 HttpUpgradeHandler \u5bf9\u8c61\u3002
# --------------------------------
# -------------------------------- -------------------------------- --------------------------------
# Following messages are added for Read and Write Listener per Java Servlet Specification 
# -------------------------------- -------------------------------- --------------------------------
readlistener.is.null=SRVE9004E: \u5c1d\u8bd5\u8bbe\u7f6e ReadListener \u5931\u8d25\uff0c\u56e0\u4e3a ReadListener \u5bf9\u8c61\u4e3a\u7a7a\u3002
readlistener.is.null.explanation=\u4f20\u9012\u81f3 setReadListener API \u7684\u53ef\u53d8\u53c2\u6570\u5fc5\u987b\u4e3a\u6709\u6548 readListener \u5bf9\u8c61\u3002
readlistener.is.null.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
writelistener.is.null=SRVE9005E: \u5c1d\u8bd5\u8bbe\u7f6e WriteListener \u5931\u8d25\uff0c\u56e0\u4e3a WriteListener \u5bf9\u8c61\u4e3a\u7a7a\u3002
writelistener.is.null.explanation=\u4f20\u9012\u81f3 WriteListener API \u7684\u53ef\u53d8\u53c2\u6570\u5fc5\u987b\u4e3a\u6709\u6548 writeListener \u5bf9\u8c61\u3002
writelistener.is.null.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
readlistener.async.not.started=SRVE9006E: \u5c1d\u8bd5\u8bbe\u7f6e ReadListener \u5931\u8d25\uff0c\u56e0\u4e3a\u5173\u8054\u8bf7\u6c42\u6ca1\u6709\u542f\u52a8\u5f02\u6b65\u6216\u8bf7\u6c42\u672a\u5347\u7ea7\u3002
readlistener.async.not.started.explanation=\u4ec5\u5f53\u542f\u52a8\u5f02\u6b65\u6216\u8c03\u7528 UpgradeHandler \u7684 init \u65b9\u6cd5\u540e\uff0c\u624d\u80fd\u5bf9\u8bf7\u6c42\u8bbe\u7f6e ReadListener\u3002
readlistener.async.not.started.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
writelistener.async.not.started=SRVE9007E: \u5c1d\u8bd5\u8bbe\u7f6e WriteListener \u5931\u8d25\uff0c\u56e0\u4e3a\u5173\u8054\u8bf7\u6c42\u6ca1\u6709\u542f\u52a8\u5f02\u6b65\u6216\u8bf7\u6c42\u672a\u5347\u7ea7\u3002
writelistener.async.not.started.explanation=\u4ec5\u5f53\u542f\u52a8\u5f02\u6b65\u6216\u8c03\u7528 UpgradeHandler \u7684 init \u65b9\u6cd5\u540e\uff0c\u624d\u80fd\u5bf9\u8bf7\u6c42\u8bbe\u7f6e WriteListener\u3002
writelistener.async.not.started.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
readlistener.already.started=SRVE9008E: \u5c1d\u8bd5\u8bbe\u7f6e ReadListener \u5931\u8d25\uff0c\u56e0\u4e3a\u5df2\u8bbe\u7f6e ReadListener\u3002
readlistener.already.started.explanation=\u4e0d\u80fd\u591a\u6b21\u8bbe\u7f6e ReadListener\u3002
readlistener.already.started.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
writelistener.already.started=SRVE9009E: \u5c1d\u8bd5\u8bbe\u7f6e WriteListener \u5931\u8d25\uff0c\u56e0\u4e3a\u5df2\u8bbe\u7f6e WriteListener\u3002
writelistener.already.started.explanation=\u4e0d\u80fd\u591a\u6b21\u8bbe\u7f6e WriteListener\u3002
writelistener.already.started.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
read.failed.isReady.false=SRVE9010E: \u5c1d\u8bd5\u8bfb\u53d6\u5931\u8d25\uff0c\u56e0\u4e3a isReady API \u8fd4\u56de false\u3002
read.failed.isReady.false.explanation= \u5982\u679c isReady \u8fd4\u56de false\uff0c\u90a3\u4e48\u8c03\u7528 read \u65b9\u6cd5\u662f\u975e\u6cd5\u64cd\u4f5c\u3002
read.failed.isReady.false.useraction= \u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
# -------------------------------- -------------------------------- --------------------------------
# Following messages for read in SRTUpgradeInputStream31 and write in SRTOutputStream31 per OutputStream Java doc
# -------------------------------- -------------------------------- --------------------------------
read.write.bytearray.null=SRVE9011E: \u5c1d\u8bd5\u4ece InputStream \u8bfb\u53d6\u6216\u5199\u5165\u81f3 OutputStream \u5931\u8d25\uff0c\u56e0\u4e3a\u53ef\u53d8\u53c2\u6570 byte[] \u4e3a\u7a7a\u3002
read.write.bytearray.null.explanation=\u4f20\u9012\u81f3\u8bfb\u53d6\u6216\u5199\u5165 API \u7684\u53ef\u53d8\u53c2\u6570 byte[] \u4e0d\u5f97\u4e3a\u7a7a\u3002
read.write.bytearray.null.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
# 
# Notes for translation:
# {0} is the offset as number
# {1} is the length as number
# {2} is the array length as number
read.write.offset.length.bytearraylength= SRVE9012E: \u5c1d\u8bd5\u8bfb\u53d6\u6216\u5199\u5165\u5931\u8d25\uff0c\u56e0\u4e3a\u67d0\u4e2a\u53ef\u53d8\u53c2\u6570\u504f\u79fb\u91cf {0} \u6216\u957f\u5ea6 {1} \u4e3a\u8d1f\uff0c\u6216\u8005\u504f\u79fb\u91cf\u4e0e\u957f\u5ea6\u4e4b\u548c\u5927\u4e8e\u63d0\u4f9b\u7684 byte[] \u957f\u5ea6\uff1a{2}\u3002
read.write.offset.length.bytearraylength.explanation= \u53ef\u53d8\u53c2\u6570\u504f\u79fb\u91cf\u4e3a\u8d1f\uff0c\u957f\u5ea6\u4e3a\u8d1f\uff0c\u6216\u8005\u957f\u5ea6\u5927\u4e8e byte[].length \u4e0e\u504f\u79fb\u91cf\u4e4b\u5dee\u3002
read.write.offset.length.bytearraylength.useraction=\u8bf7\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u5e76\u9a8c\u8bc1\u4e3a\u8bfb\u53d6\u6216\u5199\u5165 API \u63d0\u4f9b\u7684\u504f\u79fb\u91cf\u503c\u662f\u5426\u975e\u8d1f\u3002\u786e\u4fdd\u4e3a\u8bfb\u53d6 API \u63d0\u4f9b\u7684\u957f\u5ea6\u503c\u975e\u8d1f\u3002\u8fd8\u5e94\u786e\u4fdd\u63d0\u4f9b\u7684\u957f\u5ea6\u503c\u5927\u4e8e byte[] \u957f\u5ea6\u51cf\u53bb\u6240\u63d0\u4f9b\u504f\u79fb\u91cf\u503c\u7684\u5dee\u3002
# --------------------------------
# -------------------------------- --------------------------------
# Following SEVERE messages for SRTInputStream31
# -------------------------------- --------------------------------
# 
# Notes for translation:
# {0} is the exception as String
setReadListener.initialread.failed= SRVE9013E: \u5bf9\u5df2\u5347\u7ea7\u8bf7\u6c42\u8bbe\u7f6e ReadListener \u671f\u95f4\uff0c\u521d\u59cb\u8bfb\u53d6\u65f6\u53d1\u751f\u4e86\u5f02\u5e38\uff1a{0}
setReadListener.initialread.failed.explanation=\u8bbe\u7f6e ReadListener \u671f\u95f4\uff0c\u4fa6\u542c\u5668\u5c1d\u8bd5\u8bfb\u53d6\u4f46\u5931\u8d25\u3002
setReadListener.initialread.failed.useraction=\u8bf7\u67e5\u770b JVM \u65e5\u5fd7\u4ee5\u67e5\u627e\u8be5\u5f02\u5e38\u3002
# --------------------------------
# -------------------------------- --------------------------------
# Following SEVERE messages for Session
# -------------------------------- --------------------------------
# 
# Notes for translation:
# {0} is the path as String
changeSessionId.no.session.associated.with.request= SRVE9014E: \u5c1d\u8bd5\u66f4\u6539\u4f1a\u8bdd\u6807\u8bc6\u5931\u8d25\uff0c\u56e0\u4e3a\u9488\u5bf9 {0} \u7684\u8bf7\u6c42\u6ca1\u6709\u4efb\u4f55\u5173\u8054\u4f1a\u8bdd
changeSessionId.no.session.associated.with.request.explanation=\u8981\u66f4\u6539\u8bf7\u6c42\u7684\u4f1a\u8bdd\u6807\u8bc6\uff0c\u8bf7\u786e\u4fdd\u6240\u4f7f\u7528\u7684\u8bf7\u6c42\u5177\u6709\u5173\u8054\u4f1a\u8bdd\u3002
changeSessionId.no.session.associated.with.request.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# --------------------------------
# -------------------------------- --------------------------------
# Following SEVERE messages for AysncContext31Impl
# -------------------------------- --------------------------------
# 
# Notes for translation:
# Do not translate the following terms: AsyncContext.dispatch(),AsyncContext.complete(),AsyncContext.getRequest(),AsyncContext.getResponse(), IllegalStateException, complete(), dispatch()
asynccontext.getRequestResponse.illegalstateexception= SRVE9015E: \u6267\u884c AsyncContext.dispatch() \u6216 AsyncContext.complete() \u540e\u65e0\u6cd5\u83b7\u53d6\u8bf7\u6c42\u6216\u54cd\u5e94\u5bf9\u8c61\u3002
asynccontext.getRequestResponse.illegalstateexception.explanation= \u5728 Servlet 3.1 \u4e2d\uff0c\u5982\u679c\u5728\u5f02\u6b65\u5faa\u73af\u4e2d\u8c03\u7528\u4e86 complete() \u6216\u4efb\u4f55 dispatch() \u65b9\u6cd5\uff0c\u90a3\u4e48 AsyncContext.getRequest() \u548c AsyncContext.getResponse() \u5fc5\u987b\u629b\u51fa IllegalStateException\u3002
asynccontext.getRequestResponse.illegalstateexception.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# ---------------------------------
#
# NOTE: Message number SRVE9016E: is used in com.ibm.ws.webcontainer-8.0, see LShimMessages.
#       Skip to message number SRVE9017 for next message. 
# 
# --------------------------------
# --------------------------------
stream.is.closed.no.read.write= SRVE9017E: \u5c1d\u8bd5\u8bfb\u53d6\u6216\u5199\u5165\u5931\u8d25\uff0c\u56e0\u4e3a\u6d41\u5df2\u5173\u95ed\u3002
stream.is.closed.no.read.write.explanation=\u9488\u5bf9 OutputStream \u5bf9\u8c61\u7684\u5199 API \u548c\u9488\u5bf9 InputStream \u5bf9\u8c61\u7684\u8bfb API \u58f0\u660e\u6d41\u5173\u95ed\u65f6\u53ef\u80fd\u4f1a\u629b\u51fa IOException\u3002
stream.is.closed.no.read.write.useraction=\u8bf7\u6839\u636e\u9519\u8bef\u8bf4\u660e\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002
# -----------------------------------------------
# -------------------------------- --------------------------------
# Following SEVERE messages for AysncContext31Impl
# -------------------------------- --------------------------------
#
# Notes for translation:
# Do not translate the following terms: content-length
post.body.contains.less.bytes.than.specified=SRVE0216E: POST \u4e3b\u4f53\u5305\u542b\u7684\u5b57\u8282\u6bd4\u5185\u5bb9\u957f\u5ea6\u6307\u5b9a\u7684\u5b57\u8282\u8981\u5c11\u3002
post.body.contains.less.bytes.than.specified.explanation=\u5165\u5c40\u8bf7\u6c42\u53ef\u80fd\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u6216\u56e0\u4e3a\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u7edc\u9519\u8bef\u800c\u635f\u574f\u3002
post.body.contains.less.bytes.than.specified.useraction=\u8bf7\u67e5\u770b\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u7edc\u4ee5\u786e\u5b9a\u8bf7\u6c42\u88ab\u622a\u65ad\u7684\u539f\u56e0\u3002
# --------------------------------
#
# NOTE: Message number SRVE9018E is used as SRV0216E in com.ibm.ws.webcontainer-8.0, see Messages.nlsprops.
#       Skip to message number SRVE9018 for next message. 
# 
# --------------------------------
# 
# Notes for translation:
# {0} WriteListener class name
# 
blocking.write.not.allowed=SRVE0918E: \u7531\u4e8e\u975e\u963b\u585e I/O \u5df2\u7531\u6ce8\u518c WriteListener [{0}] \u7684\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\uff0c\u4e0d\u5141\u8bb8\u5c1d\u8bd5\u6267\u884c\u963b\u585e\u5199\u5165\u3002
blocking.write.not.allowed.explanation=\u7531\u4e8e\u975e\u963b\u585e I/O \u5df2\u542f\u52a8\uff0c\u65e0\u6cd5\u5b8c\u6210\u8bf7\u6c42\u7684\u963b\u585e\u5199\u64cd\u4f5c\u3002
blocking.write.not.allowed.useraction=\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u4ee5\u786e\u5b9a\u6267\u884c\u963b\u585e\u5199\u64cd\u4f5c\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u53ef\u80fd\u5728\u6ce8\u518c WriteListener \u540e\u4ece servlet \u6267\u884c\u963b\u585e\u5199\u64cd\u4f5c\uff0c\u6216\u53ef\u80fd\u5728\u8c03\u7528 isReady() API \u540e\u4ece WriteListener \u6267\u884c\u53e6\u4e00\u4e2a\u963b\u585e\u5199\u64cd\u4f5c\u3002\u786e\u5b9a\u963b\u585e\u5199\u64cd\u4f5c\u540e\uff0c\u66f4\u6539\u5e94\u7528\u7a0b\u5e8f\u4ee5\u786e\u4fdd\u5728\u6ce8\u518c WriteListener \u671f\u95f4\u548c/\u6216\u8c03\u7528 isReady() \u540e\u6267\u884c\u6b64\u5199\u64cd\u4f5c\u3002
# --------------------------------
# 
# Notes for translation:
# {0} WriteListener class name
# {1} is the Exception String
#
writeListener.onError.failed=SRVE0919E: \u5e94\u7528\u7a0b\u5e8f WriteListener [{0}] onError() API \u671f\u95f4\u53d1\u751f\u5f02\u5e38\uff0c\u5f02\u5e38 [{1}]
writeListener.onError.failed.explanation= \u5e94\u7528\u7a0b\u5e8f WriteListener onError() API \u671f\u95f4\u53d1\u751f\u5f02\u5e38\u3002
writeListener.onError.failed.useraction=\u67e5\u770b\u65e5\u5fd7\u4ee5\u786e\u5b9a\u4ece onError() API \u7684\u5e94\u7528\u7a0b\u5e8f\u5b9e\u73b0\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u6b64\u95ee\u9898\u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u53d1\u751f I/O \u5f02\u5e38\uff0c\u90a3\u4e48 onError() API \u65e0\u6cd5\u5199\u5165\u8f93\u51fa\u3002
# --------------------------------
 
