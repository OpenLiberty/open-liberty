###############################################################################
# Copyright (c) 2013, 2022 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#CMVCPATHNAME com.ibm.ws.security/resources/com/ibm/ws/security/openidconnect/clients/common/resources/OidcClientMessages.nlsprops
#COMPONENTPREFIX CWWKS
#COMPONENTNAMEFOR WebSphere Application Server OpenID Connect Security
#ISMESSAGEFILE TRUE
#NLS_MESSAGEFORMAT_VAR
#NLS_ENCODING=UNICODE
# -------------------------------------------------------------------------------------------------
# Message prefix block: CWWKS1700 - CWWKS1750
# AND:  CWWKS1520 - CWWKS1599
# BEWARE: Due to code refactoring, some of these messages are also used in the openidconnect.client bundle. Check there too before using or
# altering any of these messages.


# used by clients project
OIDC_CLIENT_AUTHORIZE_ERR=CWWKS1702E: The OpenID Connect client [{0}] with encoding [{2}] cannot continue to process the request due to [{1}].
OIDC_CLIENT_AUTHORIZE_ERR.explanation=The OpenID Connect client (relying party or RP) encountered an error when processing a request.  The error was most likely an encoding error.  The reason for the error is shown after the message. 
OIDC_CLIENT_AUTHORIZE_ERR.useraction=Retry the request with different OpenID Connect client configuration attributes such as client id, scope.  See the user action for the error that appears after this error.


#do not translate enforceHTTPS

# used_by_client_project and clients project IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN THE OTHER BUNDLE!
# social also uses this and it does not have the enforceHTTPS attribute.
#do not translate enforceHTTPS
OIDC_CLIENT_URL_PROTOCOL_NOT_HTTPS=CWWKS1703E: The OpenID Connect client requires SSL (HTTPS) but the OpenID Connect provider URL is HTTP: [{0}]. Update the configuration to use an HTTPS URL, or use the OpenID Connect Client feature and set enforceHTTPS to false. 
OIDC_CLIENT_URL_PROTOCOL_NOT_HTTPS.explanation=The OpenID Connect client (relying party or resource server) requires SSL (HTTPS) but the OpenID Connect provider (OP) URL protocol specified in the OpenID Connect client configuration is not HTTPS.
OIDC_CLIENT_URL_PROTOCOL_NOT_HTTPS.useraction=Do one of the following: First, ensure that the OpenID Connect provider supports SSL. If the OpenID Connector provider does not support SSL, use the OpenID Connect Client feature and set enforceHTTPS to false in the OpenID Connect Client feature configuration.

# unused, but present in both bundles.  IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES
OIDC_CLIENT_RESPONSE_STATE_VERIFY_ERR=CWWKS1704E: The current state [{0}] for the OpenID Connect client [{2}] and the state parameter [{1}] in the response from the OpenID Connect provider do not match.  This condition is not allowed.
OIDC_CLIENT_RESPONSE_STATE_VERIFY_ERR.explanation=The OpenID Connect client (relying party or RP) has sent a request to an OpenID Connect provider (OP) and the OP has sent back a response with a state parameter does not match the state of the RP at the time it was sent. The OP must include in the response the same state as was sent.  The state is used in this manner to prevent cross-site request forgery. 
OIDC_CLIENT_RESPONSE_STATE_VERIFY_ERR.useraction=Ensure that your OP URL is correct. Check the logs on your OP to ensure that it has received the request.

# This is not in use any more, but present in both bundles.  IF YOU CHANGE THIS YOU MUST DUPLICATE IN BOTH BUNDLES
OIDC_CLIENT_MISSING_PRINCIPAL_ERR=CWWKS1705E: The OpenID Connect client [{0}] failed to authenticate the ID token because a subject identifier was not included in the token. 
OIDC_CLIENT_MISSING_PRINCIPAL_ERR.explanation=In order to authenticate an ID token, the OpenID Connect client (relying party or RP) must have a subject identifier. The ID token received in the response from OpenID Connect provider (OP) did not contain a subject identifier, so authentication failed. 
OIDC_CLIENT_MISSING_PRINCIPAL_ERR.useraction=Ensure that the OpenID Connect provider (OP) returns an ID token that includes a subject identifier.

#used_by_client_project and clients project. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_IDTOKEN_VERIFY_ERR=CWWKS1706E: The OpenID Connect client [{1}] failed to validate the ID token due to [{0}].
OIDC_CLIENT_IDTOKEN_VERIFY_ERR.explanation=The OpenID Connect client (relying party or RP) cannot validate the ID token successfully. This might have been caused by a failure in the process of required claims validation. Some of the ID token required claims include issuer, audience, issued time. 
OIDC_CLIENT_IDTOKEN_VERIFY_ERR.useraction=Ensure that OpenID Connect client (RP) system clock is in sync with OpenID Connect provider (OP) system clock (in case they are on two different systems). Also see the user action for the error that appears after this error.

#used_by_client_project and clients projects. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_HTTPS_WITH_SSLCONTEXT_NULL=CWWKS1707E: The OpenID Connect client [{1}] was unable to create an SSL context due to [{0}]. Ensure that your SSL feature is properly configured.
OIDC_CLIENT_HTTPS_WITH_SSLCONTEXT_NULL.explanation=The OpenID Connect client (relying party or resource server) configuration is configured to use the HTTPS scheme, but an HTTPS connection could not be established. The SSL feature may not be enabled. The keyStore element may be missing or incorrectly specified.  
OIDC_CLIENT_HTTPS_WITH_SSLCONTEXT_NULL.useraction=Ensure that you have the correct SSL information in the server.xml. See the user action for the error that appears before this message.

#used_by_clients
OIDC_CLIENT_TOKEN_REQUEST_FAILURE=CWWKS1708E: The OpenID Connect client [{1}] is unable to contact the OpenID Connect provider at [{2}] to receive an ID token due to [{0}].
OIDC_CLIENT_TOKEN_REQUEST_FAILURE.explanation=The OpenID Connect client (relying party or RP) failed to obtain an ID token from the OpenID Connect provider (OP) because a connection could not be established with the provider. The OP might not have been available at the time of the request, the request might not have been directed to a valid endpoint, or there might be some configuration mismatch between the OP and the RP. The reason for the error appears after the message.
OIDC_CLIENT_TOKEN_REQUEST_FAILURE.useraction=Check the server configuration to make sure the configured token endpoint URL is a valid URL and points to the token endpoint of an active OpenID Connect provider. See the actions for the error displayed after this message.


# used by clients
OIDC_CLIENT_INVALID_HTTP_RESPONSE=CWWKS1709E: The OpenID Connect client [{1}] encountered an error while processing the HTTP response from the OpenID Connect provider due to [{0}].
OIDC_CLIENT_INVALID_HTTP_RESPONSE.explanation=The OpenID Connect client (relying party or resource server) received a response from the OpenID Connect provider (OP), but an error occurred while the relying party or the resource server was processing the response. The reason for the error appears after the message.
OIDC_CLIENT_INVALID_HTTP_RESPONSE.useraction=See the actions for the error displayed after this message.


#used_by_client_project, present in clients.common bundle. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OAUTH_REQUEST_ACCESS_DENIED=CWWKS1710E: The OpenID Connect request has been denied by the user, or another error occurred that resulted in denial of the request.
OAUTH_REQUEST_ACCESS_DENIED.explanation=The user has either denied the OpenID Connect request by canceling the request on the scope consent form, or some other error has occurred that has denied access to the OpenID Connect request.
OAUTH_REQUEST_ACCESS_DENIED.useraction=The user must allow the OpenID Connect provider to share the scopes that the client requires in order for the OpenID Connect request to succeed. If the user approved the request, check the logs on the OP for any additional errors.

#1711 is used by client bundle, don't use here.

#
#used by clients project
OIDC_CLIENT_IDTOKEN_REQUEST_FAILURE=CWWKS1712E: The OpenID Connect client [{0}] did not receive an ID token from the OpenID Connect provider [{1}].
OIDC_CLIENT_IDTOKEN_REQUEST_FAILURE.explanation=The OpenID Connect client (relying party or RP) failed to obtain an ID token from the OpenID Connect provider (OP). The OP might not have been available at the time of the request, the request might not have been directed to a valid endpoint, or there might be some configuration mismatch between the OP and the RP. 
OIDC_CLIENT_IDTOKEN_REQUEST_FAILURE.useraction=Check the server configuration to make sure the configured token endpoint URL is a valid URL and points to the token endpoint of an active OpenID Connect provider. Also see the actions for the errors displayed before this message.

# used by clients
OIDC_CLIENT_REQUEST_MISSING_OPENID_SCOPE=CWWKS1713E: The OpenID Connect client [{0}] request requires [openid] scope but the scope set [{1}] specified in the OpenID Connect client configuration is missing the required scope.
OIDC_CLIENT_REQUEST_MISSING_OPENID_SCOPE.explanation=The OpenID Connect client requests require an [openid] scope to be set and if the OpenID Connect client configuration is missing this scope, then the requests will fail.
OIDC_CLIENT_REQUEST_MISSING_OPENID_SCOPE.useraction=Make sure to have the required scope [openid] specified in the OpenID Connect client configuration.

# used by clients project
OIDC_CLIENT_REQUEST_NONCE_FAILED=CWWKS1714E: The OpenID Connect client [{0}] enabled nonce but the nonce verification failed. The nonce [{1}] in the token does not match the nonce that was specified in the request to the OpenID Connect provider.
OIDC_CLIENT_REQUEST_NONCE_FAILED.explanation=OpenID Connect client requests require the nonce to be handled properly during the request flow to mitigate replay attacks. The nonce that is included in the token does not match the nonce that is associated with this request, therefore the request is not valid.
OIDC_CLIENT_REQUEST_NONCE_FAILED.useraction=Ensure that the OpenID Connect provider generates tokens using the nonce that is specified in the initial OpenID Connect client request.

# 1715, 16, 17, 18, 19, 20, 21 are used in client bundle, do not use here.

# used by clients proj
PROPAGATION_TOKEN_MISSING_USERID=CWWKS1722E: The resource server failed the authentication request because the access token does not contain the claim [{0}] specified by the [{1}] attribute.
PROPAGATION_TOKEN_MISSING_USERID.explanation=The provided access token does not contain the specified claim and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_MISSING_USERID.useraction=Do one of the following. 1)Verify that the OpenID Connect client configuration specifies the correct claim name 2)Verify that the OpenID Connect provider (OP) emits the access token with the specified claim.


# PRESENT IN CLIENT AND CLIENTS.COMMON BUNDLE. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
# PROPAGATION_TOKEN_USERINFO_ISS_ERROR=CWWKS1728E: The resource server failed the authentication request because the issuerIdentifier [{0}] in the configuration does not match the "iss" claim [{1}] in the UserInfo.
# PROPAGATION_TOKEN_USERINFO_ISS_ERROR.explanation=The provided access token cannot be verified because the "iss" claim in the UserInfo does not match the issuerIdentifier configuration attribute, and the runtime cannot continue with the authentication process.
# PROPAGATION_TOKEN_USERINFO_ISS_ERROR.useraction=Verify that the OpenID Connect client configuration has the issuerIdentifier that matches the "iss" claim in the UserInfo.

#unused but present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
PROPAGATION_TOKEN_VALIDATION_MISMATCH=CWWKS1729E: The resource server failed the authentication request because the validation method [{0}] was not appropriate for the validation endpoint URL [{1}].
PROPAGATION_TOKEN_VALIDATION_MISMATCH.explanation=The validationEndpointUrl specified in the OpenID Connect client configuration is not the appropriate endpoint for the specified validationMethod.
PROPAGATION_TOKEN_VALIDATION_MISMATCH.useraction=Update the OpenID Connect client configuration by either changing the validationMethod or the validationEndpointUrl.
 
#used_by_client_project and clients projects. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
PROPAGATION_TOKEN_INCORRECT_CLAIM_TYPE=CWWKS1730E: The resource server failed the authentication request because the data type of the [{0}] claim in the access token associated with the [{1}] configuration attribute is not valid. 
PROPAGATION_TOKEN_INCORRECT_CLAIM_TYPE.explanation=The provided access token has an invalid claim data type and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_INCORRECT_CLAIM_TYPE.useraction=Verify that the OpenID Connect client configuration specifies the correct claim name for the attribute.

#unused
PROPAGATION_TOKEN_MISSING_REALM=CWWKS1731E: The resource server failed the authentication request because the access token does not contain the claim [{0}] specified by the [{1}] attribute.
PROPAGATION_TOKEN_MISSING_REALM.explanation=The provided access token does not contain the specified claim to identify the realm and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_MISSING_REALM.useraction=Do one of the following. 1)Verify that the OpenID Connect client configuration specifies the realmName attribute 2)Verify that the OpenID Connect provider (OP) emits the access token with the specified claim 3)Verify whether the OP can emit the access token with the "iss" claim. 

# 1732, 33 used by client bundle, don't use here.

#used by clients project
OIDC_CLIENT_ID_TOKEN_MISSING_CLAIM=CWWKS1734E: The OpenID Connect client [{0}] failed to authenticate the ID token because the claim [{1}] specified by the [{2}] configuration attribute was not included in the token.
OIDC_CLIENT_ID_TOKEN_MISSING_CLAIM.explanation=The specified configuration attribute defines the ID token claim to use when creating a user subject. The specified claim could not be found in the ID token, so the ID token could not be authenticated and a user subject could not be created.
OIDC_CLIENT_ID_TOKEN_MISSING_CLAIM.useraction=Configure the specified attribute to refer to a claim that exists in the ID token and can be used to create a subject.

#present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
PROPAGATION_TOKEN_ISS_CLAIM_NOT_REQUIRED_ERR=CWWKS1735E: The resource server failed the authentication request because the response from the validation end point [{0}] has the [{1}] claim, but the [{2}] attribute is set to true.
PROPAGATION_TOKEN_ISS_CLAIM_NOT_REQUIRED_ERR.explanation=Since the OpenID Connect client configuration specifies "disableIssChecking", the resource server expects the json response from the validation end point to not have the "iss" claim.  
PROPAGATION_TOKEN_ISS_CLAIM_NOT_REQUIRED_ERR.useraction=Do one of the following. 1)Update the OpenID Connect client configuration and set the "disableIssChecking" to "false" 2) Make the validation end point to not emit the "iss" claim.

# Do not translate "JSON Web Token"
#0=Java runtime level, 1=Minimum Java level required by JWT library
#unused but present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_JWT_JDK7=CWWKS1736E: The Java version used by this run time [{0}] is not supported by the JSON Web Token library. The supported Java version is [{1}] or higher.
OIDC_CLIENT_JWT_JDK7.explanation=The open source libraries for processing JSON Web Tokens does not support the Java version that the Liberty server is currently using.
OIDC_CLIENT_JWT_JDK7.useraction=Install a Java version that is at or higher than the Java level shown in the message.

# Do not translate "JSON Web Token"
#0=Exception, 1=OIDC client ID
# used by clients project
OIDC_CLIENT_JWT_VERIFY_ERR=CWWKS1737E: The OpenID Connect client [{1}] failed to validate the JSON Web Token. The cause of the error was: [{0}]
OIDC_CLIENT_JWT_VERIFY_ERR.explanation=The OpenID Connect client (relying party or RP) can not validate the JSON Web Token. This might have been caused by a failure while validating required claims. Some of the JSON Web Token required claims include issuer, audience, and issued time.
OIDC_CLIENT_JWT_VERIFY_ERR.useraction=See the user action for the error that appears in the message.

# Do not translate "JSON Web Token"
#0=OIDC client ID, 1=JWT claim (such as aud, iat, exp), 2=Client config attribute (userIdentifier or userIdentityToCreateSubject)
#used by clients project
OIDC_CLIENT_JWT_MISSING_CLAIM=CWWKS1738E: The OpenID Connect client [{0}] failed to authenticate the JSON Web Token because the claim [{1}] specified by the [{2}] configuration attribute was not included in the token.
OIDC_CLIENT_JWT_MISSING_CLAIM.explanation=The specified configuration attribute defines the JSON Web Token claim to use when creating a user subject. The specified claim could not be found in the JSON Web Token, so the JSON Web Token could not be authenticated and a user subject could not be created.
OIDC_CLIENT_JWT_MISSING_CLAIM.useraction=Do one of the following actions: 1) Change your configuration of the specified attribute to refer to a claim that exists in the JSON Web Token. 2) Modify the JSON Web Token to include the specified attribute.

#present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
#0=signatureAlgorithm, 1=exception or error message if any
#used_by_client_project and clients project
OIDC_CLIENT_NO_VERIFYING_KEY=CWWKS1739E: A signing key required by signature algorithm [{0}] was not available. {1}
OIDC_CLIENT_NO_VERIFYING_KEY.explanation=A signing key could not be found, or a key that uses the configured signature algorithm could not be found. This could be due to missing, malformed, or inaccurate information in the client configuration or token.
OIDC_CLIENT_NO_VERIFYING_KEY.useraction=Do one of the following actions: 1) If using JWK to sign and validate tokens, ensure the jwkEndpointUrl attribute is configured properly and the JWT and JWK claims are correct. 2) If using X.509 certificates to sign and validate tokens, ensure the signatureAlgorithm, trustStoreRef, and trustStoreAlias attributes are configured properly. 3) If using shared keys to sign and validate tokens, ensure the clientId and clientSecret attributes are configured properly.

#1740, 41 used in client bundle, do not use here.


# CWWKS1742E
#JWK_RETRIVE_FAILED=CWWKS1742E: Cannot get the Json Web Key(JWK) from the URL [{0}]. Response status [{1}]. Message:[{2}] 

#1742 used in client bundle, do not use here.

#0: the issuer, 1:jti
#used by clients
JWT_DUP_JTI_ERR=CWWKS1743E: The token validation failed. Another JSON Web Token (JWT) with the same ''iss'':[{0}] and ''jti'':[{1}] has already been received.
JWT_DUP_JTI_ERR.explanation=A JWT with "iss" and "jti" claims cannot be used more than once. The jti claim represents a unique identifier for a token and cannot be the same as another token with the same issuer.
JWT_DUP_JTI_ERR.useraction=Make sure each JWT token that is issued by the same issuer has a unique jti value.

# 0: the response state, 1: client ID
# used by clients proj
OIDC_CLIENT_RESPONSE_STATE_ERR=CWWKS1744E: The current state [{0}] of a response to the OpenID Connect client [{1}] is not valid. The state value is either expired or has already been used.
OIDC_CLIENT_RESPONSE_STATE_ERR.explanation=The OpenID Connect client (relying party or RP) has received a response from an OpenID Connect provider (OP), but the state parameter in the response is not valid. It is either expired or has already been used.
OIDC_CLIENT_RESPONSE_STATE_ERR.useraction=Make sure the clocks on all systems are synchronized to ensure that state values do not expire prematurely. Make sure that state values are used only once.

# present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
# do not translate WASOidcCode
# 0: the content of WASOidcCode, 1: client ID
#used_by_client_project and clients project
OIDC_CLIENT_BAD_PARAM_COOKIE=CWWKS1745E: The WASOidcCode cookie [{0}] in the request to the OpenID Connect client [{1}] is not valid. Its value might have been modified.
OIDC_CLIENT_BAD_PARAM_COOKIE.explanation=The OpenID Connect client (relying party or RP) received a WASOidcCode cookie that is not valid. Its value might have been modified.
OIDC_CLIENT_BAD_PARAM_COOKIE.useraction=Verify that the cookie has not been modified and that the decoded content of the cookie begins with a properly formatted JSON object.

# used by clients
OIDC_CLIENT_INVALID_HTTP_RESPONSE_NO_MSG=CWWKS1746E: Tokens could not be extracted from the HTTP response. Check the format of the response.
OIDC_CLIENT_INVALID_HTTP_RESPONSE_NO_MSG.explanation=The format of the response was not valid and could not be processed.  
OIDC_CLIENT_INVALID_HTTP_RESPONSE_NO_MSG.useraction=Check the format of the response and contact the partner that sent the message.

# 0=JWK URL, 1=Response status, 2=Response content
# used by clients
JWK_RETRIEVE_FAILED=CWWKS1747E: A JSON Web Key (JWK) was not returned from the URL [{0}]. The response status was [{1}], and the content returned was [{2}].
JWK_RETRIEVE_FAILED.explanation=A JSON Web Key cannot be returned from the specified URL. The URL might not be valid, the URL might not be configured to return a JWK, the response from the URL might be empty, or an unknown error occurred.
JWK_RETRIEVE_FAILED.useraction=Verify that the URL is formatted correctly and specifies a location that is capable of returning JSON Web Keys. Check the status code and content of the response for more information.

#present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
USERINFO_RETREIVE_FAILED=CWWKS1748E: The UserInfo URL [{0}] could not be contacted.  The response status was [{1}] and the content returned was [{2}].
USERINFO_RETREIVE_FAILED.explanation=User Info data could not be obtained from the specified URL. The URL might not be valid, the supplied access token might not be valid, the response from the URL might be empty, or an unknown error occurred.
USERINFO_RETREIVE_FAILED.useraction=Verify that the URL is formatted correctly and specifies a location that is capable of returning User Info data. Check the status code and content of the response for more information.

# present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
USERINFO_INVALID=CWWKS1749E: The User Info data [{0}] is invalid because the sub claim does not match the sub claim of the ID Token [{1}].
USERINFO_INVALID.explanation=The sub claim of user info data is required to match the sub claim of the ID token, but it does not. 
USERINFO_INVALID.useraction=Ensure that the OpenID Connect provider generates valid User Info data.

# STOP HERE, OIDC COMMON HAS RESERVED 1751 - 1799 

# 0=OIDC client config ID, 1=Error/exception message
OIDC_CLIENT_ERROR_EXTRACTING_JWT_CLAIMS_FROM_WEB_RESPONSE=CWWKS1533E: The {0} OpenID Connect client cannot extract the JSON Web Token (JWT) claims from the web response. {1}
OIDC_CLIENT_ERROR_EXTRACTING_JWT_CLAIMS_FROM_WEB_RESPONSE.explanation=The web response must be a JWT in either JSON Web Encryption (JWE) or JSON Web Signature (JWS) format. The response might be malformed, or the OpenID Connect client encountered another error processing the response.
OIDC_CLIENT_ERROR_EXTRACTING_JWT_CLAIMS_FROM_WEB_RESPONSE.useraction=See the error in the message for more information. Verify that the response is in JWT format.

OIDC_CLIENT_NULL_AUTH_ENDPOINT=CWWKS1534E: The OpenID Connect client [{0}] requires an authorization endpoint URL, but it is not set.
OIDC_CLIENT_NULL_AUTH_ENDPOINT.explanation=An authorization endpoint URL must be set to obtain an authorization code or the required tokens.
OIDC_CLIENT_NULL_AUTH_ENDPOINT.useraction=Set the authorizationEndpointUrl attribute in the OpenID Connect client configuration to the authorization endpoint URL of the OpenID Connect provider. Alternatively, set the discoveryEndpointUrl attribute in the OpenID Connect client configuration to the discovery endpoint URL of the OpenID Connect provider.

OIDC_CLIENT_NULL_TOKEN_ENDPOINT=CWWKS1535E: The OpenID Connect client [{0}] requires a token endpoint URL, but it is not set.
OIDC_CLIENT_NULL_TOKEN_ENDPOINT.explanation=A token endpoint URL must be set to obtain the required tokens.
OIDC_CLIENT_NULL_TOKEN_ENDPOINT.useraction=Set the tokenEndpointUrl attribute in the OpenID Connect client configuration to the token endpoint URL of the OpenID Connect provider. Alternatively, set the discoveryEndpointUrl attribute in the OpenID Connect client configuration to the discovery endpoint URL of the OpenID Connect provider.

# Do not translate "keyManagementKeyAlias"
# 0=OIDC client config ID
OIDC_CLIENT_JWS_REQUIRED_BUT_TOKEN_NOT_JWS=CWWKS1536E: The token is not in JSON Web Signature (JWS) format because it does not contain three parts, but the [{0}] OpenID Connect client only accepts tokens that are in JWS format.
OIDC_CLIENT_JWS_REQUIRED_BUT_TOKEN_NOT_JWS.explanation=The token might be malformed or might be in JSON Web Encryption (JWE) format. Tokens must be in JWS format if the keyManagementKeyAlias attribute is not configured.
OIDC_CLIENT_JWS_REQUIRED_BUT_TOKEN_NOT_JWS.useraction=To accept JWE tokens, configure the keyManagementKeyAlias attribute in the OpenID Connect client configuration. Otherwise, ensure that only JWS tokens are sent to this resource.

# 0=OIDC client config ID
OIDC_CLIENT_JWE_REQUIRED_BUT_TOKEN_NOT_JWE=CWWKS1537E: The token is not in JSON Web Encryption (JWE) format because it does not contain five parts, but the [{0}] OpenID Connect client only accepts tokens that are in JWE format.
OIDC_CLIENT_JWE_REQUIRED_BUT_TOKEN_NOT_JWE.explanation=The token might be malformed or might be in JSON Web Signature (JWS) format. Tokens must be in JWE format if the keyManagementKeyAlias attribute is configured.
OIDC_CLIENT_JWE_REQUIRED_BUT_TOKEN_NOT_JWE.useraction=To accept JWS tokens instead of JWE tokens, remove the keyManagementKeyAlias attribute in the OpenID Connect client configuration. Otherwise, ensure that only JWE tokens are sent to this resource.

# 0=String extracted from UserInfo endpoint response, 1=Exception message
USERINFO_CLAIMS_FORMAT_NOT_VALID=CWWKS1538E: The data extracted from the response from the UserInfo endpoint is not in JSON format. The extracted data is [{0}]. The error is [{1}].
USERINFO_CLAIMS_FORMAT_NOT_VALID.explanation=The UserInfo endpoint should return claims as members of a JSON object or a JSON Web Token (JWT). The format of the response might not be valid, or the response might not match the format that is specified by the Content-Type header.
USERINFO_CLAIMS_FORMAT_NOT_VALID.useraction=Check the format of the UserInfo endpoint response to ensure it is in JSON or JWT format.

# 0=Remote server response string
JWT_RESPONSE_STRING_NOT_IN_JWT_FORMAT=CWWKS1539E: The web response [{0}] is expected to be a JSON Web Token (JWT), but the response is not in JSON Web Signature (JWS) or JSON Web Encryption (JWE) format.
JWT_RESPONSE_STRING_NOT_IN_JWT_FORMAT.explanation=The Content-Type header in the web response indicates that the response contains a JWT, but the response body is not in a valid JWT format.
JWT_RESPONSE_STRING_NOT_IN_JWT_FORMAT.useraction=Ensure that the web response is in the format that is expected by the OpenID Connect client.

# Do not translate "Content-Type"
# 0=OpenID Connect client config ID, 1=Error message
ERROR_GETTING_USERINFO_OR_EXTRACTING_CLAIMS=CWWKS1540E: The {0} OpenID Connect client cannot retrieve information about the access token from the UserInfo endpoint: {1}
ERROR_GETTING_USERINFO_OR_EXTRACTING_CLAIMS.explanation=The response from the UserInfo endpoint might not be in a format that is expected. The OpenID Connect client might have encountered an error while submitting the UserInfo request.
ERROR_GETTING_USERINFO_OR_EXTRACTING_CLAIMS.useraction=Check the error message for more information. Verify that the content of the UserInfo response matches the Content-Type HTTP header.

BACKCHANNEL_LOGOUT_REQUEST_FAILED=CWWKS1541E: The back-channel logout request sent to [{0}] encountered an error. {1}
BACKCHANNEL_LOGOUT_REQUEST_FAILED.explanation=The request does not use the HTTP POST method, the request is missing a logout token or the logout token cannot be validated, or the logout request did not complete successfully.
BACKCHANNEL_LOGOUT_REQUEST_FAILED.useraction=Verify that the HTTP POST method is used to submit the back-channel logout request. Otherwise, see the user action for the error that is included in this message.

BACKCHANNEL_LOGOUT_REQUEST_MISSING_PARAMETER=CWWKS1542E: The back-channel logout request is not valid because the logout_token parameter is missing or empty.
BACKCHANNEL_LOGOUT_REQUEST_MISSING_PARAMETER.explanation=The back-channel logout request must include a logout_token parameter whose value is a valid logout token.
BACKCHANNEL_LOGOUT_REQUEST_MISSING_PARAMETER.useraction=Update the request to include a logout token.

BACKCHANNEL_LOGOUT_TOKEN_ERROR=CWWKS1543E: The logout token in the back-channel logout request cannot be validated: {0}
BACKCHANNEL_LOGOUT_TOKEN_ERROR.explanation=The logout token might be malformed, the token might be in an unexpected format, or another error occurred validating the signature or claims of the token.
BACKCHANNEL_LOGOUT_TOKEN_ERROR.useraction=See the user action for the error that is included in this message.

BACKCHANNEL_LOGOUT_REQUEST_NO_MATCHING_CONFIG=CWWKS1544E: The back-channel logout request is not valid because there is no OpenID Connect client that matches the request.
BACKCHANNEL_LOGOUT_REQUEST_NO_MATCHING_CONFIG.explanation=The OpenID Connect feature expects the back-channel request URI to include an OpenID Connect client ID to determine which client to log out.
BACKCHANNEL_LOGOUT_REQUEST_NO_MATCHING_CONFIG.useraction=Verify that the request URI includes the OpenID Connect client ID to use for logging out the user.

LOGOUT_TOKEN_MISSING_CLAIMS=CWWKS1545E: The logout token is not valid because it is missing at least one claim that is required: {0}
LOGOUT_TOKEN_MISSING_CLAIMS.explanation=The logout token must contain the claims that are specified in the message.
LOGOUT_TOKEN_MISSING_CLAIMS.useraction=Ensure that the OpenID Connect provider includes the missing claims in the logout token.

# Do not translate "sub" or "sid"
LOGOUT_TOKEN_MISSING_SUB_AND_SID=CWWKS1546E: The logout token is not valid because it does not contain a "sub" or "sid" claim. The token must have at least one of those claims.
LOGOUT_TOKEN_MISSING_SUB_AND_SID.explanation=The "sub" and "sid" claims identify the user and session that is associated with a token. At least one of those claims must be present to determine the user or session to log out.
LOGOUT_TOKEN_MISSING_SUB_AND_SID.useraction=Ensure that the OpenID Connect provider includes the missing claims in the logout token.

# Do not translate "events"
LOGOUT_TOKEN_EVENTS_CLAIM_WRONG_TYPE=CWWKS1547E: The logout token is not valid because the "events" claim is not a JSON object: {0}
LOGOUT_TOKEN_EVENTS_CLAIM_WRONG_TYPE.explanation=The "events" claim in the logout token must be a JSON object.
LOGOUT_TOKEN_EVENTS_CLAIM_WRONG_TYPE.useraction=Ensure that the OpenID Connect provider uses the correct data type for the "events" claim.

# Do not translate "events"
LOGOUT_TOKEN_EVENTS_CLAIM_MISSING_EXPECTED_MEMBER=CWWKS1548E: The logout token is not valid because the "events" claim does not contain "{0}" as a member. The "events" claim value is {1}.
LOGOUT_TOKEN_EVENTS_CLAIM_MISSING_EXPECTED_MEMBER.explanation=The "events" claim must be a JSON object that contains a member with the name that is specified in the message.
LOGOUT_TOKEN_EVENTS_CLAIM_MISSING_EXPECTED_MEMBER.useraction=Ensure that the "events" claim includes the required member.

LOGOUT_TOKEN_CONTAINS_NONCE_CLAIM=CWWKS1549E: The logout token is not valid because it contains a "nonce" claim.
LOGOUT_TOKEN_CONTAINS_NONCE_CLAIM.explanation=A logout token must not contain a "nonce" claim so that the token cannot be used in a forged authentication response in place of an ID token.
LOGOUT_TOKEN_CONTAINS_NONCE_CLAIM.useraction=Ensure that the logout token does not contain a "nonce" claim.

LOGOUT_TOKEN_EVENTS_MEMBER_VALUE_NOT_JSON=CWWKS1550E: The value for the "{0}" member in the "events" claim is not a JSON object.
LOGOUT_TOKEN_EVENTS_MEMBER_VALUE_NOT_JSON.explanation=The corresponding member value must be a JSON object. The expected value is "{}", an empty JSON object.
LOGOUT_TOKEN_EVENTS_MEMBER_VALUE_NOT_JSON.useraction=Ensure that the "events" claim in the logout token is formatted correctly.

LOGOUT_TOKEN_SID_REQUIRED_BUT_MISSING=CWWKS1551E: The logout token is missing the "sid" claim but the {0} OpenID Connect client requires it.
LOGOUT_TOKEN_SID_REQUIRED_BUT_MISSING.explanation=The OpenID Connect client requires that the logout token contains a session ID to identify the OpenID Connect client session with the OpenID Connect provider.
LOGOUT_TOKEN_SID_REQUIRED_BUT_MISSING.useraction=Set the backchannelLogoutSessionRequired OpenID Connect client configuration attribute to false, or ensure that the logout token contains a "sid" claim.

BACKCHANNEL_LOGOUT_PERFORM_LOGOUT_FAILED=CWWKS1552E: The OpenID Connect client encountered the following error while performing back-channel logout with a logout token with claims {0}: {1}
BACKCHANNEL_LOGOUT_PERFORM_LOGOUT_FAILED.explanation=The back-channel logout request did not complete successfully.
BACKCHANNEL_LOGOUT_PERFORM_LOGOUT_FAILED.useraction=View the error message for more information.

# STOP HERE, OIDC SERVER HAS RESERVED 1600 - 1649

