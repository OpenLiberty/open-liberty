/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
apply from: '../cnf/gradle/scripts/fat.gradle'
	

/* 
alias test='cd ~/git/eclipse/microprofile-config/ && mvn clean install && cd ~/git/mpConfigTckRunner  && mvn test -P liberty-nix -DsuiteXmlFile=tck-suite.xml'
*/


/* This task is only needed if one wishes a custom local TCK that is in 
   development. Standard TCK's can be pulled in from gradle central or
   if not there from Artifactory */
task installBundledTck { 
   dependsOn build
   doLast{
      String specDir = "${buildDir}/autoFVT/spec/"
      if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
         exec {
            workingDir "${specDir}"
            commandLine "cmd", "/c", "mvn", "clean", "install"
         }
      } else {
         exec {
            workingDir "${specDir}"
            commandLine "mvn", "clean", install
         }
      }
   }
}


/* There is no need for this to depend on installing the TCK as maven will
 * do this for us.
 */
task runTck {
   dependsOn build
   doLast{
      String runnerDir = "${buildDir}/autoFVT/tckRunner/"
      if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
           exec {
              workingDir "${specDir}"
              commandLine "cmd", "/c", "mvn", "clean", "install"
           }
      } else {
         exec {
            workingDir "${projectDir}/wlp/bin"
            commandLine "mvn", "clean", install
         }
      }
   }
}
















/*   Reference to the 
 exec {
              workingDir "${projectDir}/wlp/bin"
              commandLine "./server", "create", serverName
            }
*/




/*
task installTck(dependsOn: build, type: Exec) {
     commandLine "cd ${specDir} && mvn clean install", " -9", "java"
}

task installTck(dependsOn: build, type: Exec) {
     commandLine "cd ${tckRunner} && mvn test", " -9", "java"
}
*/


/**
 * Actually run exec task in doLast phase
 
task doMyExecTask << {
    def hasProperties = project.hasProperty('SOME_PROPERTY');

    if (hasProperties) {
        myExecTask.commandLine "echo", "$SOME_PROPERTY"
    } else {
        println "ERROR: Unable to run task. Missing properties."
    }
}
*/

/**
 * Configure exec task, this always runs
task myExecTask(type: Exec) {
    dependsOn doMyExecTask
    workingDir 'path/to/executable'
}
 */




// Example of pulling down binary dependencies from Artifactory
addRequiredLibraries {
  doLast {
    // Define dependency groups
    configurations {
       derby
       tck
    }
    // Define G:A:V coordinates of each dependency
    dependencies {
      derby 'org.apache.derby:derbynet:10.11.1.1'

      // The arquilliahn container jar needs to be added to the local
      // maven repository and the hamcrest jar needs to be added in to the
      // wars created by the TCK using the Arquillian extension mechanism
      tck 'com.ibm.ws.org.jboss.arquillian.container:arquillian-wlp-managed-8.5:1.0.0.Final-SNAPSHOT',
          'org.hamcrest:hamcrest-all:1.3'
    }
    // Copy the dependencies wherever they may be needed
    copy {
      // Adding jars to "autoFVT/lib/" will include them in a FAT bucket classpath at runtime
      from configurations.derby
      into "${buildDir}/autoFVT/lib/"
    }
    
    copy {
      // Adding jars to "autoFVT/lib/" will include them in a FAT bucket classpath at runtime
      from configurations.tck
      into "${buildDir}/autoFVT/lib/"
    }
  }
}
	
