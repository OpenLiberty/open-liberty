needs.translation='{needs.translation}' > ''{0}'' needs its value "{1}" translated
white.space.found='{white.space.found}' > ''{0}'' has one or more white space characters at the beginning and/or end of its value "{1}"
missing.attribute='{missing.attribute}' > ''{0}'' is missing
invalid.value='{invalid.value}' > value for ''{0}'' must be {1} but found "{2}"
invalid.type='{invalid.type}' > type must be {0} but found "{1}"
invalid.type.2='{invalid.type.2}' > type for attribute ''{0}'' must be {1} but found "{2}"
required.not.set='{required.not.set}' > ''required'' was not set explicitly, thus it is implicitly understood this attribute is required
default.type.mismatch='{default.type.mismatch}' > ''default'' value does not match type specified "{0}"
cardinality.not.number='{cardinality.not.number}' > ''cardinality'' value is not a number; found "{0}"
generic.duration='{generic.duration}' > ''ibm:type'' is set to the generic duration type; implicitly understood as "duration(ms)"
unknown.duration.unit='{unknown.duration.unit)' > ''{0}'' contains an unknown duration type; found "{0}"
bad.duration.time='{bad.duration.time}' > ''{0}'' contains a bad duration value that can't be parsed to a Long; found "{1}"
default.duration.conversion='{default.duration.conversion}' > ''default'' value of "{0}" converts to "{1} {2}" based on duration type specified
cannot.validate='{cannot.validate}' > cannot validate attribute ''{0}''; reason: {1}
invalid.range='{invalid.range}' > number range [{0},{1}] is invalid; ensure the first number is lower than the second number
multiple.instances.found='{multiple.instances.found}' > there are multiple instances of ''{0}'' with the same value of "{1}"
unknown.attribute='{unknown.attribute}' > an unknown attribute was found: {0}
unknown.element='{unknown.element}' > an unknown element was found: {0}
missing.property='{missing.property}' > a property with the id "{0}" can not be found within current scope
unknown.function='{unknown.function}' the "{0}" variable expression uses the "{1}" function, which is not known
required.false.with.default.value='{required.false.with.default.value}' > ''required'' was set to false, but a default value of "{0}" was specified, making it implicitly required
ocd.not.validated='{ocd.not.validated}' > OCD with id "{0}" was not validated; reason: {1}
pid.and.factorypid.coexist='{pid.and.factorypid.coexist}' > ''pid'' ("{0}") and 'factoryPid' ("{1}") coexist; only one is permitted - not both - per single Designate
missing.name.with.ibmref='{missing.name.with.ibmref}' > ''name'' attribute is missing, but an ibm:reference is used, so I guess you don't need it?
missing.description.with.ibmref='{missing.description.with.ibmref}' > ''description'' attribute is missing, but an ibm:reference is used, so I guess you don't need it?
ref.not.found='{ref.not.found}' > the reference "{0}" used by ''{1}'' cannot be found
ref.translation.not.found='{ref.translation.not.found}' > ''ibm:reference'' used but no translation message found using $Ref (expecting "{0}")
invalid.nls.key='{invalid.nls.key}' > the key "{0}" was not found in the NLS properties file
extension.not.supported='{extension.not.supported}' > the OCD with 'id' "{0}" is not allowed to be extended
not.number='{not.number}' > the attribute "{0}" should contain a number, but it is set to "{1}".
invalid.filter='{invalid.filter}' > the filter is not valid; reason: {1}
unsupported.filter.attr.name='{unsupported.filter.attr.name}' > the filter "{0}" refers to the attribute name "{1}" that does not match the pattern: {2}
unsupported.filter.operation='{unsupported.filter.operation}' > the filter "{0}" uses the operation "{1}", but only "=*" is supported
missing.name.with.ibmservice='{missing.name.with.ibmservice}' > ''name'' attribute is missing, but an ibm:service is used, so I guess you don't need it?
missing.description.with.ibmservice='{missing.description.with.ibmservice}' > ''description'' attribute is missing, but an ibm:service is used, so I guess you don't need it?
service.not.found='{service.not.found}' > the service ''{0}'' used by ''{1}'' cannot be found
service.translation.not.found='{service.translation.not.found}' > ''ibm:service'' used but no translation message found using $Ref (expecting "{0}")
invalid.service.in.objectclass='{invalid.service.in.objectclass}' > the service ''{0}'' in ibm:objectClass ''{1}'' is not valid
service.filter.without.service='{service.filter.without.service}' > ''ibm:serviceFilter'' ''{0}'' specified but ''ibm:service'' not specified
inconsistent.pid.info='{inconsistent.pid.info}' > Only one of ''{0}'' (value ''{1}'') and ''{2}'' (value ''{3}'') can be specified
serviceFilter.without.service='{serviceFilter.without.service}' > specifying ''ibm:serviceFilter'' (value ''{0}'') requires specifying ''ibm:service''
not.pid.but='{not.pid.but}' > the AD specifies ''{0}'' which requires ''ibm:type="pid"''
extendsalias.requires.extends='{extendsalias.requires.extends}' > ibm:extendsAlias ''{0}'' is only valid with ''ibm:extends''
alias.wrong.case='{alias.wrong.case}' > ''{0}'' value ''{1}'' should not be capitalized 
attribute.id.wrong.case='{attribute.id.wrong.case}' > ''{0}'' value ''{1}'' should not be capitalized 