<!--
    Copyright (c) 2020 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html

    Contributors:
        IBM Corporation - initial API and implementation
 -->
<project name="dojo" default="dojo-release">

    <!-- Static nodejs resources -->
    <property name="nodejs.version" value="v0.10.33" />

    <!-- Static DOJO resources -->
    <property name="dojo.home" location="${basedir}/../ant_build.js/lib/dojo" />
    <property name="dojo.version" value="1.12.9" />
    <property name="dojo.src" location="${dojo.home}/dojo-${dojo.version}" />
    <property name="dojo.src.zip" value="${dojo.src}.zip" />
    <property name="dojo.closure.jar" value="${dojo.src}/util/closureCompiler/compiler.jar" />
    <property name="dojo.shrinksafe.jar" value="${dojo.src}/util/shrinksafe/shrinksafe.jar" />
    <property name="dojo.shrinksafejs.jar" value="${dojo.src}/util/shrinksafe/js.jar" />
    <property name="idx.version" value="1.5.2.6" />
    <property name="idx.src" location="${dojo.home}/idx-${idx.version}" />
    <property name="idx.src.zip" value="${idx.src}.zip" />
    <property name="gridx.version" value="1.3.9" />
    <property name="gridx.src" location="${dojo.home}/gridx-${gridx.version}" />
    <property name="gridx.src.zip" value="${gridx.src}.zip" />
    <property name="intern.home" location="${basedir}/../ant_build.js/lib/intern" />
    <property name="intern.version" value="2.2.2" />
    <property name="intern.src" location="${intern.home}/intern-${intern.version}" />
    <property name="intern.src.zip" value="${intern.src}.zip" />
	<property name="d3.home" location="${basedir}/../ant_build.js/lib/d3" />
	<property name="d3.version" value="3.5.10" />
    <property name="d3.src" location="${d3.home}/d3-${d3.version}" />
    <property name="d3.src.jar" value="${d3.src}.jar" />

    <property name="com.ibm.ws.ui.css" location="${basedir}/../com.ibm.ws.ui/resources/WEB-CONTENT/css" />

    <!-- Project DOJO properties & targets -->
    <property name="dojo.project.release.profile" value="${basedir}/lib/releaseProfile.js" />
    <property name="dojo.project.release.output" location="${basedir}/lib/dojo-release" />
    <property name="dojo.project.build.output" location="${basedir}/build/dojo" />

    <!-- Figure out which build engine to use.  Preferably nodejs, otherwise rhino -->
    <target name="dojo-release-execute">
        <echo>OS Name: ${os.name}</echo>
        <echo>OS Arch: ${os.arch}</echo>
        <condition property="nodejs.exec" value="node-${nodejs.version}-win-x86.exe">
            <and>
                <os family="windows" />
                <or>
                    <os arch="x86" />
                    <os arch="i386" />
                </or>
            </and>
        </condition>
        <condition property="nodejs.exec" value="node-${nodejs.version}-win-x64.exe">
            <and>
                <os family="windows" />
                <or>
                    <os arch="x86_64" />
                    <os arch="amd64" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-darwin-x86">
            <and>
                <os family="mac" />
                <or>
                    <os arch="x86" />
                    <os arch="i386" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-darwin-x64">
            <and>
                <os family="mac" />
                <or>
                    <os arch="x86_64" />
                    <os arch="amd64" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-linux-ppc">
            <and>
                <os name="Linux" />
                <or>
                    <os arch="ppc" />
                    <os arch="ppc64" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-linux-ppcle64">
            <and>
                <os name="Linux" />
                <or>
                    <os arch="ppcle64" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-linux-s390">
            <and>
                <os name="Linux" />
                <or>
                    <os arch="s390" />
                    <os arch="s390x" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-linux-x86">
            <and>
                <os name="Linux" />
                <or>
                    <os arch="x86" />
                    <os arch="i386" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-linux-x64">
            <and>
                <os name="Linux" />
                <or>
                    <os arch="x86_64" />
                    <os arch="amd64" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-sunos-x86">
            <and>
                <os name="SunOS" />
                <or>
                    <os arch="x86" />
                    <os arch="i386" />
                    <os arch="x86_64" />
                    <os arch="amd64" />
                </or>
            </and>
        </condition>
        <condition property="nodejs" value="node-${nodejs.version}-aix-ppc">
            <and>
                <os name="AIX" />
                <or>
                    <os arch="ppc" />
                    <os arch="ppc64" />
                </or>
            </and>
        </condition>
        <iff>
            <and>
                <or>
                    <not>
                        <isset property="dojo.build.engine.force.rhino" />
                    </not>
                    <and>
                        <isset property="dojo.build.engine.force.rhino" />
                        <not>
                            <istrue value="${dojo.build.engine.force.rhino}" />
                        </not>
                    </and>
                </or>
                <or>
                    <isset property="nodejs" />
                    <isset property="nodejs.exec" />
                </or>
            </and>
            <then>
                <antcall target="dojo-release-nodejs-execute" />
            </then>
            <else>
                <antcall target="dojo-release-rhino-execute" />
            </else>
        </iff>
    </target>

    <!-- Unzip the necessary nodejs files that will be used for the build -->
    <target name="dojo-release-nodejs-unzip">
        <iff>
            <isset property="nodejs" />
            <then>
                <property name="nodejs.exec" value="${nodejs}/${nodejs}/bin/node" />
                <iff>
                    <not>
                        <available file="${dojo.home}/../nodejs/${nodejs}" type="dir" />
                    </not>
                    <then>
                        <untar src="${dojo.home}/../nodejs/${nodejs}.tar.gz" dest="${dojo.home}/../nodejs/${nodejs}" compression="gzip" />
                        <chmod file="${dojo.home}/../nodejs/${nodejs.exec}" perm="755" />
                    </then>
                </iff>
            </then>
        </iff>
    </target>

    <!-- Common pre-'dojo build' clean up -->
    <target name="dojo-release-pre">
        <delete dir="${dojo.project.build.output}" failonerror="false" />
        <mkdir dir="${dojo.project.build.output}" />
        <iff>
            <available file="${dojo.src}" type="dir" />
            <then>
                <echo>Skipping unzip of dojo.  Already unzipped here: ${dojo.src}</echo>
            </then>
            <else>
                <echo>Unzipping dojo to ${dojo.src}</echo>
            	<delete includeEmptyDirs="true">
            		<fileset dir="${dojo.home}" includes="**/dojo-*/**" excludes="dojo-*.zip" defaultexcludes="no" />
    			</delete>
                <mkdir dir="${dojo.src}" />
                <unzip src="${dojo.src.zip}" dest="${dojo.src}" />
            </else>
        </iff>
        <iff>
            <available file="${idx.src}" type="dir" />
            <then>
                <echo>Skipping unzip of idx.  Already unzipped here: ${idx.src}</echo>
            </then>
            <else>
                <echo>Unzipping idx to ${idx.src}</echo>
            	<delete includeEmptyDirs="true">
                    <fileset dir="${dojo.home}" includes="**/idx-*/**" excludes="idx-*.zip" defaultexcludes="no" />
                </delete>
                <mkdir dir="${idx.src}" />
                <unzip src="${idx.src.zip}" dest="${idx.src}" />
            </else>
        </iff>
        <iff>
            <available file="${gridx.src}" type="dir" />
            <then>
                <echo>Skipping unzip of gridx.  Already unzipped here: ${gridx.src}</echo>
            </then>
            <else>
                <echo>Unzipping gridx to ${gridx.src}</echo>
            	<delete includeEmptyDirs="true">
                    <fileset dir="${dojo.home}" includes="**/gridx-*/**" excludes="gridx-*.zip" defaultexcludes="no" />
                </delete>
                <mkdir dir="${gridx.src}" />
                <unzip src="${gridx.src.zip}" dest="${gridx.src}" />
            </else>
        </iff>
        <iff>
            <available file="${intern.src}" type="dir" />
            <then>
                <echo>Skipping unzip of intern.  Already unzipped here: ${intern.src}</echo>
            </then>
            <else>
                <echo>Unzipping intern to ${intern.src}</echo>
            	<delete includeEmptyDirs="true">
                    <fileset dir="${intern.home}" includes="**/intern-*/**" excludes="intern-*.zip .bin/*" defaultexcludes="no" />
                </delete>
                <mkdir dir="${intern.src}" />
                <unzip src="${intern.src.zip}" dest="${intern.src}" />
            </else>
        </iff>
		<iff>
            <available file="${d3.src}" type="dir" />
            <then>
                <echo>Skipping unzip of d3.  Already unzipped here: ${d3.src}</echo>
            </then>
            <else>
                <echo>Unzipping d3 to ${d3.src}</echo>
            	<delete includeEmptyDirs="true">
                    <fileset dir="${d3.home}" includes="**/d3-*/**" excludes="d3-*.jar" defaultexcludes="no" />
                </delete>
                <mkdir dir="${d3.src}" />
                <unzip src="${d3.src.jar}" dest="${d3.src}" />
				<copy file="${d3.src}/META-INF/resources/webjars/d3/${d3.version}/d3.js" tofile="${d3.src}/d3.js" />
				<copy file="${d3.src}/META-INF/resources/webjars/d3/${d3.version}/d3.min.js" tofile="${d3.src}/d3.min.js" />
				<delete includeEmptyDirs="true">
					<fileset dir="${d3.src}/META-INF"/>
				</delete>
            </else>
        </iff>
    </target>

    <target name="dojo-release-rhino-execute" depends="dojo-release-pre">
        <echo>Starting the dojo release build using rhino</echo>

        <!-- Execute the dojo build using the ant java task -->
        <java classname="org.mozilla.javascript.tools.shell.Main" dir="${dojo.src}" fork="true">
            <classpath>
                <pathelement location="${dojo.closure.jar}" />
                <pathelement location="${dojo.shrinksafe.jar}" />
                <pathelement location="${dojo.shrinksafejs.jar}" />
            </classpath>
            <arg value="./dojo/dojo.js" />
            <arg value="baseUrl=${dojo.src}/dojo" />
            <arg value="load=build" />
            <arg value="--profile" />
            <arg value="${dojo.project.release.profile}" />
        </java>
    </target>

    <target name="dojo-release-nodejs-execute" depends="dojo-release-pre, dojo-release-nodejs-unzip">
        <echo>Starting the dojo release build running on nodejs: ${nodejs.exec}</echo>

        <!-- Execute the dojo build using the ant java task -->
        <echo>dojo.home: ${dojo.home}</echo>
        <echo>nodejs: ${nodejs.exec}</echo>
        <echo>dojo.src: ${dojo.src}</echo>
        <echo>dojo.project.release.profile: ${dojo.project.release.profile}</echo>
        <!-- Build using shrinksafe if this is a personal or local build -->
        <!-- Temporarily disable shrinksafe and always build with closure -->
        <condition property="dojo.build.layer.optimize" value="closure" else="closure">
            <or>
                <and>
                    <isset property="personalBuild" />
                    <istrue value="${personalBuild}" />
                </and>
                <not>
                    <isset property="is.running.automated.build" />
                </not>
                <and>
                    <isset property="is.running.automated.build" />
                    <not>
                        <istrue value="${is.running.automated.build}" />
                    </not>
                </and>
            </or>
        </condition>
        <!--<echo>If this is a personal or local build then use shrinksafe, otherwise use closure</echo>-->
        <echo>dojo.build.layer.optimize: ${dojo.build.layer.optimize}</echo>
        <try>
            <sequential>
                <exec executable="${dojo.home}/../nodejs/${nodejs.exec}" dir="${dojo.src}" resultproperty="nodejsResult"  outputproperty="nodejsOutput" errorproperty="nodejsError">
                    <!--<arg value="{dash}{dash}max-old-space-size=1740" />-->
                    <arg value="./dojo/dojo.js" />
                    <arg value="baseUrl=${dojo.src}/dojo" />
                    <arg value="load=build" />
                    <arg value="--profile" />
                    <arg value="${dojo.project.release.profile}" />
                    <arg value="--layerOptimize" />
                    <arg value="${dojo.build.layer.optimize}" />
                </exec>
                <iff>
                    <not>
                        <equals arg1="${nodejsResult}" arg2="0" />
                    </not>
                    <then>
                        <iff>
                            <and>
                                <isset property="is.running.automated.build" />
                                <istrue value="${is.running.automated.build}" />
                            </and>
                            <then>
                                <echo>Result of nodejs build: ${nodejsResult}</echo>
                                <echo>Failed to build dojo with nodejs during an RTC Build.  Building with rhino instead.</echo>
                                <antcall target="dojo-release-rhino-execute" />
                            </then>
                            <else>
                                <echo>Result of nodejs build: ${nodejsResult}</echo>
                                <echo>Failed to build dojo with nodejs.  Not building with rhino since this is a local build.</echo>
                                <echo>If you're seeing this and haven't made changes to a com.ibm.ws.ui* project, then there's likely something in your environment that's prevent nodejs from running properly.  Try building with Rhino instead.</echo>
                                <echo>To build with rhino, set the ant property "dojo.build.engine.force.rhino" to "true"</echo>
                                <echo>Check build/dojo/build-report.txt for errors</echo>
                                <echo>${nodejsOutput}</echo>
                                <echo>${nodejsError}</echo>
                                <fail>Result of nodejs build: ${nodejsResult}.  Failed to build dojo with nodejs.  Not building with rhino since this is a local build.  If you're seeing this and haven't made changes to a com.ibm.ws.ui* project, then there's likely something in your environment that's prevent nodejs from running properly.  Try building with Rhino instead.  To build with rhino, set the ant property "dojo.build.engine.force.rhino" to "true".  Check build/dojo/build-report.txt for errors.</fail>
                            </else>
                        </iff>
                    </then>
                </iff>
            </sequential>
            <catch>
                <iff>
                    <and>
                        <isset property="is.running.automated.build" />
                        <istrue value="${is.running.automated.build}" />
                    </and>
                    <then>
                        <echo>Result of nodejs build: ${nodejsResult}</echo>
                        <echo>Failed to build dojo with nodejs during an RTC Build.  Building with rhino instead.</echo>
                        <antcall target="dojo-release-rhino-execute" />
                    </then>
                    <else>
                        <echo>Result of nodejs build: ${nodejsResult}</echo>
                        <echo>Failed to build dojo with nodejs.  Not building with rhino since this is a local build.</echo>
                        <echo>If you're seeing this and haven't made changes to a com.ibm.ws.ui* project, then there's likely something in your environment that's prevent nodejs from running properly.  Try building with Rhino instead.</echo>
                        <echo>To build with rhino, set the ant property "dojo.build.engine.force.rhino" to "true"</echo>
                        <echo>Check build/dojo/build-report.txt for errors</echo>
                        <fail>Result of nodejs build: ${nodejsResult}.  Failed to build dojo with nodejs.  Not building with rhino since this is a local build.  If you're seeing this and haven't made changes to a com.ibm.ws.ui* project, then there's likely something in your environment that's prevent nodejs from running properly.  Try building with Rhino instead.  To build with rhino, set the ant property "dojo.build.engine.force.rhino" to "true".  Check build/dojo/build-report.txt for errors.</fail>
                    </else>
                </iff>
            </catch>
        </try>
    </target>

    <!-- Extension target for dojo-release-post -->
    <target name="dojo-release-post-create">
        <delete dir="${dojo.project.release.output}" failonerror="false" />
        <mkdir dir="${dojo.project.release.output}" />
    </target>

    <!-- Common post-'dojo build' construction -->
    <target name="dojo-release-post-copy">
        <!-- Copy over the important things we know we need from DOJO -->
        <copy todir="${dojo.project.release.output}/dijit">
            <fileset dir="${dojo.project.build.output}/dijit">
                <include name="themes/dijit.css" />
            	<include name="themes/dijit_rtl.css" />
            	<include name="themes/a11y/*" />
            	<include name="themes/claro/claro.css" />
            	<include name="themes/claro/claro_rtl.css" />
            	<include name="themes/claro/images/*" />
            	<include name="themes/claro/form/images/*" />
            </fileset>
        </copy>
        <copy todir="${dojo.project.release.output}/dojo">
            <fileset dir="${dojo.project.build.output}/dojo">
                <include name="dojo.js" />
                <include name="nls/dojo_*.js" />
                <include name="resources/**" />
            	<!-- Copy over gregorian.js and number.js for locales other than those supported for
            	translation -->
            	<include name="cldr/nls/**/gregorian.js" />
            	<include name="cldr/nls/**/number.js" />
            	<not>
            		<containsregexp expression="cldr/nls/(cs|de|es|en|fr|hu|it|ja|ko|pl|pt-br|ro|ru|zh|zh-tw)/.+" />
            	</not>
            </fileset>
        </copy>
        <copy todir="${dojo.project.release.output}/dojox">
            <fileset dir="${dojo.project.build.output}/dojox">
            	<!-- From what I can tell, when deviceTheme is not used (we don't use it),
            	dojo goes through all the themes and then just stays with the last one which is ios7.
            	Once we replace dojox/mobile with dojo/dijit equivalent, the mobile/themes can be removed. -->
            	<include name="mobile/themes/ios7/ios7.css" />
                <include name="mobile/themes/ios7/ios7_rtl.css" />
                <include name="mobile/themes/ios7/**/*.png" />
                <include name="mobile/themes/ios7/**/*.gif" />
                <include name="date/zoneinfo/*" />
                <include name="form/resources/CheckedMultiSelect.css" />
                <include name="form/resources/*CheckedMultiSelect*.html" />
            </fileset>
        </copy>
        <copy todir="${dojo.project.release.output}/gridx">
            <fileset dir="${dojo.project.build.output}/gridx">
                <include name="resources/claro/Gridx.css" />
                <include name="resources/images/*" />
            </fileset>
        </copy>
        <copy todir="${dojo.project.release.output}/idx">
            <fileset dir="${dojo.project.build.output}/idx">
                <include name="themes/oneui/**" />
            </fileset>
        </copy>
    </target>

    <!-- Common post-'dojo build' construction -->
    <target name="dojo-release-post-future-copy">
        <!-- Copy over the important things we know we need from DOJO -->
        <!-- TODO: Go through all the images that we actually use from dojo/gridx/idx and only copy those -->
        <copy todir="${dojo.project.release.output}/dijit">
            <fileset dir="${dojo.project.build.output}/dijit">
                <include name="themes/*" />
                <include name="themes/a11y/*" />
                <include name="themes/claro/form/images/*" />
                <include name="themes/claro/images/*" />
            </fileset>
        </copy>
        <copy todir="${dojo.project.release.output}/dojo">
            <fileset dir="${dojo.project.build.output}/dojo">
                <include name="dojo.js" />
                <include name="nls/*.js" />
                <include name="resources/**" />
            </fileset>
        </copy>
        <copy todir="${dojo.project.release.output}/dojox">
            <fileset dir="${dojo.project.build.output}/dojox">
                <include name="mobile/themes/common/**/*.png" />
                <include name="mobile/themes/common/**/*.gif" />
                <include name="mobile/themes/holodark/holodark.css" />
                <include name="mobile/themes/holodark/holodark_rtl.css" />
                <include name="mobile/themes/holodark/**/*.png" />
                <include name="mobile/themes/holodark/**/*.gif" />
                <include name="mobile/themes/android/android.css" />
                <include name="mobile/themes/android/android_rtl.css" />
                <include name="mobile/themes/android/android-compat.css" />
                <include name="mobile/themes/android/**/*.png" />
                <include name="mobile/themes/android/**/*.gif" />
                <include name="mobile/themes/blackberry/blackberry.css" />
                <include name="mobile/themes/blackberry/blackberry_rtl.css" />
                <include name="mobile/themes/blackberry/blackberry-compat.css" />
                <include name="mobile/themes/blackberry/**/*.png" />
                <include name="mobile/themes/blackberry/**/*.gif" />
                <include name="mobile/themes/iphone/iphone.css" />
                <include name="mobile/themes/iphone/iphone_rtl.css" />
                <include name="mobile/themes/iphone/iphone-compat.css" />
                <include name="mobile/themes/iphone/ipad.css" />
                <include name="mobile/themes/iphone/ipad-compat.css" />
                <include name="mobile/themes/iphone/**/*.png" />
                <include name="mobile/themes/iphone/**/*.gif" />
                <include name="mobile/themes/windows/windows.css" />
                <include name="mobile/themes/windows/windows_rtl.css" />
                <include name="mobile/themes/windows/windows-compat.css" />
                <include name="mobile/themes/windows/**/*.png" />
                <include name="mobile/themes/windows/**/*.gif" />
            </fileset>
        </copy>
        <copy todir="${dojo.project.release.output}/idx">
            <fileset dir="${dojo.project.build.output}/idx">
                <include name="themes/oneui/oneui.css" />
                <include name="themes/oneui/**/images/*" />
            </fileset>
        </copy>
    </target>

    <!-- Extension target for dojo-release-post -->
    <target name="dojo-release-post-ext" />

    <!-- Common post-'dojo build' construction -->
    <target name="dojo-release-post" depends="dojo-release-post-create, dojo-release-post-copy, dojo-nls-fix, dojo-release-post-ext" />

    <!-- Runtime launcher specific targets -->
    <target name="dojo-release" depends="dojo-release-execute,  dojo-release-post" />
    <target name="dojo-release-rhino" depends="dojo-release-rhino-execute,  dojo-release-post" />
    <target name="dojo-release-nodejs" depends="dojo-release-nodejs-execute, dojo-release-post" />

    <!-- DOH properties & targets -->
    <property name="dojo.build.output.doh" location="${dojo.home}/build/build-doh" />
    <property name="dojo.profile.uiDohProfile" value="${dojo.src}/util/buildscripts/profiles/uiDohProfile.js" />

    <!-- Common pre-'dojo doh build' clean up -->
    <target name="dojo-doh-pre">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${dojo.build.output.doh}" includes="**/*" excludes="**/.jazzignore" />
        </delete>
        <mkdir dir="${dojo.build.output.doh}/" />
    </target>

    <target name="dojo-doh-nodejs-execute">
        <echo>Starting the dojo doh build running on nodejs</echo>
        <property environment="env" />
        <echo>Path: ${env.Path}</echo>

        <!-- Execute the dojo build using the ant java task -->
        <exec executable="${dojo.home}/../nodejs/node" dir="${dojo.src}">
            <!-- <env key="Path" path="${env.Path}" /> -->
            <arg value="./dojo/dojo.js" />
            <arg value="baseUrl=${dojo.src}/dojo" />
            <arg value="load=build" />
            <arg value="--profile" />
            <arg value="${dojo.profile.uiDohProfile}" />
        </exec>
    </target>

    <target name="dojo-doh-execute">
        <echo>Starting the dojo doh build running on nodejs</echo>
        <property environment="env" />
        <echo>Path: ${env.Path}</echo>

        <!-- Execute the dojo build using the ant java task -->
        <java classname="org.mozilla.javascript.tools.shell.Main" dir="${dojo.src}" fork="true">
            <classpath>
                <pathelement location="${dojo.closure.jar}" />
                <pathelement location="${dojo.shrinksafe.jar}" />
                <pathelement location="${dojo.shrinksafejs.jar}" />
            </classpath>
            <arg value="./dojo/dojo.js" />
            <arg value="baseUrl=${dojo.src}/dojo" />
            <arg value="load=build" />
            <arg value="--profile" />
            <arg value="${dojo.profile.uiDohProfile}" />
        </java>
    </target>

    <!-- Common post-'dojo doh build' clean up -->
    <target name="dojo-doh-post">
        <delete dir="${dojo.build.output.doh}/dijit" includeemptydirs="true" />
        <delete dir="${dojo.build.output.doh}/dojo" includes="**/*" excludes="nls/*.js,resources/**,dojo.js,**/.jazzignore" includeemptydirs="true" />
        <delete dir="${dojo.build.output.doh}/dojo" includes="**/*.js.uncompressed.js,**/*.js.consoleStripped.js,**/*.js.map" includeemptydirs="true" />
        <delete dir="${dojo.build.output.doh}/dojox" includeemptydirs="true" />
        <delete dir="${dojo.build.output.doh}/gridx" includeemptydirs="true" />
        <delete dir="${dojo.build.output.doh}/idx" includeemptydirs="true" />
        <delete file="${dojo.build.output.doh}/build-report.txt" />
    </target>

    <!-- Runtime launcher specific targets -->
    <target name="dojo-doh" depends="dojo-doh-execute, dojo-doh-post" />
    <target name="dojo-doh-nodejs" depends="dojo-doh-nodejs-execute, dojo-doh-post" />

    <!-- Remove available server-side localization string from _ROOT NLS -->
    <target name="dojo-nls-fix">
    	<replaceregexp byline="true" encoding="UTF-8"> 
    		<!-- do not remove localization string for gregorian and number -->
    		<regexp pattern="^(?!'dojo/cldr/nls/number'|'dojo/cldr/nls/gregorian')(.+)&quot;_localized&quot;:\{[^\}]*\}(.+)"/>
    		<substitution expression="\1&quot;_localized&quot;:\{\}\2"/>

    		<fileset dir="${dojo.project.release.output}/dojo/nls/" erroronmissingdir="false">
                <include name="*.js" />
            </fileset>
        </replaceregexp>
    </target>

</project>
