{
  "name": "markdown",
  "version": "0.4.0",
  "description": "A sensible Markdown parser for javascript",
  "keywords": [
    "markdown",
    "text processing",
    "ast"
  ],
  "maintainers": [
    {
      "name": "Dominic Baggott",
      "email": "dominic.baggott@gmail.com",
      "url": "http://evilstreak.co.uk"
    },
    {
      "name": "Ash Berlin",
      "email": "ash_markdownjs@firemirror.com",
      "url": "http://ashberlin.com"
    }
  ],
  "contributors": [
    {
      "name": "Dominic Baggott",
      "email": "dominic.baggott@gmail.com",
      "url": "http://evilstreak.co.uk"
    },
    {
      "name": "Ash Berlin",
      "email": "ash_markdownjs@firemirror.com",
      "url": "http://ashberlin.com"
    }
  ],
  "bugs": {
    "url": "http://github.com/evilstreak/markdown-js/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/evilstreak/markdown-js.git"
  },
  "main": "./lib/index.js",
  "bin": {
    "md2html": "./bin/md2html.js"
  },
  "dependencies": {
    "nopt": "1"
  },
  "devDependencies": {
    "tap": "0"
  },
  "scripts": {
    "test": "tap test/*.t.js"
  },
  "readme": "markdown-js\n===========\n\nYet another markdown parser, this time for JavaScript. There's a few\noptions that precede this project but they all treat markdown to HTML\nconversion as a single step process. You pass markdown in and get HTML\nout, end of story. We had some pretty particular views on how the\nprocess should actually look, which include:\n\n  * producing well-formed HTML. This means that em and strong nesting is\n    important, as is the ability to output as both HTML and XHTML\n\n  * having an intermediate representation to allow processing of parsed\n    data (we in fact have two, both [JsonML]: a markdown tree and an\n    HTML tree)\n\n  * being easily extensible to add new dialects without having to\n    rewrite the entire parsing mechanics\n\n  * having a good test suite. The only test suites we could find tested\n    massive blocks of input, and passing depended on outputting the HTML\n    with exactly the same whitespace as the original implementation\n\n[JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n\n## Installation\n\nJust the `markdown` library:\n\n    npm install markdown\n\nAlso install `md2html` to `/usr/local/bin` (or wherever)\n\n    npm install -g markdown\n\n## Usage\n\nThe simple way to use it with CommonJS is:\n\n    var input = \"# Heading\\n\\nParagraph\";\n    var output = require( \"markdown\" ).markdown.toHTML( input );\n    print( output );\n\nIf you want more control check out the documentation in\n[lib/markdown.js] which details all the methods and parameters\navailable (including examples!). One day we'll get the docs generated\nand hosted somewhere for nicer browsing.\n\nIt also works in a browser; here is a complete example:\n\n    <!DOCTYPE html>\n    <html>\n      <body>\n        <textarea id=\"text-input\" oninput=\"this.editor.update()\"\n                  rows=\"6\" cols=\"60\">Type **Markdown** here.</textarea>\n        <div id=\"preview\"> </div>\n        <script src=\"lib/markdown.js\"></script>\n        <script>\n          function Editor(input, preview)\n          {\n            this.update = function () {\n              preview.innerHTML = markdown.toHTML(input.value);\n            }\n            input.editor = this;\n            this.update();\n          }\n          var $ = function (id) { return document.getElementById(id); };\n          new Editor($(\"text-input\"), $(\"preview\"));\n        </script>\n      </body>\n    </html>\n\n### md2html\n\n    md2html /path/to/doc.md > /path/to/doc.html\n\n[lib/markdown.js]: http://github.com/evilstreak/markdown-js/blob/master/lib/markdown.js\n\n## Intermediate Representation\n\nInternally the process to convert a chunk of markdown into a chunk of\nHTML has three steps:\n\n 1. Parse the markdown into a JsonML tree. Any references found in the\n    parsing are stored in the attribute hash of the root node under the\n    key `references`.\n\n 2. Convert the markdown tree into an HTML tree. Rename any nodes that\n    need it (`bulletlist` to `ul` for example) and lookup any references\n    used by links or images. Remove the references attribute once done.\n\n 3. Stringify the HTML tree being careful not to wreck whitespace where\n    whitespace is important (surrounding inline elements for example).\n\nEach step of this process can be called individually if you need to do\nsome processing or modification of the data at an intermediate stage.\nFor example, you may want to grab a list of all URLs linked to in the\ndocument before rendering it to HTML which you could do by recursing\nthrough the HTML tree looking for `a` nodes.\n\n## Running tests\n\nTo run the tests under node you will need tap installed (it's listed as a\ndevDependencies so `npm install` from the checkout should be enough), then do\n\n    $ ./node_modules/.bin/tap test/*.t.js\n\n## Contributing\n\nDo the usual github fork and pull request dance. Add yourself to the\ncontributors section of package.json too if you want to.\n\n##Â License\n\nReleased under the MIT license.\n",
  "readmeFilename": "README.markdown",
  "_id": "markdown@0.4.0",
  "dist": {
    "shasum": "6a5d7cb751c1d1e6adc374d40e9d358474b59a8e"
  },
  "_resolved": "git://github.com/jsdoc3/markdown-js.git#fd27f4c979f3f71e82e1fe76ffe6415980b31f00",
  "_from": "git://github.com/jsdoc3/markdown-js.git"
}
