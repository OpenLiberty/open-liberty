/*******************************************************************************
 * Copyright (c) 2020 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

import groovy.json.JsonSlurper

configurations {
    libs
    libs1
    libs2
    libs3
    libs4
    libs5
    libs6
    libs7
    libs8
    libs9
    libs10
}

dependencies {
    libs "com.fasterxml.jackson.core:jackson-annotations:2.2.3"
    libs "com.fasterxml.jackson.core:jackson-core:2.2.3"
    libs "com.fasterxml.jackson.core:jackson-databind:2.2.3"
    libs "com.google.javascript:closure-compiler:v20160315"
    libs "com.jcraft:jsch:0.1.54"
    libs "com.sun.xml.bind:jaxb-core:2.3.0.1"
    libs "com.sun.xml.bind:jaxb-impl:2.3.0.1"
    libs "commons-beanutils:commons-beanutils:1.9.2"
    libs "commons-collections:commons-collections:3.2.1"
    libs "commons-digester:commons-digester:1.8.1"
    libs "commons-lang:commons-lang:2.6"
    libs "commons-logging:commons-logging:1.1.1"
    libs "infra-buildtasks-core:infra-buildtasks-core:4.0"
    libs "org.mortbay.jetty:servlet-api-2.5:6.0.0"
    libs "javax.xml.bind:activation:1.0.2"
    libs "javax.xml.bind:jaxb-api:2.3.0"
    libs "nu.validator:htmlparser:1.4.1"
    libs "org.apache.aries:org.apache.aries.util:1.2.0-ibm-s20130314-0952"
    libs "org.apache.velocity:velocity-tools:2.0"
    libs "org.apache.velocity:velocity:1.7"
    libs "org.ccil.cowan.tagsoup:tagsoup:1.2.1"
    libs "org.osgi:org.osgi.core:5.0.0"
    libs "org.ow2.asm:asm-all:5.0.3"
    libs "org.w3c.jigsaw:jigsaw:2.2.6"
    libs "xerces:xercesImpl:2.11.0"
    libs "xml-apis:xml-apis:1.4.01"
    libs "ant-jshint:ant-jshint:0.3.6-deps"
    libs "closure-compiler:compiler:1.0.0"
    libs "css-validator:css-validator:1.0.0"
    libs "org.webjars:jquery:3.5.1"
    libs "org.webjars:bootstrap:3.4.1"
    libs "org.webjars.npm:svg4everybody:2.1.9"
    libs "org.webjars.npm:d3:3.5.10"
    libs "org.eclipse.che.lib:che-orion-editor:6.19.0"
    libs "idx:idx:1.5.2.6@zip"
    libs "manekinekko:dojo-doh-junit-report:master@zip"
    libs "node:node:v0.10.33-aix-ppc@tar.gz"
    libs1 "node:node:v0.10.33-darwin-x64@tar.gz"
    libs2 "node:node:v0.10.33-darwin-x86@tar.gz"
    libs3 "node:node:v0.10.33-linux-ppc@tar.gz"
    libs4 "node:node:v0.10.33-linux-ppcle64@tar.gz"
    libs5 "node:node:v0.10.33-linux-s390@tar.gz"
    libs6 "node:node:v0.10.33-linux-x64@tar.gz"
    libs7 "node:node:v0.10.33-linux-x86@tar.gz"
    libs8 "node:node:v0.10.33-sunos-x86@tar.gz"
    libs9 "node:node:v0.10.33-win-x64@exe"
    libs10 "node:node:v0.10.33-win-x86@exe"
    libs "org.dojotoolkit:dojo:1.12.2@zip"
    libs "org.webjars:gridx:1.3.9@zip"
    libs "closure-externs:externs-jquery-3.2:1.0.0"
    libs "rave:rave:1.8.0.12@zip"
    libs "theintern:intern:2.2.2@zip"
}

task copyBinaryDependencies {
    dependsOn configurations.libs

    doLast {
        // load a map that pairs the GAV coordinate keys to file paths where the downloaded artifact should be copied.
        JsonSlurper slurper = new JsonSlurper()
        def mapGAVToFilePath = slurper.parseText(file('artifactGAVToFilePath.json').text)

        // Use of multiple configurations (lib, lib1, ..., libN) is necessary because Gradle
        // resolves the latest version of an artifact per configuration, so in order to
        // download all versions of the artifact, each older version needs a unique configuration.
        def confSuffixes = [""]
        confSuffixes.addAll((1..10))
        confSuffixes.each {
            // use the set of dependency files to obtain the cached artifact and its GAV coordinates
            configurations."libs$it".each { file ->
                // each file is structured in a way such that the file path is:
                // .../<groupId>/<artifactId>/<version>/<hash>/<file>.<ext>
                def hashDir = file.getParentFile()
                def versionDir = hashDir.getParentFile()
                def artifactIdDir = versionDir.getParentFile()
                def groupIdDir = artifactIdDir.getParentFile()
                String groupId = groupIdDir.getName()
                String artifactId = artifactIdDir.getName()
                String version = versionDir.getName()
                //println groupId + ":" + artifactId + ":" + version

                // for each dependency, we will copy the file from the cache into the correct place in the build by using
                // the map created by parsing artifactGAVToFilePath.json or artifactGAVToFilePath_OSS.json
                def copyTo = null
                if (mapGAVToFilePath["$groupId:$artifactId:$version"] != null) {
                    copyTo = mapGAVToFilePath["$groupId:$artifactId:$version"]
                }

                // raise an error when entries don't exist in the json
                if (copyTo == null) {
                    def msg = "Warning: Missing entry for artifact dependency " + "$groupId:$artifactId:$version" + " from artifactGAVToFilePath.json."
                    println msg
                } else {
                    // artifacts may get copied to one or multiple locations.
                    // handle both cases by turning String typed values into an array of one String typed element.
                    if (copyTo.getClass() == String) {
                        copyTo = [copyTo]
                    }

                    copyTo.each { dest ->
                        String path = dest.substring(0, dest.lastIndexOf("/")) // substring of start to the last /
                        String name = dest.substring(dest.lastIndexOf("/") + 1, dest.length()) // substring of the last / to the end

                        //println "copying $groupId:$artifactId:$version\n    " + file.toString() + "\n    to " + path + "/" + name
                        copy {
                            from file
                            into path
                            rename ".*", name
                            fileMode = Integer.parseInt("755", 8)
                        }
                    }
                }
            }
        }
    }
}