/*******************************************************************************
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.08 at 03:24:59 PM CST 
//


package com.ibm.ws.jpa.diagnostics.class_scanner.ano.jaxb.classinfo10;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ValueType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ValueType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="UNKNOWN"/>
 *     &lt;enumeration value="NULL"/>
 *     &lt;enumeration value="Array"/>
 *     &lt;enumeration value="List"/>
 *     &lt;enumeration value="Map"/>
 *     &lt;enumeration value="Enum"/>
 *     &lt;enumeration value="Object"/>
 *     &lt;enumeration value="java.lang.String"/>
 *     &lt;enumeration value="boolean"/>
 *     &lt;enumeration value="byte"/>
 *     &lt;enumeration value="char"/>
 *     &lt;enumeration value="float"/>
 *     &lt;enumeration value="double"/>
 *     &lt;enumeration value="int"/>
 *     &lt;enumeration value="long"/>
 *     &lt;enumeration value="short"/>
 *     &lt;enumeration value="java.lang.Boolean"/>
 *     &lt;enumeration value="java.lang.Byte"/>
 *     &lt;enumeration value="java.lang.Character"/>
 *     &lt;enumeration value="java.lang.Float"/>
 *     &lt;enumeration value="java.lang.Double"/>
 *     &lt;enumeration value="java.lang.Integer"/>
 *     &lt;enumeration value="java.lang.Long"/>
 *     &lt;enumeration value="java.lang.Short"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ValueType")
@XmlEnum
public enum ValueType {

    UNKNOWN("UNKNOWN"),
    NULL("NULL"),
    @XmlEnumValue("Array")
    ARRAY("Array"),
    @XmlEnumValue("List")
    LIST("List"),
    @XmlEnumValue("Map")
    MAP("Map"),
    @XmlEnumValue("Enum")
    ENUM("Enum"),
    @XmlEnumValue("Object")
    OBJECT("Object"),
    @XmlEnumValue("java.lang.String")
    JAVA_LANG_STRING("java.lang.String"),
    @XmlEnumValue("boolean")
    BOOLEAN("boolean"),
    @XmlEnumValue("byte")
    BYTE("byte"),
    @XmlEnumValue("char")
    CHAR("char"),
    @XmlEnumValue("float")
    FLOAT("float"),
    @XmlEnumValue("double")
    DOUBLE("double"),
    @XmlEnumValue("int")
    INT("int"),
    @XmlEnumValue("long")
    LONG("long"),
    @XmlEnumValue("short")
    SHORT("short"),
    @XmlEnumValue("java.lang.Boolean")
    JAVA_LANG_BOOLEAN("java.lang.Boolean"),
    @XmlEnumValue("java.lang.Byte")
    JAVA_LANG_BYTE("java.lang.Byte"),
    @XmlEnumValue("java.lang.Character")
    JAVA_LANG_CHARACTER("java.lang.Character"),
    @XmlEnumValue("java.lang.Float")
    JAVA_LANG_FLOAT("java.lang.Float"),
    @XmlEnumValue("java.lang.Double")
    JAVA_LANG_DOUBLE("java.lang.Double"),
    @XmlEnumValue("java.lang.Integer")
    JAVA_LANG_INTEGER("java.lang.Integer"),
    @XmlEnumValue("java.lang.Long")
    JAVA_LANG_LONG("java.lang.Long"),
    @XmlEnumValue("java.lang.Short")
    JAVA_LANG_SHORT("java.lang.Short");
    private final String value;

    ValueType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ValueType fromValue(String v) {
        for (ValueType c: ValueType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
