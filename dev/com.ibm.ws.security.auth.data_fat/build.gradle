/*******************************************************************************
 * Copyright (c) 2020, 2023 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

apply plugin: 'war'

war { enabled false } // We aren't making a war for the entire project

dependencies {
  requiredLibs 'org.apache.httpcomponents:httpclient:4.1.2',
               'org.apache.httpcomponents:httpcore:4.1.2',
               project(':io.openliberty.org.apache.commons.codec'),
               project(':io.openliberty.org.apache.commons.logging')
}
addRequiredLibraries.dependsOn addJakartaTransformer

/* 
 * This is where all application ZIP and WARs will be built.
 */
def appBuildDir = "${buildDir}/test-application"


/******************************************************************
 ******************************************************************
 **
 ** DefaultPrincipalMappingApp.war
 **
 ******************************************************************
 ******************************************************************/
task DefaultPrincipalMappingApp_WAR(type: War, dependsOn: classes) {
  destinationDirectory = file("${appBuildDir}")
  archiveFileName = "DefaultPrincipalMappingApp.war"
  classpath = classpath.filter{ false }

  from ('test-applications/DefaultPrincipalMappingApp.war/resources') { 
  	include 'META-INF/**'
  	include 'WEB-INF/**'
  }
  from ('build/classes/java/main') { 
    include 'web/**'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** Assemble all of the custom build artifacts.
 **
 ******************************************************************
 ******************************************************************/
assemble.dependsOn DefaultPrincipalMappingApp_WAR


/******************************************************************
 ******************************************************************
 **
 ** Copy feature bundles and applications to specific servers.
 **
 ******************************************************************
 ******************************************************************/
autoFVT.doLast {

  /*
   * Copy the DefaultPrincipalMappingApp WAR into test servers.
   */
  def servers = [
    'com.ibm.ws.security.auth.data.fat.dpm',
    'com.ibm.ws.security.auth.data.fat.dpm.pu11',
    'com.ibm.ws.security.auth.data.fat.dpm.java2',
    'com.ibm.ws.security.auth.data.fat.dpm.java2.pu11',
    'com.ibm.ws.security.auth.data.fat.dpm.single',
    'com.ibm.ws.security.auth.data.fat.dpm.single.pu11'
  ]
  servers.each { server ->
    copy { 
      from file("${appBuildDir}")
      into new File(autoFvtDir, 'publish/servers/' + server + '/apps')
      include 'DefaultPrincipalMappingApp.war'
    }
  }

}
