/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

plugins {
  id "net.ossindex.audit" version "0.3.8-beta"
}

audit {
    failOnError = true
}

testClasses {
  doFirst {
    String extJarInputDir = "${projectDir}/test/test_data/tool_classpath_files"
    String extJarOutputDir = "${buildDir}/test/test_data/tool"
    String resourceInputDir = "${projectDir}/test/test_data/resource_files"
    String resourceOutputDir = "${buildDir}/test/test_data/resource_files"
    String customInputDir = "${projectDir}/test/test_data/custom_encryption"
    String customOutputDir = "${buildDir}/test/test_data/custom_encryption"
    String customExtensionDir = "bin/tools/extensions/ws-customPasswordEncryption"
    String simpleCustomInputDir = "${projectDir}/test/test_data/simple_custom_encryption"
    String simpleCustomOutputDir = "${buildDir}/test/test_data/simple_custom_encryption"

    // create tool classpath jars
    new File("${extJarOutputDir}").mkdirs()
    ant.jar(destfile: "${extJarOutputDir}/no_extension.jar", manifest: "${extJarInputDir}/no_extension/META-INF/MANIFEST.MF")
    ant.jar(destfile: "${extJarOutputDir}/one_extension.jar", manifest: "${extJarInputDir}/one_extension/META-INF/MANIFEST.MF")
    ant.jar(destfile: "${extJarOutputDir}/multiple_extensions.jar", manifest: "${extJarInputDir}/multiple_extensions/META-INF/MANIFEST.MF")
    ant.jar(destfile: "${extJarOutputDir}/no_matching_extension.jar", manifest: "${extJarInputDir}/no_matching_extension/META-INF/MANIFEST.MF")

    // copy resource files
    copy {
      from "${resourceInputDir}"
      into "${resourceOutputDir}"
    }

    // create the test data for CustomManifest
    new File("${customOutputDir}/${customExtensionDir}").mkdirs()
    new File("${customOutputDir}/${customExtensionDir}/empty").mkdirs()
    ant.jar(destfile: "${customOutputDir}/${customExtensionDir}/valid.jar", manifest: "${customInputDir}/${customExtensionDir}/valid/META-INF/MANIFEST.MF")
    ant.jar(destfile: "${customOutputDir}/${customExtensionDir}/noBundle.jar", manifest: "${customInputDir}/${customExtensionDir}/noBundle/META-INF/MANIFEST.MF")
    ant.jar(destfile: "${customOutputDir}/${customExtensionDir}/noImplClass.jar", manifest: "${customInputDir}/${customExtensionDir}/noImplClass/META-INF/MANIFEST.MF")
    ant.jar(destfile: "${customOutputDir}/${customExtensionDir}/noFeature.jar", manifest: "${customInputDir}/${customExtensionDir}/noFeature/META-INF/MANIFEST.MF")
    ant.jar(destfile: "${customOutputDir}/${customExtensionDir}/noDescription.jar", manifest: "${customInputDir}/${customExtensionDir}/noDescription/META-INF/MANIFEST.MF")
    new File("${simpleCustomOutputDir}/${customExtensionDir}").mkdirs()
    ant.jar(destfile: "${simpleCustomOutputDir}/${customExtensionDir}/simpleCustomEncryption.jar", manifest: "${simpleCustomInputDir}/${customExtensionDir}/simpleCustomEncryption/META-INF/MANIFEST.MF")
    copy {
      from "${customInputDir}"
      into "${customOutputDir}"
    }
    copy {
      from "${simpleCustomInputDir}"
      into "${simpleCustomOutputDir}"
    }
    ant.jar(destfile: "${simpleCustomOutputDir}/bin/tools/ws-securityutil.jar", manifest: "${extJarInputDir}/one_extension/META-INF/MANIFEST.MF")
  }
}
