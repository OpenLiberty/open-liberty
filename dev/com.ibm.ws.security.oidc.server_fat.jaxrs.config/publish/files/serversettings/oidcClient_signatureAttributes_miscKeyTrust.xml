<!--
    Copyright (c) 2021 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html

    Contributors:
        IBM Corporation - initial API and implementation
 -->

<server>

	<authFilter
		id="myAuthFilter_keyTrust_clientBadSSLRef_serverRS256_clientRS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_clientBadSSLRef_serverRS256_clientRS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_clientBadSSLRef_serverRS256_clientRS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_RS256_AltCert}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert"
		sslRef="BadKeySSLSettings"
		signatureAlgorithm="RS256"
		authFilterRef="myAuthFilter_keyTrust_clientBadSSLRef_serverRS256_clientRS256"
	>
	</openidConnectClient>

	<authFilter
		id="myAuthFilter_keyTrust_clientBadTrustRef_serverRS256_clientRS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_clientBadTrustRef_serverRS256_clientRS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_clientBadTrustRef_serverRS256_clientRS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_RS256_AltCert}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert"
		signatureAlgorithm="RS256"
		trustStoreRef="badTrustStore"
		authFilterRef="myAuthFilter_keyTrust_clientBadTrustRef_serverRS256_clientRS256"
	>
	</openidConnectClient>

	<authFilter
		id="myAuthFilter_keyTrust_clientBadTrustAlias_serverRS256_clientRS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_clientBadTrustAlias_serverRS256_clientRS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_clientBadTrustAlias_serverRS256_clientRS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_RS256_AltCert}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_AltCert"
		signatureAlgorithm="RS256"
		trustStoreRef="multiKeyTrust"
		trustAliasName="doesNotExist"
		authFilterRef="myAuthFilter_keyTrust_clientBadTrustAlias_serverRS256_clientRS256"
	>
	</openidConnectClient>

	<authFilter id="myAuthFilter_keyTrust_serverBad_serverRS256_clientRS256">
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_serverBad_serverRS256_clientRS256"
			matchType="contains" />
	</authFilter>

	<!-- uses the server wide key store in the OP - cert is DSA which won't 
		work creating an RS256 token -->
	<openidConnectClient
		id="client_keyTrust_serverBad_serverRS256_clientRS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		keystoreRef="ecKeyStore"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_ServerKeys/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_ServerKeys/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_ServerKeys/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_RS256_ServerKeys}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_RS256_ServerKeys,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_ServerKeys"
		signatureAlgorithm="RS256"
		authFilterRef="myAuthFilter_keyTrust_serverBad_serverRS256_clientRS256"
	>
	</openidConnectClient>


	<authFilter
		id="myAuthFilter_keyTrust_clientBadSSLRef_serverHS256_clientHS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_clientBadSSLRef_serverHS256_clientHS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_clientBadSSLRef_serverHS256_clientHS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_HS256}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_HS256,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256"
		sslRef="BadKeySSLSettings"
		signatureAlgorithm="HS256"
		authFilterRef="myAuthFilter_keyTrust_clientBadSSLRef_serverHS256_clientHS256"
	>
	</openidConnectClient>

	<authFilter
		id="myAuthFilter_keyTrust_clientBadTrustRef_serverHS256_clientHS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_clientBadTrustRef_serverHS256_clientHS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_clientBadTrustRef_serverHS256_clientHS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_HS256}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_HS256,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256"
		trustStoreRef="badTrustStore"
		signatureAlgorithm="HS256"
		authFilterRef="myAuthFilter_keyTrust_clientBadTrustRef_serverHS256_clientHS256"
	>
	</openidConnectClient>

	<authFilter
		id="myAuthFilter_keyTrust_clientBadTrustAlias_serverHS256_clientHS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_clientBadTrustAlias_serverHS256_clientHS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_clientBadTrustAlias_serverHS256_clientHS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_HS256}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_HS256,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256"
		trustAliasName="doesNotExist"
		trustStoreRef="myTrustStore"
		signatureAlgorithm="HS256"
		authFilterRef="myAuthFilter_keyTrust_clientBadTrustAlias_serverHS256_clientHS256"
	>
	</openidConnectClient>


	<authFilter id="myAuthFilter_keyTrust_clientBad_serverNONE_clientNONE">
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_clientBad_serverNONE_clientNONE"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_clientBad_serverNONE_clientNONE"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_NONE/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_NONE/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_NONE/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_NONE}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_NONE,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_NONE"
		sslRef="BadKeySSLSettings"
		signatureAlgorithm="NONE"
		authFilterRef="myAuthFilter_keyTrust_clientBad_serverNONE_clientNONE"
	>
	</openidConnectClient>


	<authFilter
		id="myAuthFilter_keyTrust_serverBadKeyStoreRef_serverRS256_clientRS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_serverBadKeyStoreRef_serverRS256_clientRS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_keyTrust_serverBadKeyStoreRef_serverRS256_clientRS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyStoreRef/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyStoreRef/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyStoreRef/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_RS256_BadKeyStoreRef}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyStoreRef,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyStoreRef"
		signatureAlgorithm="RS256"
		authFilterRef="myAuthFilter_keyTrust_serverBadKeyStoreRef_serverRS256_clientRS256"
	>
	</openidConnectClient>

	<authFilter
		id="myAuthFilter_keyTrust_serverBadTrustStoreRef_serverRS256_clientRS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_serverBadTrustStoreRef_serverRS256_clientRS256"
			matchType="contains" />
	</authFilter>

	<!-- uses the server wide key store in the OP - cert is DSA which won't 
		work creating an RS256 token -->
	<openidConnectClient
		id="client_keyTrust_serverBadTrustStoreRef_serverRS256_clientRS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadTrustStoreRef/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadTrustStoreRef/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadTrustStoreRef/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_RS256_BadTrustStoreRef}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadTrustStoreRef,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadTrustStoreRef"
		signatureAlgorithm="RS256"
		trustStoreRef="multiKeyTrust"
		trustAliasName="rsakey"
		authFilterRef="myAuthFilter_keyTrust_serverBadTrustStoreRef_serverRS256_clientRS256"
	>
	</openidConnectClient>

	<authFilter
		id="myAuthFilter_keyTrust_serverBadKeyAliasName_serverRS256_clientRS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_keyTrust_serverBadKeyAliasName_serverRS256_clientRS256"
			matchType="contains" />
	</authFilter>

	<!-- uses the server wide key store in the OP - cert is DSA which won't 
		work creating an RS256 token -->
	<openidConnectClient
		id="client_keyTrust_serverBadKeyAliasName_serverRS256_clientRS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="secret"
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyAliasName/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyAliasName/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyAliasName/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_RS256_BadKeyAliasName}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyAliasName,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_RS256_BadKeyAliasName"
		signatureAlgorithm="RS256"
		authFilterRef="myAuthFilter_keyTrust_serverBadKeyAliasName_serverRS256_clientRS256"
	>
	</openidConnectClient>


	<authFilter
		id="myAuthFilter_clientBadClientSecret_serverHS256_clientHS256"
	>
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_clientBadClientSecret_serverHS256_clientHS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_clientBadClientSecret_serverHS256_clientHS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}OyoyMiYPCA=="
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_HS256}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_HS256,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256"
		signatureAlgorithm="HS256"
		authFilterRef="myAuthFilter_clientBadClientSecret_serverHS256_clientHS256"
	>
	</openidConnectClient>

	<authFilter id="myAuthFilter_clientBadSharedKey_serverHS256_clientHS256">
		<requestUrl
			id="myRequestUrl"
			urlPattern="helloworld_clientBadSharedKey_serverHS256_clientHS256"
			matchType="contains" />
	</authFilter>

	<openidConnectClient
		id="client_clientBadSharedKey_serverHS256_clientHS256"
		scope="openid profile"
		clientId="client01"
		clientSecret="{xor}LDo8LTor"
		sharedKey="{xor}OyoyMiYPCA=="
		httpsRequired="false"
		inboundPropagation="required"
		redirectToRPHostAndPort="http://localhost:${bvt.prop.security_3_HTTP_default}"
		authorizationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/authorize"
		tokenEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/token"
		validationEndpointUrl="http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256/${oAuthOidcRSValidationType}"
		validationMethod="${oAuthOidcRSValidationType}"
		jwkEndpointUrl="${oidcJWKValidationURL_SigAlg_HS256}"
		issuerIdentifier="https://localhost:${bvt.prop.security_1_HTTP_default.secure}/${providerRoot}/endpoint/OidcConfigSample_HS256,http://localhost:${bvt.prop.security_1_HTTP_default}/${providerRoot}/endpoint/OidcConfigSample_HS256"
		signatureAlgorithm="HS256"
		authFilterRef="myAuthFilter_clientBadSharedKey_serverHS256_clientHS256"
	>
	</openidConnectClient>


	<ssl
		id="BadKeySSLSettings"
		keyStoreRef="myKeyStore"
		trustStoreRef="badTrustStore"
		clientAuthenticationSupported="true" />
	<keyStore
		id="badTrustStore"
		password="WebAS"
		type="jks"
		location="${server.config.dir}/commonDummyServerTrustFile.jks" />
	<keyStore
		id="ecKeyStore"
		password="Liberty"
		type="jks"
		location="${server.config.dir}/ec.jks" />

</server>
