<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Copyright (c) 2020, 2023 IBM Corporation and others. All rights reserved.
    This program and the accompanying materials are made available under the 
    terms of the Eclipse Public License 2.0 which accompanies this distribution, 
    and is available at 
        http://www.eclipse.org/legal/epl-2.0/
    
    SPDX-License-Identifier: EPL-2.0 
    Contributors: 
        IBM Corporation - initial API and implementation
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.openliberty.microprofile.config31.internal</groupId>
    <artifactId>tck.runner.tck</artifactId>
    <version>3.1</version>
    <name>MicroProfile Config 3.1 TCK Runner TCK Module</name>

    <properties>
        <!-- The API and TCK versions should be the same before GA -->
        <microprofile.config.api.version>3.1</microprofile.config.api.version>
        <microprofile.config.tck.version>3.1</microprofile.config.tck.version>
        <arquillian.version>1.7.0.Alpha14</arquillian.version>
        <arquillian.liberty.managed.jakarta.version>2.1.1</arquillian.liberty.managed.jakarta.version>
        <testng.version>7.5.1</testng.version>
        <hamcrest.version>1.3</hamcrest.version>
        <slf4j.version>2.0.6</slf4j.version>

        <!-- the below is used in arquillian.xml -->
        <wlp>${wlp}</wlp>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <defaultSuiteFiles>tck-suite.xml</defaultSuiteFiles>
        <suiteXmlFile>${defaultSuiteFiles}</suiteXmlFile>
        <targetDirectory>${project.basedir}/target</targetDirectory>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${arquillian.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Needed for ZOS. Defines the version of this artifact that arquillian-liberty-managed should use -->
            <!-- This doesn't exist for JEE 9 so leaving it out for now, will have to see what happens on ZOS -->
            <!-- <dependency>
                <groupId>org.jboss.spec.javax.servlet</groupId>
                <artifactId>jboss-servlet-api_3.0_spec</artifactId>
                <version>1.0.2.Final</version>
            </dependency>-->
        </dependencies>
    </dependencyManagement> 

    <!-- snapshot version of the TCK is in DHE. Should use the real 3.1 version before GA -->
    <repositories>
        <!-- If the TCK is using a custom built artifact, e.g.- microprofile-config-tck:3.1.0.ibm28062023.
        And Artifactory is unavailable, the following DHE repository should be searched for the artifact -->
        <repository>
            <name>IBM DHE Maven repository</name>
            <id>DHE</id>
            <url>https://public.dhe.ibm.com/ibmdl/export/pub/software/olrepo</url>
        </repository>
    </repositories>

    <dependencies>

        <dependency>
            <groupId>com.ibm.ws</groupId>
            <artifactId>fattest.simplicity</artifactId>
            <version>1</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/../../../lib/fattest.simplicity.jar</systemPath> <!-- This will point to build/libs/autoFVT/lib/fattest.simplicity.jar -->
        </dependency>

        <dependency>
            <groupId>org.eclipse.microprofile.config</groupId>
            <artifactId>microprofile-config-tck</artifactId>
            <version>${microprofile.config.tck.version}</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.microprofile.config</groupId>
            <artifactId>microprofile-config-api</artifactId>
            <version>${microprofile.config.api.version}</version>
            <scope>system</scope>
            <systemPath>${io.openliberty.org.eclipse.microprofile.config.3.1_}</systemPath>
        </dependency>

        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <version>4.0.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>${hamcrest.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>${slf4j.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.testng</groupId>
            <artifactId>arquillian-testng-container</artifactId>
            <version>${arquillian.version}</version>
        </dependency>

        <dependency>
            <groupId>io.openliberty.arquillian</groupId>
            <artifactId>arquillian-liberty-managed-jakarta</artifactId>
            <version>${arquillian.liberty.managed.jakarta.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
         <groupId>org.apache-extras.beanshell</groupId>
         <artifactId>bsh</artifactId>
         <version>2.0b6</version>
       </dependency>

    </dependencies>

    <build>
        <directory>${targetDirectory}</directory>
        <defaultGoal>clean test</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.9</version>
                <executions>
                    <execution>
                        <id>build-classpath</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>build-classpath</goal>
                        </goals>
                        <configuration>
                            <!-- configure the plugin here -->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version> <!-- Any changes to the surefire version must be tested against ZOS -->
                <configuration>
                    <argLine>-Dfile.encoding=${project.build.sourceEncoding} -Dcom.ibm.tools.attach.enable=yes</argLine> <!-- Needed for ZOS. sourceEncoding is needed becuase arquillian calls string.getBtytes(). Attach is needed becuase because arquillian uses com.sun.tools.attach to find VMs -->
                    <systemPropertyVariables>
                        <wlp>${wlp}</wlp>
                        <tck_server>${tck_server}</tck_server>
                        <tck_port>${tck_port}</tck_port>
                        <sun.rmi.transport.tcp.responseTimeout>${sun.rmi.transport.tcp.responseTimeout}</sun.rmi.transport.tcp.responseTimeout>
                        <mp.tck.prop.dummy>dummy</mp.tck.prop.dummy>
                        <customer.hobby>Tennis</customer.hobby>
                        <config_ordinal>120</config_ordinal>
                    </systemPropertyVariables>
                    <environmentVariables>
                        <MP_TCK_ENV_DUMMY>dummy</MP_TCK_ENV_DUMMY>
                        <my_int_property>45</my_int_property>
                        <MY_BOOLEAN_PROPERTY>true</MY_BOOLEAN_PROPERTY>
                        <my_string_property>haha</my_string_property>
                        <MY_STRING_PROPERTY>woohoo</MY_STRING_PROPERTY>
                        <config_ordinal>45</config_ordinal>
                        <customer_name>Bob</customer_name>
                    </environmentVariables>
                    <suiteXmlFiles>
                        <suiteXmlFile>${suiteXmlFile}</suiteXmlFile>
                    </suiteXmlFiles>
                    <testSourceDirectory>${basedir}${file.separarator}src${file.separarator}main${file.separarator}java${file.separarator}</testSourceDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
