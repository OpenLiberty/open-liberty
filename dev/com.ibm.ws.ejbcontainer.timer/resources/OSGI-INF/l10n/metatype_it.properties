###############################################################################
# Copyright (c) 2014, 2020 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#CMVCPATHNAME com.ibm.ws.ejbcontainer.timer/resources/OSGI-INF/l10n/metatype.properties
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#

# EJB Container TimerService

timerService=Servizio timer EJB
timerService.desc=Definisce il comportamento del servizio timer EJB.

lateTimerThreshold=Soglia di avvertenza ritardo timer
lateTimerThreshold.desc=Il numero di minuti dopo la scadenza pianificata di un timer dopo cui il timer sar\u00e0 considerato in ritardo. Quando un timer parte in ritardo, viene registrato un messaggio di avvertenza che indica che il timer si \u00e8 avviato dopo il previsto. La soglia predefinita \u00e8 5 minuti e un valore di 0 minuti disattiva la funzione dei messaggi di avvertenza.

nonPersistentRetryInterval=Intervallo tra tentativi
nonPersistentRetryInterval.desc=Quando un timer non persistente scade, viene chiamato il metodo callback del timeout. Se la transazione per questo metodo di callback non riesce o viene sottoposta a rollback, il contenitore deve ripetere il tentativo per il timer. Il primo tentativo avviene immediatamente, mentre i tentativi successivi vengono ritardati in base al numero di secondi specificati. Se il valore \u00e8 impostato su 0, tutti i tentativi avvengono immediatamente. Se non si specifica un valore, l'intervallo predefinito \u00e8 300 secondi.

nonPersistentMaxRetries=Numero massimo di tentativi
nonPersistentMaxRetries.desc=Quando un timer non persistente scade, viene chiamato il metodo callback del timeout. Questa impostazione controlla quante volte il contenitore EJB tenta di ripetere il timer. Se la transazione per questo metodo di callback non riesce o viene sottoposta a rollback, il contenitore EJB deve ripetere il tentativo per il timer almeno una volta. Il valore predefinito \u00e8 -1, che indica che il contenitore EJB ritenta all'infinito fino a quando il timer non ha esito positivo. Se il valore \u00e8 impostato su 0, il contenitore EJB non esegue un nuovo tentativo per il timer, tuttavia, ci\u00f2 determina un funzionamento che non \u00e8 conforme alla specifica EJB.

persistentExecutorRef=Executor pianificato timer EJB persistenti
persistentExecutorRef$Ref=Riferimento executor timer EJB persistenti
persistentExecutorRef.desc=Pianifica ed esegue le attivit\u00e0 del timer persistente EJB.

nonPersistentContextServiceRef=Propagazione contesto thread timer non persistente
nonPersistentContextServiceRef$Ref=Riferimento alla propagazione del contesto di thread
nonPersistentContextServiceRef.desc=Il servizio di contesto viene utilizzato per gestire la propagazione del contesto a thread di metodo timer non persistenti.

missedPersistentTimerAction=Azione timer persistente mancato
missedPersistentTimerAction.desc=Specifica l'azione da eseguire quando non viene rispettata la scadenza di un intervallo o un timer persistente basato su una pianificazione. Una o pi\u00f9 scadenze di un timer persistente vengono classificate come mancate se la scadenza corrente \u00e8 prevista prima dell'avvio del server delle applicazioni o la scadenza successiva \u00e8 prevista prima dell'ora corrente. L'azione predefinita quando il failover dei timer persistenti \u00e8 abilitato \u00e8 ONCE, altrimenti l'azione predefinita \u00e8 ALL.
missedPersistentTimerAction.ALL=Il metodo di timeout viene richiamato immediatamente per tutte le scadenze mancante. Quando non vengono rispettate pi\u00f9 scadenze per lo stesso timer, ogni richiamo si verifica in modo sincrono fino a quando non vengono elaborate tutte le scadenze mancate, poi il timer riprende con la successiva scadenza futura. 
missedPersistentTimerAction.ONCE=Il metodo di timeout viene richiamato una volta immediatamente. Tutte le altre scadenze mancate sono ignorate e il timer riprende con la successiva scadenza futura. 
