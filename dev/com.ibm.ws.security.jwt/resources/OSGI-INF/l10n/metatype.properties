###############################################################################
# Copyright (c) 2016 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#
#ISMESSAGEFILE FALSE
# -------------------------------------------------------------------------------------------------

jwtBuilder=JWT Builder
jwtBuilder.desc=Information about configuring the builder. The elements and attributes that you specify are used to build the token.
id=Builder id
id.desc=This id is used to identify the builder.
issuerIdentifier=Issuer
issuerIdentifier.desc=An Issuer is a case-sensitive URL using the HTTP or HTTPS scheme that contains scheme, host, and optionally port number and path components.
jwkEnabled=Enable JSON web key (JWK)
jwkEnabled.desc=Indicates whether to use JWK to sign the token.

valid=Token expiration time
valid.desc=Indicates the token expiration time.
claims=Supported claims
claims.desc=Specify a comma separated list of claims to include in the token.

scope=Supported scopes
scope.desc=scope.desc=Specify a white space separated list of OAuth scopes.
jti=JTI
jti.desc=Indicates whether to generate a unique id for the token.
keyStoreRef=Keystore
keyStoreRef.desc=A keystore containing the private key necessary for signing the token with an asymmetric algorithm.
keyAliasName=Key alias name
keyAliasName.desc=A key alias name that is used to locate the private key for signing the token with an asymmetric algorithm.
trustedAliasName=Trusted alias name
trustedAliasName.desc=A trusted key alias for using the public key to verify the signature of the token
trustStoreRef=Trust keystore
trustStoreRef.desc=A keystore containing the public key necessary for verifying a signature of the JWT token.

jwkRotationTime=JWK rotation time
jwkRotationTime.desc=Amount of time after which a new JWK will be generated.

jwkSigningKeySize=JWK signing key size
jwkSigningKeySize.desc=Size measured in bits of the signing key.
jwkSigningKeySize.1024=1024 bits
jwkSigningKeySize.2048=2048 bits
jwkSigningKeySize.4096=4096 bits

tokenEndpointHttpsRequired=Token generation endpoint HTTPS required
tokenEndpointHttpsRequired.desc=Indicates whether HTTPS is required for communication with the token generation endpoint. 
#Do not translate "aud"
audiences=Trusted audiences
audiences.desc=The trusted audience list to be included in the aud claim in the JSON web token.

signatureAlgorithm=JWT token signature algorithm
signatureAlgorithm.desc=Specifies the signature algorithm that will be used to sign the JWT token.

tokenSignAlgorithm.RS256=Use the RS256 signature algorithm to sign and verify tokens.
tokenSignAlgorithm.HS256=Use the HS256 signature algorithm to sign and verify tokens.

sharedKey=Shared secret
sharedKey.desc=Specifies the string that will be used to generate the shared keys. The value can be stored in clear text or in the more secure encoded form. Use the securityUtility tool with the encode option to encode the shared key.

# JWT Consumer
jwtConsumer=JWT Consumer
jwtConsumer.desc=The JWT consumer information to validate the JWT token.

clockSkew=The time difference allowed between systems
clockSkew.desc=This is used to specify the allowed clock skew in minutes when validating the JSON web token.

sslRef=SSL Reference
sslRef.desc=Specifies an ID of the SSL configuration that is used to connect to the OpenID Connect provider.
sslRef$Ref=SSL reference

jwkEndpointUrl=JSON web key(JWK) end point URL
jwkEndpointUrl.desc=Specifies a JWK end point URL.

