#CMVCPATHNAME N/A
#COMPONENTPREFIX CWMOT
#COMPONENTNAMEFOR CWMOT MicroProfile Telemetry Tracing
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#ISMESSAGEFILE true
# -------------------------------------------------------------------------------------------------
#*******************************************************************************
# Copyright (c) 2023, 2024 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License 2.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-2.0/
# 
# SPDX-License-Identifier: EPL-2.0
# 
# Contributors:
#     IBM Corporation - initial API and implementation
#*******************************************************************************
# This file follows the WebSphere Message Guidelines.
# For more information, visit:
# http://washome.austin.ibm.com/xwiki/bin/view/MessagesTeam/
# 
#-----------------------------------------------------------------------------------------------------------------------------
# Message prefix block: CWMOT5000 - CWMOT5999
#-----------------------------------------------------------------------------------------------------------------------------
# Message prefix block for io.openliberty.microprofile.telemetry.common: CWMOT5000 - CWMOT5199
# This was previously two files, so the message IDs used are not contiguous but should not be changed.

CWMOT5100.tracing.is.disabled=CWMOT5100I: The MicroProfile Telemetry Tracing feature is enabled but not configured to generate traces for the {0} application.
CWMOT5100.tracing.is.disabled.explanation=The MicroProfile Telemetry Tracing feature needs to be configured to create traces and export them to a tracing system.
CWMOT5100.tracing.is.disabled.useraction=To enable tracing, specify otel.sdk.disabled=false in any of the configuration sources accessible through MicroProfile Config. Further configuration might be required to allow the MicroProfile Telemetry Tracing feature to export traces to your tracing system.

CWMOT5000.cannot.get.globalopentelemetry=CWMOT5000W: The GlobalOpenTelemetry.get method was called. This method returns a non-functional OpenTelemetry object. Use CDI to inject an OpenTelemetry object instead.
CWMOT5000.cannot.get.globalopentelemetry.explanation=The GlobalOpenTelemetry class is not supported because no global OpenTelemetry object exists. Instead, each application must use CDI to inject the OpenTelemetry object for that application.
CWMOT5000.cannot.get.globalopentelemetry.useraction=Use CDI to inject the OpenTelemetry object.

CWMOT5001.cannot.set.globalopentelemetry=CWMOT5001E: Setting the GlobalOpenTelemetry object is not supported.
CWMOT5001.cannot.set.globalopentelemetry.explanation=The GlobalOpenTelemetry class is not supported because no global OpenTelemetry object exists. Instead, each application must use CDI to inject the OpenTelemetry object for that application.
CWMOT5001.cannot.set.globalopentelemetry.useraction=Do not call the GlobalOpenTelemetry.get method. Where the application code needs to obtain an OpenTelemetry object, use CDI to inject it.

CWMOT5002.telemetry.error=CWMOT5002E: An internal error occurred in MicroProfile Telemetry. The error is: {0}.
CWMOT5002.telemetry.error.explanation=An error occurred that prevented the normal operation of MicroProfile Telemetry.
CWMOT5002.telemetry.error.useraction=Review the server message.log file and FFDC logs to identify the problem.

CWMOT5003.factory.used.after.shutdown=CWMOT5003W: The {0} application  attempted to acquire MicroProfile Telemetry after the application shut down.
CWMOT5003.factory.used.after.shutdown.explanation=CWMOT5003.factory.used.after.shutdown.explanation=After an application shuts down, MicroProfile Telemetry returns objects that silently perform no-op actions when they are invoked. This process might lead to the absence of expected telemetry data.
CWMOT5003.factory.used.after.shutdown.useraction=Review the application to see why it attempted to use MicroProfile Telemetry after  shutting down. Actions that can trigger the use of MicroProfile Telemetry include calling a method that is annotated with @WithSpan or making a request with a JAX-RS Client or MP Rest Client.

CWMOT5004.factory.used.without.metadata=CWMOT5004W: A request was made for an OpenTelemetry object but no application metadata, and no global OpenTelemetry object was available. 
CWMOT5004.factory.used.without.metadata.explanation=CWMOT5004.factory.used.without.metadata.explanation=If there is no global OpenTelemetry object Liberty's MicroProfile Telemetry integration code will attempt to find the correct OpenTelemetry object for the current application by using the application metadata on the current thread. However as there was no metadata on the thread it was unable to do so. 
CWMOT5004.factory.used.without.metadata.useraction=Review your code to see why the integration code attempted to use MicroProfile Telemetry without metadata and a server scoped OpenTelemetry object. The integration code most likely tries to create new threads without using the ManagedExecutorService interface and to acquire an OpenTelemetry object from within the application. To acquire an OpenTemetry object outside of an application, enable OpenTelemetry through an environment variable or a system property.

CWMOT5005.mptelemetry.unknown.log.source=CWMOT5005W: The MicroProfile Telemetry logging feature does not recognize the [ {0} ] log source.
CWMOT5005.mptelemetry.unknown.log.source.explanation=The Liberty runtime environment does not provide the specified log source.
CWMOT5005.mptelemetry.unknown.log.source.useraction=Check the configuration information and specify one of the supported sources for MicroProfile Telemetry.

CWMOT5006.mptelemetry.using.app.mode=CWMOT5006W: Liberty is configured to create one instance of Open Telemetry per application. Runtime metrics and logs will not be enabled.
CWMOT5006.mptelemetry.using.app.mode.explanation In MPTelemetry 2.0 new features, such as JVM metrics, were created that require one shared instance of Open Telemetry across all applications. Because MPTelemetry is configured to have one instance per application these features will be disabled.
CWMOT5006.mptelemetry.using.app.mode.useraction To enable runtime metrics and logs, transfer your Open Telemetry configuration properties into your system properties or environment variables.

#-----------------------------------------------------------------------------------------------------------------------------
# Monitor Metrics messages
#-----------------------------------------------------------------------------------------------------------------------------

threadpool.activeThreads.description=The number of threads that are actively running tasks.
threadpool.size.description=The size of the thread pool.

session.activeSessions.description=The number of concurrently active sessions. A session is active when the runtime is processing a request that uses that user session.
session.created.description=The number of sessions logged in since this metric was enabled.
session.invalidated.description=The number of sessions logged out since this metric was enabled.
session.invalidatedbyTimeout.description=The number of sessions logged out because of a timeout since this metric was enabled.
session.live.description=The number of users that are currently logged in.

connectionpool.handle.count.description=The number of connections that are in use. This number might include multiple connections that are shared from a single managed connection.
connectionpool.connection.created.description=The total number of managed connections that were created since the pool creation.
connectionpool.connection.destroyed.description=The total number of managed connections that were destroyed since the pool creation.
connectionpool.connection.free.description=The number of managed connections that are available.
connectionpool.connection.waitTime.description=The total amount of time that connection requests waited for a connection.
connectionpool.connection.useTime.description=The total amount of time that all connections to the data source were in use.
connectionpool.connection.count.description=The current number of managed connections in the pool. This value includes managed connections that are available and those that are in use. A single managed connection that is shared by multiple connections counts only once.

requestTiming.processed.description=The number of servlet requests since the server started.
requestTiming.active.description=The number of servlet requests that are currently running.
requestTiming.slow.description=The number of servlet requests that are currently running but are slow.
requestTiming.hung.description=The number of servlet requests that are currently hung.

#-----------------------------------------------------------------------------------------------------------------------------
# HTTP Metrics messages
#-----------------------------------------------------------------------------------------------------------------------------

http.server.request.duration.description=Duration of HTTP server requests.
