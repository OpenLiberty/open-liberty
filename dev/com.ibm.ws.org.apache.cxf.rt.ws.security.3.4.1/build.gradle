/*******************************************************************************
 * Copyright (c) 2019 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

audit {
    failOnError = false
}

configurations {
    cxfJar
}

dependencies {
    cxfJar 'org.apache.cxf:cxf-rt-ws-security:3.3.6'
}

task extractInjectedClasses(type: Copy) {
   from zipTree(configurations.cxfJar[0])
   include "org/apache/cxf/binding/xml/interceptor/XMLFaultInInterceptor.class",
           "org/apache/cxf/ws/security/wss4j/AbstractUsernameTokenAuthenticatingInterceptor.class",
           "org/apache/cxf/ws/security/wss4j/AbstractWSS4JInterceptor.class",
           "org/apache/cxf/ws/security/wss4j/PolicyBasedWSS4JInInterceptor.class",
           "org/apache/cxf/ws/security/wss4j/PolicyBasedWSS4JOutInterceptor.class",
           "org/apache/cxf/ws/security/wss4j/WSS4JInInterceptor.class",
           "org/apache/cxf/ws/security/wss4j/WSS4JOutInterceptor.class"
   into compileJava.destinationDir
}

compileJava.dependsOn extractInjectedClasses

task instrument {
  if (!parseBoolean(bnd('instrument.disabled', 'false'))) {
    inputs.files { rasInstrumentationInputFiles() }
    def instrument = fileTree(dir: compileJava.destinationDir, include: bnd('instrument.classesIncludes').split("\\s*,\\s*"), exclude: bnd('instrument.classesExcludes').split("\\s*,\\s*"))
    doLast {
      if (instrument.isEmpty())
        return
      rasInstrumentationTaskdef(ant)
      ant.instrumentForTrace(ffdc: bnd('instrument.ffdc'), taskInjection: bnd('instrument.taskInjection')) {
          fileset(dir: compileJava.destinationDir, includes: bnd('instrument.classesIncludes'), excludes: bnd('instrument.classesExcludes'))
      }
    }
  }
}

jar.dependsOn instrument
