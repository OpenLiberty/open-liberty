/*******************************************************************************
 * Copyright (c) 2017,2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package com.ibm.wsspi.security.wim.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import com.ibm.websphere.security.wim.ras.WIMTraceHelper;

/**
 * <p>Java class for IdentifierType complex type.
 *
 * <p> The IdentifierType object provides the capability of adding certain properties on an {@link Entity} type
 * to distinguish the object. The properties <b>uniqueName</b> and <b>uniqueId</b> are used to uniquely identify an
 * Entity in VMM. Entities that are supported in VMM include {@link Person} and {@link Group}.
 *
 * <ul>
 * <li><b>uniqueId</b>: is machine-friendly. i.e., it is not readily recognizable or readily generated by a human.
 * It should be a globally unique identifier generated either by VMM or by the underlying repositories. The client
 * should not interpret the content of <b>uniqueId</b>. The <b>uniqueId</b> property should never change and should not
 * be reused. If an entity is renamed or moved, its <b>uniqueId</b> must remain the same.</li>
 * <li><b>uniqueName</b>: is human-friendly. It is in the form of an LDAP distinguished name. A distinguished
 * name is a string that includes the location of the entity in the VMM hierarchy, and is formed by concatenating the
 * relative distinguished name of the entity and each of its ancestors all the way to the root. For example, the
 * distinguished name of a person in the container "cn=users,dc=mycompany,dc=com" would be
 * "uid=myUser,cn=users,dc=mycompany,dc=com".</li>
 * <li><b>externalId</b>: defines the external identifier generated by the underlying repository. Each repository
 * defines it's own unique externalId.</li>
 * </ul>
 *
 * <p> By default, VMM requires the caller to identify an entity by either the uniqueId or uniqueName. If the property
 * <b>externalName</b> is specified, the externalName is used to identify the entity.
 * <ul>
 * <li><b>repositoryId</b>: defines the underlying repository in which this entity exists.</li>
 * </ul>
 */
@XmlAccessorType(XmlAccessType.NONE)
@XmlType(name = IdentifierType.TYPE_NAME)
public class IdentifierType {

    /** The type name for this data type. */
    public static final String TYPE_NAME = "IdentifierType";

    /** Property name constant for the <b>uniqueId</b> property. */
    private static final String PROP_UNIQUE_ID = "uniqueId";

    /** Property name constant for the <b>uniqueName</b> property. */
    private static final String PROP_UNIQUE_NAME = "uniqueName";

    /** Property name constant for the <b>externalId</b> property. */
    private static final String PROP_EXTERNAL_ID = "externalId";

    /** Property name constant for the <b>externalName</b> property. */
    private static final String PROP_EXTERNAL_NAME = "externalName";

    /** Property name constant for the <b>repositoryId</b> property. */
    private static final String PROP_REPOSITORY_ID = "repositoryId";

    /**
     * Is machine-friendly. i.e., it is not readily recognizable or readily generated by a human.
     * It should be a globally unique identifier generated either by VMM or by the underlying repositories. The client
     * should not interpret the content of <b>uniqueId</b>. The <b>uniqueId</b> property should never change and should not
     * be reused. If an entity is renamed or moved, its <b>uniqueId</b> must remain the same.
     */
    @XmlAttribute(name = PROP_UNIQUE_ID)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String uniqueId;

    /**
     * Is human-friendly. It is in the form of an LDAP distinguished name. A distinguished
     * name is a string that includes the location of the entity in the VMM hierarchy, and is formed by concatenating the
     * relative distinguished name of the entity and each of its ancestors all the way to the root. For example, the
     * distinguished name of a person in the container "cn=users,dc=mycompany,dc=com" would be
     * "uid=myUser,cn=users,dc=mycompany,dc=com".
     */
    @XmlAttribute(name = PROP_UNIQUE_NAME)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String uniqueName;

    /**
     * Defines the external identifier generated by the underlying repository. Each repository
     * defines it's own unique externalId.
     */
    @XmlAttribute(name = PROP_EXTERNAL_ID)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String externalId;

    /**
     * Defines the external name generated by the underlying repository. Each repository
     * defines it's own external name.
     */
    @XmlAttribute(name = PROP_EXTERNAL_NAME)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String externalName;

    /**
     * The underlying repository in which this entity exists.
     */
    @XmlAttribute(name = PROP_REPOSITORY_ID)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String repositoryId;

    /** The list of properties that comprise this type. */
    private static List<String> propertyNames = null;

    /** A mapping of property names to data types. */
    private static HashMap<String, String> dataTypeMap = null;

    /** A list of super-types of this type. */
    private static ArrayList<String> superTypeList = null;

    /** A set of sub-types of this type. */
    private static HashSet<String> subTypeSet = null;

    static {
        setDataTypeMap();
        setSuperTypes();
        setSubTypes();
    }

    /**
     * Gets the value of the <b>uniqueId</b> property.
     *
     * @return
     *         possible object is {@link String }
     */
    public String getUniqueId() {
        return uniqueId;
    }

    /**
     * Sets the value of the <b>uniqueId</b> property.
     *
     * @param value
     *            allowed object is {@link String }
     */
    public void setUniqueId(String value) {
        this.uniqueId = value;
    }

    /**
     * Returns true if the <b>uniqueId</b> property is set; false, otherwise.
     *
     * @return
     *         returned object is {@link boolean }
     */
    public boolean isSetUniqueId() {
        return (this.uniqueId != null);
    }

    /**
     * Gets the value of the <b>uniqueName</b> property.
     *
     * @return
     *         possible object is {@link String }
     */
    public String getUniqueName() {
        return uniqueName;
    }

    /**
     * Sets the value of the <b>uniqueName</b> property.
     *
     * @param value
     *            allowed object is {@link String }
     */
    public void setUniqueName(String value) {
        this.uniqueName = value;
    }

    /**
     * Returns true if the <b>uniqueName</b> property is set; false, otherwise.
     *
     * @return
     *         returned object is {@link boolean }
     */
    public boolean isSetUniqueName() {
        return (this.uniqueName != null);
    }

    /**
     * Gets the value of the <b>externalId</b> property.
     *
     * @return
     *         possible object is {@link String }
     */
    public String getExternalId() {
        return externalId;
    }

    /**
     * Sets the value of the <b>externalId</b> property.
     *
     * @param value
     *            allowed object is {@link String }
     */
    public void setExternalId(String value) {
        this.externalId = value;
    }

    /**
     * Returns true if the <b>externalId</b> property is set; false, otherwise.
     *
     * @return
     *         returned object is {@link boolean }
     */
    public boolean isSetExternalId() {
        return (this.externalId != null);
    }

    /**
     * Gets the value of the <b>externalName</b> property.
     *
     * @return
     *         possible object is {@link String }
     */
    public String getExternalName() {
        return externalName;
    }

    /**
     * Sets the value of the <b>externalName</b> property.
     *
     * @param value
     *            allowed object is {@link String }
     */
    public void setExternalName(String value) {
        this.externalName = value;
    }

    /**
     * Returns true if the <b>externalName</b> property is set; false, otherwise.
     *
     * @return
     *         returned object is {@link boolean }
     */
    public boolean isSetExternalName() {
        return (this.externalName != null);
    }

    /**
     * Gets the value of the <b>repositoryId</b> property.
     *
     * @return
     *         possible object is {@link String }
     */
    public String getRepositoryId() {
        return repositoryId;
    }

    /**
     * Sets the value of the <b>repositoryId</b> property.
     *
     * @param value
     *            allowed object is {@link String }
     */
    public void setRepositoryId(String value) {
        this.repositoryId = value;
    }

    /**
     * Returns true if the <b>repositoryId</b> property is set; false, otherwise.
     *
     * @return
     *         returned object is {@link boolean }
     */
    public boolean isSetRepositoryId() {
        return (this.repositoryId != null);
    }

    /**
     * Gets the value of the requested property
     *
     * @param propName
     *            allowed object is {@link String}
     *
     * @return
     *         returned object is {@link Object}
     */
    public Object get(String propName) {
        if (propName.equals(PROP_UNIQUE_ID)) {
            return getUniqueId();
        }
        if (propName.equals(PROP_UNIQUE_NAME)) {
            return getUniqueName();
        }
        if (propName.equals(PROP_EXTERNAL_ID)) {
            return getExternalId();
        }
        if (propName.equals(PROP_EXTERNAL_NAME)) {
            return getExternalName();
        }
        if (propName.equals(PROP_REPOSITORY_ID)) {
            return getRepositoryId();
        }
        return null;
    }

    /**
     * Returns true if the requested property is set; false, otherwise.
     *
     * @param propName
     *            The name of the property to check if is set.
     * @return
     *         returned object is {@link boolean }
     */
    public boolean isSet(String propName) {
        if (propName.equals(PROP_UNIQUE_ID)) {
            return isSetUniqueId();
        }
        if (propName.equals(PROP_UNIQUE_NAME)) {
            return isSetUniqueName();
        }
        if (propName.equals(PROP_EXTERNAL_ID)) {
            return isSetExternalId();
        }
        if (propName.equals(PROP_EXTERNAL_NAME)) {
            return isSetExternalName();
        }
        if (propName.equals(PROP_REPOSITORY_ID)) {
            return isSetRepositoryId();
        }
        return false;
    }

    /**
     * Sets the value of the provided property to the provided value.
     *
     * @param propName
     *            allowed object is {@link String}
     * @param value
     *            allowed object is {@link Object}
     */
    public void set(String propName, Object value) {
        if (propName.equals(PROP_UNIQUE_ID)) {
            setUniqueId(((String) value));
        }
        if (propName.equals(PROP_UNIQUE_NAME)) {
            setUniqueName(((String) value));
        }
        if (propName.equals(PROP_EXTERNAL_ID)) {
            setExternalId(((String) value));
        }
        if (propName.equals(PROP_EXTERNAL_NAME)) {
            setExternalName(((String) value));
        }
        if (propName.equals(PROP_REPOSITORY_ID)) {
            setRepositoryId(((String) value));
        }
    }

    /**
     * Sets the value of provided property to null.
     *
     * @param propName
     *            allowed object is {@link String}
     *
     */
    public void unset(String propName) {}

    /**
     * Gets the name of this type.
     *
     * @return
     *         returned object is {@link String}
     */
    public String getTypeName() {
        return TYPE_NAME;
    }

    /**
     * Gets a list of all supported properties for this type.
     *
     * @param entityTypeName
     *            allowed object is {@link String}
     *
     * @return
     *         returned object is {@link List}
     */
    public static synchronized List<String> getPropertyNames(String entityTypeName) {
        if (propertyNames == null) {
            List<String> names = new ArrayList<String>();
            names.add(PROP_UNIQUE_ID);
            names.add(PROP_UNIQUE_NAME);
            names.add(PROP_EXTERNAL_ID);
            names.add(PROP_EXTERNAL_NAME);
            names.add(PROP_REPOSITORY_ID);
            propertyNames = Collections.unmodifiableList(names);
        }
        return propertyNames;
    }

    /**
     * Create the property name to data type mapping.
     */
    private static synchronized void setDataTypeMap() {
        if (dataTypeMap == null) {
            dataTypeMap = new HashMap<String, String>();
        }
        dataTypeMap.put(PROP_UNIQUE_ID, "String");
        dataTypeMap.put(PROP_UNIQUE_NAME, "String");
        dataTypeMap.put(PROP_EXTERNAL_ID, "String");
        dataTypeMap.put(PROP_EXTERNAL_NAME, "String");
        dataTypeMap.put(PROP_REPOSITORY_ID, "String");
    }

    /**
     * Gets the Java type of the value of the provided property. For example: String
     *
     * @param propName
     *            allowed object is {@link String}
     *
     * @return
     *         returned object is {@link String}
     */
    public String getDataType(String propName) {
        if (dataTypeMap.containsKey(propName)) {
            return (dataTypeMap.get(propName));
        } else {
            return null;
        }
    }

    /**
     * Create the list of super-types for this type.
     */
    private static synchronized void setSuperTypes() {
        if (superTypeList == null) {
            superTypeList = new ArrayList<String>();
        }
    }

    /**
     * Gets a list of any types which this type is an extension of.
     *
     * @return
     *         returned object is {@link ArrayList}
     */
    public ArrayList<String> getSuperTypes() {
        if (superTypeList == null) {
            setSuperTypes();
        }
        return superTypeList;
    }

    /**
     * Returns a true if the provided type is one that this type extends; false, otherwise.
     *
     * @param superTypeName
     *
     *            allowed object is {@link String}
     * @return
     *         returned object is {@link boolean}
     */
    public boolean isSubType(String superTypeName) {
        return superTypeList.contains(superTypeName);
    }

    /**
     * Create the set of sub-types for this type.
     */
    private static synchronized void setSubTypes() {
        if (subTypeSet == null) {
            subTypeSet = new HashSet<String>();
        }
    }

    /**
     * Gets a set of any types which extend this type.
     *
     * @return
     *         returned object is {@link HashSet}
     */
    public static HashSet<String> getSubTypes() {
        if (subTypeSet == null) {
            setSubTypes();
        }
        return subTypeSet;
    }

    @Override
    public String toString() {
        return WIMTraceHelper.traceJaxb(this);
    }
}
