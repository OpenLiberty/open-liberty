/*******************************************************************************
 * Copyright (c) 2020, 2024 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package com.informix.jdbcx;

import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * The IfxPreparedStatement and IfxStatement classes are responsible for simulating HA related exceptions.
 *
 * Based on the configuration specified in the test infrastructure HATABLE the methods in the class can
 * drive SQLTransientExceptions or SQLExceptions at appropriate points through the simQueryFailover() method.
 */
public class IfxStatement implements Statement {
    private static final int QUERY_TIMEOUT = 30;

    Statement wrappedStmt;

    IfxConnection ifxConn;

    static boolean failoverQuery;
    static int _peerRecoveryCount = 0;
    static boolean _firstsql = true;
    static String _homeservername = "";
    static int _failingOperation = 1;
    private boolean _leaselogDeleteFlag;
    private boolean _leaselogGetFlag;

    IfxStatement(Statement realStmt, IfxConnection ifxConnection) throws SQLException {
        wrappedStmt = realStmt;
        wrappedStmt.setQueryTimeout(QUERY_TIMEOUT);
        System.out.println("IfxStatement(" + wrappedStmt + "): query timeout is " + wrappedStmt.getQueryTimeout());
        ifxConn = ifxConnection;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        wrappedStmt.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        wrappedStmt.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        wrappedStmt.clearBatch();
    }

    @Override
    public void clearWarnings() throws SQLException {
        wrappedStmt.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        wrappedStmt.close();
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        boolean ret = wrappedStmt.execute(sql);
        return ret;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        boolean ret = wrappedStmt.execute(sql, autoGeneratedKeys);
        return ret;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        boolean ret = wrappedStmt.execute(sql, columnIndexes);
        return ret;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        boolean ret = wrappedStmt.execute(sql, columnNames);
        return ret;
    }

    @Override
    public int[] executeBatch() throws SQLException {
        int[] ret = null;
        boolean failOver = false;
        System.out.println("IfxStatement(" + wrappedStmt + "): executeBatch, this - " + this + ", wrapped - " + wrappedStmt);

        if (IfxConnection.isFailoverEnabled()) {
            System.out.println("IfxStatement(" + wrappedStmt + "): executeBatch, failover Enabled, Counter -" + IfxConnection.getFailoverCounter());
            IfxConnection.incrementFailoverCounter();
            if (IfxConnection.getFailoverCounter() == IfxConnection.getFailoverValue())
                failOver = true;
        }

        if (failOver) {
            System.out.println("IfxStatement(" + wrappedStmt + "): Feigning query failover, close connection");
            IfxConnectionPoolDataSource.setTestingFailoverAtRuntime(false);
            Connection myconn = getConnection();
            try {
                myconn.rollback();
            } catch (Exception ex) {
                System.out.println("IfxStatement(" + wrappedStmt + "): on close connection, caught exc: " + ex);
            }
            String sqlReason = "Generated internally";
            String sqlState = "Generated reason";
            int reasonCode = IfxConnection.getSimSQLCode(); // FOR DB2 should be
                                                            // -4498, Oracle
                                                            // 17410
            System.out.println("IfxStatement(" + wrappedStmt + "): sqlcode set to: " + reasonCode);
            // if reason code is "-3" then exception is non-transient, otherwise it is transient
            SQLException sqlex;
            if (reasonCode == -3) {
                // A hard, non-recoverable exception
                sqlex = new SQLException(sqlReason, sqlState, reasonCode);
            } else if (reasonCode == -33) {
                int[] updateCounts = { 1, 1, Statement.EXECUTE_FAILED };
                sqlex = new BatchUpdateException(sqlReason, sqlState, reasonCode, updateCounts);
                SQLException sqlex2 = new SQLException(sqlReason, sqlState, 1);
                sqlex.setNextException(sqlex2);
                SQLException sqlex3 = new SQLException(sqlReason, sqlState, -3);
                sqlex2.setNextException(sqlex3);
            } else {
                // A transient, recoverable exception
                sqlex = new SQLTransientException("A simulated transient SQL Exception");
            }
            throw sqlex;
        } else {
            System.out.println("IfxStatement(" + wrappedStmt + "): ExecuteBatch");
            ret = wrappedStmt.executeBatch();
        }

        System.out.println("IfxStatement(" + wrappedStmt + "): executeBatch - " + ret);
        return ret;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        System.out.println("IfxStatement(" + wrappedStmt + "): executeQuery, this - " + this + ", sql - " + sql);

        if (sql.contains("SELECT SERVER_IDENTITY, LEASE_TIME FROM WAS_LEASES_LOG")) {
            System.out.println("IfxStatement(): This is a leaselog get statement");
            _leaselogGetFlag = true;
        }

        simQueryFailover();

        ResultSet ret = wrappedStmt.executeQuery(sql);
        System.out.println("IfxStatement(" + wrappedStmt + "): executeQuery exit, ret - " + ret);
        return ret;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate, this - " + this + ", sql: " + sql);

        if (sql.contains("DELETE FROM WAS_LEASES_LOG")) {
            System.out.println("IfxStatement(): This is a leaselog delete statement");
            _leaselogDeleteFlag = true;
        }

        simQueryFailover();

        int ret = wrappedStmt.executeUpdate(sql);
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate exit, ret - " + ret);
        return ret;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate, this - " + this + ", sql: " + sql + ", keys: " + autoGeneratedKeys);

        if (sql.contains("DELETE FROM WAS_LEASES_LOG")) {
            System.out.println("IfxStatement(" + wrappedStmt + "): This is a leaselog delete statement");
            _leaselogDeleteFlag = true;
        }

        simQueryFailover();

        int ret = wrappedStmt.executeUpdate(sql, autoGeneratedKeys);
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate exit, ret - " + ret);
        return ret;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate, this - " + this + ", sql: " + sql + ", columnindexes");

        if (sql.contains("DELETE FROM WAS_LEASES_LOG")) {
            System.out.println("IfxStatement(" + wrappedStmt + "): This is a leaselog delete statement");
            _leaselogDeleteFlag = true;
        }

        simQueryFailover();

        int ret = wrappedStmt.executeUpdate(sql, columnIndexes);
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate exit, ret - " + ret);
        return ret;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate, this - " + this + ", sql: " + sql + ", columnnames");

        if (sql.contains("DELETE FROM WAS_LEASES_LOG")) {
            System.out.println("IfxStatement(" + wrappedStmt + "): This is a leaselog delete statement");
            _leaselogDeleteFlag = true;
        }

        simQueryFailover();
        int ret = wrappedStmt.executeUpdate(sql, columnNames);
        System.out.println("IfxStatement(" + wrappedStmt + "): executeUpdate exit, ret - " + ret);
        return ret;
    }

    @Override
    public Connection getConnection() throws SQLException {
        Connection ret = wrappedStmt.getConnection();
        return ret;
    }

    @Override
    public int getFetchDirection() throws SQLException {
        int ret = wrappedStmt.getFetchDirection();
        return ret;
    }

    @Override
    public int getFetchSize() throws SQLException {
        int ret = wrappedStmt.getFetchSize();
        return ret;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        ResultSet ret = wrappedStmt.getGeneratedKeys();
        return ret;
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        int ret = wrappedStmt.getMaxFieldSize();
        return ret;
    }

    @Override
    public int getMaxRows() throws SQLException {
        int ret = wrappedStmt.getMaxRows();
        return ret;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        boolean ret = wrappedStmt.getMoreResults();
        return ret;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        boolean ret = wrappedStmt.getMoreResults(current);
        return ret;
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        int ret = wrappedStmt.getQueryTimeout();
        return ret;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        ResultSet ret = wrappedStmt.getResultSet();
        return ret;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        int ret = wrappedStmt.getResultSetConcurrency();
        return ret;
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        int ret = wrappedStmt.getResultSetHoldability();
        return ret;
    }

    @Override
    public int getResultSetType() throws SQLException {
        int ret = wrappedStmt.getResultSetType();
        return ret;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        int ret = wrappedStmt.getUpdateCount();
        return ret;
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        SQLWarning ret = wrappedStmt.getWarnings();
        return ret;
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        wrappedStmt.setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        wrappedStmt.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        wrappedStmt.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        wrappedStmt.setFetchSize(rows);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        wrappedStmt.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        wrappedStmt.setMaxRows(max);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        wrappedStmt.setQueryTimeout(seconds);
    }

    @Override
    public boolean isClosed() throws SQLException {
        boolean ret = wrappedStmt.isClosed();
        return ret;
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        wrappedStmt.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        boolean ret = wrappedStmt.isPoolable();
        return ret;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        T ret = wrappedStmt.unwrap(iface);
        return ret;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        boolean ret = wrappedStmt.isWrapperFor(iface);
        return ret;
    }

    private void simQueryFailover() throws SQLException {
        boolean failOver = false;

        if (IfxConnection.getTestingLeaselogDeleteFlag() && _leaselogDeleteFlag) {
            System.out.println("IfxStatement(" + wrappedStmt + "): simQueryFailover, for Lease Log Delete");
            _leaselogDeleteFlag = false;
            IfxConnection.setTestingLeaselogDeleteFlag(false);
            failOver = true;
        }

        if (IfxConnection.getTestingLeaselogGetFlag() && _leaselogGetFlag) {
            System.out.println("IfxStatement(" + wrappedStmt + "): simQueryFailover, for Lease Log Get");
            _leaselogGetFlag = false;
            IfxConnection.setTestingLeaselogGetFlag(false);
            failOver = true;
        }

        if (IfxConnection.isQueryFailoverEnabled() && IfxConnectionPoolDataSource.isTestingFailoverAtRuntime()) {
            int failatoperation = IfxConnection.getFailoverValue() + 1;
            System.out.println(
                               "SIMHADB: simQueryFailover, failover Enabled, Counter -" +
                               IfxConnection.getQueryFailoverCounter() +
                               ", failatoperation - " + failatoperation);
            IfxConnection.incrementQueryFailoverCounter();

            if (IfxConnection.getQueryFailoverCounter() == failatoperation) {
                failOver = true;
            }
        }

        if (failOver) {

            System.out.println("IfxStatement(" + wrappedStmt + "): Feigning executequery failover, rollback on connection");
            IfxConnectionPoolDataSource.setTestingFailoverAtRuntime(false);
            Connection myconn = getConnection();
            try {
                myconn.rollback();
                // myconn.close();

            } catch (Exception ex) {
                System.out.println("IfxStatement(" + wrappedStmt + "): on close connection, caught exc: " + ex);
            }
            String sqlReason = "Generated internally";
            String sqlState = "Generated reason";
            int reasonCode = IfxConnection.getSimSQLCode(); // FOR DB2
                                                            // should be
                                                            // -4498, Oracle
                                                            // 17410
                                                            // if reason code is "-3" then exception is non-transient, otherwise it is transient
            SQLException sqlex;
            if (reasonCode == -3)
                // A hard, non-recoverable exception
                sqlex = new SQLException(sqlReason, sqlState, reasonCode);
            else
                // A transient, recoverable exception
                sqlex = new SQLTransientException("A simulated transient SQL Exception");
            throw sqlex;
        }
    }

    /*
     * (non-Javadoc)
     *
     * @see java.sql.Statement#closeOnCompletion()
     */
    @Override
    public void closeOnCompletion() throws SQLException {
        // TODO Auto-generated method stub

    }

    /*
     * (non-Javadoc)
     *
     * @see java.sql.Statement#isCloseOnCompletion()
     */
    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        // TODO Auto-generated method stub
        return false;
    }
}
