/*******************************************************************************
 * Copyright (c) 2017, 2021 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package componenttest.custom.junit.runner;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.junit.runners.model.FrameworkMethod;

import com.ibm.websphere.simplicity.log.Log;

import componenttest.topology.impl.LibertyServer;
import componenttest.topology.utils.FATServletClient;

/**
 * Synthetic test methods for test classes which annotated with
 * {@link componenttest.annotation.TestServlet} or
 * {@link componenttest.annotation.TestServlets}.
 *
 * Synthetic test methods are injected by {@link FATRunner#getChildren()},
 * and are generated by
 * {@link componenttest.custom.junit.runner.TestServletProcessor#getServletTests}.
 */
public class SyntheticServletTest extends FrameworkMethod {
    /**
     * The field which contains the {@link LibertyServer} instance which
     * is running the test servlet. 
     */
    private final Field serverField;
    
    /** The HTTP query which is used to invoke the servlet test method. */
    private final String queryPath;
    
    /** The name of the test which is invoking the servlet test method. */
    private final String testName;

    /**
     * Create a servlet test as a synthetic test method.
     *
     * @param serverField The field which contains the servlet which is running
     *     the test servlet.
     * @param queryPath The HTTP query which is used to invoke the test servlet.
     * @param method The name of the test which is invoking the servlet
     *     test method.
     */
    public SyntheticServletTest(Field serverField, String queryPath, Method method) {
        super(method);

        this.serverField = serverField;
        this.queryPath = queryPath;
        this.testName = method.getName();
    }

    /**
     * Invoke this test method.  Test failures are obtained as thrown exceptions.
     * 
     * @param target Ignored.
     * @param params Ignored.
     * 
     * @return Ignored.  This implementation always answers null.
     * 
     * @throws Throwable Thrown in case of a test failure.  A test success occurs
     *     when no exception is thrown.
     */
    @Override
    public Object invokeExplosively(Object target, Object... params) throws Throwable {
        Log.info(SyntheticServletTest.class, "invokeExplosively", "Running test: " + testName);
        LibertyServer server = (LibertyServer) serverField.get(null);
        FATServletClient.runTest(server, queryPath, testName);
        return null;
    }
}
