/*******************************************************************************
 * Copyright (c) 2017,2024 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
import org.apache.tools.ant.filters.ReplaceTokens

task assembleBootstrap(type: Copy) {
    inputs.property("javaHome", System.properties.('java.home').replace('\\', '\\\\').replace(':', '\\:'))
    def javaHome = System.properties.('java.home').replace('\\', '\\\\').replace(':', '\\:')
    from project.file('autoFVT-templates/bootstrapping.properties')
    into new File(buildDir, 'autoFVT-defaults')
    filter(ReplaceTokens, tokens: [JAVA_HOME: javaHome])
}

task assembleBinaryDependencies() {
    dependsOn ':com.ibm.ws.jaxb.tools:jar'
    File buildDirLib = new File(buildDir, 'lib')
    outputs.dir buildDirLib
    doLast {
        // Copy maven dependencies of this project into a directory that can be included by the junit
        // task of every FAT bucket, effectively making all of fattest.simplicty's dependencies transitive
        sourceSets.main.runtimeClasspath.each {
            def path = it.getAbsolutePath()
            if((path.contains('.m2') || path.contains('.ibmartifactory') || path.contains('.ibmdhe')) && 
               !(new File(buildDirLib, it.getName()).exists())) {
                copy {
                    from path
                    into buildDirLib
                }
            }
        }
        copy {
            from new File(project(':com.ibm.ws.jaxb.tools').buildDir, 'com.ibm.ws.jaxb.tools.jar')
            into buildDirLib
        }
    }
}

configurations {
    arquillianFeature
    arquillianJakartaFeature21
}

dependencies {
    arquillianFeature 'io.openliberty.arquillian:arquillian-liberty-support:1.0.8:feature@zip'
    arquillianJakartaFeature21 'io.openliberty.arquillian:arquillian-liberty-support-jakarta:2.1.1:feature@zip'
}

task extractArquillianSupportFeature(type:Sync) {
    configurations.arquillianFeature.each {
        from(zipTree(it))
    }
    into('build/arquillian-feature-extract')
    
    doLast {
        // Update the feature manifest to mark it as a test feature
        file('build/arquillian-feature-extract/extension/lib/features/arquillian-liberty-support.mf')
            .append('IBM-Test-Feature: true\n')
    }
}

task extractArquillianSupportJakartaFeature21(type:Sync) {
    configurations.arquillianJakartaFeature21.each {
        from(zipTree(it))
    }
    rename { String mfFile ->
        mfFile.replace("arquillian-liberty-support.mf", "arquillian-liberty-support-jakarta-2.1.mf")
    }
    into('build/arquillian-jakarta-feature-extract-2.1')

    doLast {
        // Update the feature manifest to mark it as a test feature
        file('build/arquillian-jakarta-feature-extract-2.1/extension/lib/features/arquillian-liberty-support-jakarta-2.1.mf')
            .append('IBM-Test-Feature: true\n')
    }
}

jar {
    dependsOn assembleBootstrap
    dependsOn assembleBinaryDependencies
    dependsOn extractArquillianSupportFeature
    dependsOn extractArquillianSupportJakartaFeature21
}

task publishArquillianSupportFeature(type:Copy) {
    dependsOn extractArquillianSupportFeature
    from('build/arquillian-feature-extract/extension')
    dependsOn extractArquillianSupportJakartaFeature21
    from('build/arquillian-jakarta-feature-extract-2.1/extension')

    into(buildImage.file('wlp'))
}

assemble.dependsOn publishArquillianSupportFeature
