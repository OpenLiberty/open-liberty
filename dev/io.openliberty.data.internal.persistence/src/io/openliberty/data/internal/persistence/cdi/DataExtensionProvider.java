/*******************************************************************************
 * Copyright (c) 2022, 2023 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package io.openliberty.data.internal.persistence.cdi;

import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;

import org.osgi.framework.ServiceRegistration;
import org.osgi.service.cm.Configuration;
import org.osgi.service.cm.ConfigurationAdmin;
import org.osgi.service.component.ComponentContext;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.ConfigurationPolicy;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.osgi.service.component.annotations.ReferencePolicy;
import org.osgi.service.component.annotations.ReferencePolicyOption;

import com.ibm.websphere.ras.Tr;
import com.ibm.websphere.ras.TraceComponent;
import com.ibm.websphere.ras.annotation.Trivial;
import com.ibm.ws.LocalTransaction.LocalTransactionCurrent;
import com.ibm.ws.container.service.metadata.ApplicationMetaDataListener;
import com.ibm.ws.container.service.metadata.MetaDataEvent;
import com.ibm.ws.container.service.metadata.MetaDataException;
import com.ibm.ws.container.service.metadata.ModuleMetaDataListener;
import com.ibm.ws.runtime.metadata.ApplicationMetaData;
import com.ibm.ws.tx.embeddable.EmbeddableWebSphereTransactionManager;
import com.ibm.wsspi.resource.ResourceFactory;

import io.openliberty.cdi.spi.CDIExtensionMetadata;
import jakarta.enterprise.inject.spi.Extension;

/**
 * Simulates a provider for relational databases by delegating
 * JPQL queries to the Jakarta Persistence layer.
 */
@Component(configurationPid = "io.openliberty.data.internal.persistence.cdi.DataExtensionProvider",
           configurationPolicy = ConfigurationPolicy.IGNORE,
           service = { CDIExtensionMetadata.class, DataExtensionProvider.class, ApplicationMetaDataListener.class })
public class DataExtensionProvider implements CDIExtensionMetadata, ApplicationMetaDataListener {
    private static final TraceComponent tc = Tr.register(DataExtensionProvider.class);

    private static final Set<Class<? extends Extension>> extensions = Collections.singleton(DataExtension.class);

    @Reference
    public ConfigurationAdmin configAdmin;

    /**
     * Map of application name to map of Repository.dataStore to databaseStore config that is generated by the extension.
     * Entries are removed when the application stops, at which point the config is removed.
     */
    public final Map<String, Map<String, Configuration>> dbStoreConfigAllApps = new ConcurrentHashMap<>();

    /**
     * Map of application name to list of registrations of delegating resource factories that are generated by the extension.
     * Entries are removed when the application stops, at which point the services are unregistered.
     */
    public final Map<String, Queue<ServiceRegistration<ResourceFactory>>> delegatorsAllApps = new ConcurrentHashMap<>();

    @Reference(target = "(component.name=com.ibm.ws.threading)")
    protected ExecutorService executor;

    @Reference
    public LocalTransactionCurrent localTranCurrent;

    @Reference
    public EmbeddableWebSphereTransactionManager tranMgr;

    /**
     * Service that provides Jakarta Validation.
     */
    private transient Object validationService;

    @Override
    @Trivial
    public void applicationMetaDataCreated(MetaDataEvent<ApplicationMetaData> event) throws MetaDataException {
    }

    @Override
    public void applicationMetaDataDestroyed(MetaDataEvent<ApplicationMetaData> event) {
        String appName = event.getMetaData().getName();
        Map<String, Configuration> configurations = dbStoreConfigAllApps.remove(appName);
        if (configurations != null)
            for (Configuration config : configurations.values())
                try {
                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())
                        Tr.debug(this, tc, "deleting " + config);
                    config.delete();
                } catch (IOException x) {
                    // logged to FFDC
                }

        Queue<ServiceRegistration<ResourceFactory>> registrations = delegatorsAllApps.remove(appName);
        if (registrations != null)
            for (ServiceRegistration<ResourceFactory> reg; (reg = registrations.poll()) != null;)
                reg.unregister();
    }

    @Deactivate
    protected void deactivate(ComponentContext cc) {
        // Remove and delete configurations that our extension generated.
        for (Iterator<Map<String, Configuration>> it = dbStoreConfigAllApps.values().iterator(); it.hasNext();) {
            Map<String, Configuration> configurations = it.next();
            it.remove();
            for (Configuration config : configurations.values())
                try {
                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())
                        Tr.debug(this, tc, "deleting " + config);
                    config.delete();
                } catch (IOException x) {
                    // logged to FFDC
                }
        }

        // Remove and unregister services that our extension generated.
        // This is done second because some of the configurations depend on the services.
        for (Iterator<Queue<ServiceRegistration<ResourceFactory>>> it = delegatorsAllApps.values().iterator(); it.hasNext();) {
            Queue<ServiceRegistration<ResourceFactory>> registrations = it.next();
            it.remove();
            for (ServiceRegistration<ResourceFactory> reg; (reg = registrations.poll()) != null;)
                reg.unregister();
        }
    }

    @Override
    @Trivial
    public Set<Class<? extends Extension>> getExtensions() {
        return extensions;
    }

    @Reference(service = ModuleMetaDataListener.class, // also a BeanValidation.class, but that class might not be available to this bundle
               target = "(service.pid=com.ibm.ws.beanvalidation.OSGiBeanValidationImpl)",
               cardinality = ReferenceCardinality.OPTIONAL,
               policy = ReferencePolicy.STATIC,
               policyOption = ReferencePolicyOption.GREEDY)
    protected void setValidation(ModuleMetaDataListener svc) {
        validationService = svc;
    }

    protected void unsetValidation(ModuleMetaDataListener svc) {
        if (validationService == svc)
            validationService = null;
    }

    /**
     * @return service that provides Jakarta Validation.
     */
    public Object validationService() {
        return validationService;
    }
}