/*******************************************************************************
 * Copyright (c) 2019, 2021 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

configurations {
    runPebble { extendsFrom runtime }
    runBoulder { extendsFrom runtime }
}

dependencies {
  requiredLibs project(':com.ibm.ws.org.apache.httpcomponents'),
               project(':io.openliberty.org.apache.commons.logging'),
               'org.shredzone.acme4j:acme4j-client:2.7',
               'org.shredzone.acme4j:acme4j-utils:2.7',
               project(':com.ibm.ws.security.acme'),
               project(':com.ibm.ws.crypto.certificateutil')
               
  runPebble    'net.java.dev.jna:jna:5.2.0',
               'org.rnorth.visible-assertions:visible-assertions:2.1.2',
               'org.apache.commons:commons-compress:1.20',
               project(':io.openliberty.org.apache.commons.logging')
               
  runBoulder   'net.java.dev.jna:jna:5.2.0',
               'org.rnorth.visible-assertions:visible-assertions:2.1.2',
               'org.apache.commons:commons-compress:1.20',
               project(':io.openliberty.org.apache.commons.logging')
}

addRequiredLibraries.dependsOn addTestcontainers
addRequiredLibraries.dependsOn addJakartaTransformer

autoFVT.doLast {
  /*
   * Copy the CACERTS truststore(s) into all test servers.
   */
   new File("${projectDir}/publish/servers").eachDir { server ->
    copy { 
      from 'publish/files/'
      include 'cacerts.*'
      into new File(autoFvtDir, 'publish/servers/' + server.name + '/resources/security')
    }
  }
}

tasks.withType(JavaExec) {
    /* 
     * Assign all Java system properties from the command line to the JavaExec task.
     */
    systemProperties System.properties
}

task runPebble(type: JavaExec) {
    group = "Execution"
    description = "Start a Pebble ACME CA server with a mock DNS server."
    
    workingDir = 'build/libs/autoFVT'
    classpath = files(sourceSets.main.runtimeClasspath, configurations.runPebble)
    main = "com.ibm.ws.security.acme.docker.pebble.PebbleDriver"
}

task runBoulder(type: JavaExec) {
    group = "Execution"
    description = "Start a Boulder ACME CA server with a mock DNS server."
    
    workingDir = 'build/libs/autoFVT'
    classpath = files(sourceSets.main.runtimeClasspath, configurations.runBoulder)
    main = "com.ibm.ws.security.acme.docker.boulder.BoulderDriver"
}
