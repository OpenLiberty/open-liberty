#!/bin/sh

###############################################################################
# Copyright (c) 2021 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################

###############################################################################
#
# Generate the certificates for the Boulder Docker image replacing those
# that have expired in the image.
#
# Running requires openssl is installed and available on the system.
#
###############################################################################

#
# These files all were copied from the '/go/src/github.com/letsencrypt/boulder/test/'
# directory within the Boulder docker container.
# 
IN_ROOT_PEM=original/test-root.pem
IN_ROOT_KEY=original/test-root.key
IN_CA_KEY=original/test-ca.key
IN_CA_CERT=original/test-ca.pem
IN_CA2_CERT=original/test-ca2.pem
IN_SSL_EXTENSIONS=./ssl-extensions-x509.cnf

#
# These are files generated by the script.
#
OUT_ROOT_PEM=test-root.pem
OUT_ROOT_DER=test-root.der
OUT_CA_CSR=test-ca.csr
OUT_CA_PEM=test-ca.pem
OUT_CA_DER=test-ca.der
OUT_CA2_CSR=test-ca2.csr
OUT_CA2_PEM=test-ca2.pem
OUT_CA2_DER=test-ca2.der

#
# Cleanup output files first.
#
rm -f *.csr *.pem *.der *.srl

#
# Generate the self-signed root CA certificate from the existing root key.
#
echo
echo "======================================================================"
echo "Generating root CA certificate from existing root key..."
echo "======================================================================"
openssl req -x509 -sha256 -new -nodes -key ${IN_ROOT_KEY} -days 3650 -out ${OUT_ROOT_PEM} \
   -subj "/CN=cackling cryptographer fake ROOT" -addext keyUsage=critical,cRLSign,keyCertSign

#
# Create CSRs for both test-ca and test-ca2. We are going to generate them from the original
# certificates and the original CAs' private key.
#
echo
echo "======================================================================"
echo "Generating CSRs..."
echo "======================================================================"
openssl x509 -x509toreq -in ${IN_CA_CERT}  -signkey ${IN_CA_KEY} -out ${OUT_CA_CSR}
openssl x509 -x509toreq -in ${IN_CA2_CERT} -signkey ${IN_CA_KEY} -out ${OUT_CA2_CSR}

#
# Generate the certificates using the CSRs and key, along with the CA root key.
#
echo
echo "======================================================================"
echo "Generating PEM certificates from CSRs..."
echo "======================================================================"
openssl x509 -req -in ${OUT_CA_CSR}  -CA ${OUT_ROOT_PEM} -CAkey ${IN_ROOT_KEY} -CAcreateserial -out ${OUT_CA_PEM}  -days 3650 -sha256 \
    -extensions v3_ca -extfile ${IN_SSL_EXTENSIONS}
openssl x509 -req -in ${OUT_CA2_CSR} -CA ${OUT_ROOT_PEM} -CAkey ${IN_ROOT_KEY} -CAcreateserial -out ${OUT_CA2_PEM} -days 3650 -sha256 \
    -extensions v3_ca -extfile ${IN_SSL_EXTENSIONS}

#
# Convert PEM to DER
#
echo
echo "======================================================================"
echo "Generating DER certificates from PEM certificates..."
echo "======================================================================"
openssl x509 -in ${OUT_ROOT_PEM} -outform der -out ${OUT_ROOT_DER}
openssl x509 -in ${OUT_CA_PEM}   -outform der -out ${OUT_CA_DER}
openssl x509 -in ${OUT_CA2_PEM}  -outform der -out ${OUT_CA2_DER}

#
# Verify the certificates against the new root cert.
#
echo
echo "======================================================================"
echo "Verifying certificates against NEW root certificate..."
echo "======================================================================"
openssl verify -CAfile ${OUT_ROOT_PEM} ${OUT_CA_PEM}
openssl verify -CAfile ${OUT_ROOT_PEM} ${OUT_CA2_PEM}

#
# Verify the certificate against the old root cert, ignoring
# the fact it has expired.
#
echo
echo "======================================================================"
echo "Verifying certificates against OLD root certificate..."
echo "======================================================================"
openssl verify -no_check_time -CAfile ${IN_ROOT_PEM} ${OUT_CA_PEM}
openssl verify -no_check_time -CAfile ${IN_ROOT_PEM} ${OUT_CA2_PEM}
echo

#
# Copy test-ca2.pem as the CA's intermediate certificate.
#
cp ${OUT_CA2_PEM} ../boulder.intermediate.pem

#
# Cleanup unneeded files.
#
rm -f *.srl *.csr

echo "SEE README.md FOR INSTRUCTIONS ON INSTALLING THE CERTIFICATES INTO THE BOULDER DOCKER IMAGE."
echo