/*******************************************************************************
 * Copyright (c) 2022 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

repositories {
  if (isUsingArtifactory) {
    maven {
      credentials {
        username userProps.getProperty("artifactory.download.user")
        password userProps.getProperty("artifactory.download.token")
      }
      url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-maven-remote")
    }
  } else {
    mavenCentral()
  }
}

dependencies {
   requiredLibs project(':com.ibm.ws.security.fat.common'),
                project(':com.ibm.ws.security.fat.common.jwt'),
                project(':com.ibm.ws.security.fat.common.social'),
                project(':com.ibm.ws.security.fat.common.backchannelLogout'),
                project(':com.ibm.ws.security.oauth.oidc_fat.common'),
                project(':com.ibm.ws.com.meterware.httpunit.1.7'),
                project(':com.ibm.ws.org.jose4j'),
                project(':com.ibm.json4j'),
                'jtidy:jtidy:4aug2000r7-dev',
                'rhino:js:1.5R4.1' // See NOTE below

  // NOTE: More current js versions have a bug that prevents multiple redirects - this causes
  // a couple of our tests to fail.
                
  /*
   * Previously we had an uber jar named htmlunit-2.20-OSGi.jar. It appears to have contained all of
   * the runtime dependencies for htmlunit. Instead of generating an uber jar, we'll add the dependencies
   * here. The uber jar also was configured to be an OSGi bundle, but it is not necessary for this bucket.
   */ 
  requiredLibs project(':com.ibm.ws.org.apache.commons.io'),        // htmlunit-2.44.0 --> 2.8.0
               project(':com.ibm.ws.org.apache.commons.lang3'),     // htmlunit-2.44.0 --> 3.11
               'net.sourceforge.htmlunit:htmlunit-core-js:2.44.0',
               'net.sourceforge.htmlunit:htmlunit-cssparser:1.6.0',
               'net.sourceforge.htmlunit:neko-htmlunit:2.44.0',
               'org.apache.httpcomponents:httpmime:4.5.12',
               'org.brotli:dec:0.1.2',
               'xalan:xalan:2.7.2',
               project(':io.openliberty.org.apache.xercesImpl'),
               'httpunit:httpunit:1.7',
               'xml-apis:xml-apis:1.4.01'
}

addRequiredLibraries.dependsOn addJakartaTransformer

/*
 * This is where all application ZIP and WARs will be built.
 */
def appBuildDir = "${buildDir}/test-application"

/**********************************/
task copyGenericServer (dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.fat.common.jwt:assemble', ':com.ibm.ws.security.oauth.oidc_fat.common:assemble', ':com.ibm.ws.security.fat.common.backchannelLogout:assemble']) {
  doLast {

    println "in copyGenericServer"
      def serverNames = project.findProperty('serverNames').split(",")
      def srcServerName = project.findProperty('srcServerName')
      
      println "serverNames: ${serverNames}"
      println "srcServerName: ${srcServerName}"
	
	serverNames.each { serverName ->
  /*
   * Copy common artifacts to test servers.
   */
    println "serverName: ${serverName}"
    
    /* copy the base server from the common project */
    if (project.findProperty(serverName + '_copyServerConfigs')) {
      copy { 
        from project(':com.ibm.ws.security.fat.common.backchannelLogout').file("publish/servers/${srcServerName}")
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '**'
      }
    } else {
      copy { 
        from project(':com.ibm.ws.security.fat.common.backchannelLogout').file("publish/servers/${srcServerName}")
        into new File(autoFvtDir, "publish/servers/${serverName}")
        exclude 'configs'
        include '**'
      }
    }
    
    /* copy shared config files */
    copy { 
      from project(':com.ibm.ws.security.fat.common.backchannelLogout').file('publish/files/serversettings/')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '*.xml'
    }
    
    /* copy the test marker app - used to log test case start/stop in server side logs */
    copy { 
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }

  	/* copy shared key/trust stores from the common security fat project */
    copy { 
     from project(':com.ibm.ws.security.fat.common').file('publish/shared/securityKeys')
     into new File(autoFvtDir, "publish/servers/${serverName}/")
     include 'allAlgKeyStore.p12'
     include 'allAlgTrustStore.p12'
    }
    
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').projectDir, "/securitykeys")
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include 'commonBasicKeyStore.jks'
      include 'commonTrustStore.jks'
      include 'commonBadTrustStore.jks'
    }
    
    copy {
      from project(':com.ibm.ws.security.fat.common.jwt').file('publish/shared/config')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include 'signEncryptSSLSettings.xml'
    }
 
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').projectDir, 'publish/files/serversettings/')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include 'op_fatTestPorts.xml'
    }  
    
    /* app needed to run refresh token (contains the refresh.jsp) */
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthclient.zip')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
      rename 'oauthclient.zip', 'oauthclient.war'
    }
        
  }
}
}
 
task copyGenericClient (dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.fat.common.jwt:assemble', ':com.ibm.ws.security.oauth.oidc_fat.common:assemble', ':com.ibm.ws.security.fat.common.backchannelLogout:assemble']) {
  doLast {

    println "in copyGenericClient"
      def serverNames = project.findProperty('clientNames').split(",")
      def srcServerName = project.findProperty('srcClientName')
      
      println "serverNames: ${serverNames}"
      println "srcServerName: ${srcServerName}"
	
	serverNames.each { serverName ->
  /*
   * Copy common artifacts to test servers.
   */
    
    /* copy the base server from the common project */
    if (project.findProperty(serverName + '_copyClientConfigs')) {
      copy { 
        from project(':com.ibm.ws.security.fat.common.backchannelLogout').file("publish/servers/${srcServerName}")
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '**'
      }
    } else {
      copy { 
        from project(':com.ibm.ws.security.fat.common.backchannelLogout').file("publish/servers/${srcServerName}")
        into new File(autoFvtDir, "publish/servers/${serverName}")
        exclude 'configs'
        include '**'
      }
    }
	
    copy { 
      from project(':com.ibm.ws.security.fat.common.backchannelLogout').file('publish/files/serversettings/')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '*.xml'
    }
    
    copy { 
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }

  	/* copy shared key/trust stores from the common security fat project */
    copy { 
     from project(':com.ibm.ws.security.fat.common').file('publish/shared/securityKeys')
     into new File(autoFvtDir, "publish/servers/${serverName}/")
     include 'allAlgKeyStore.p12'
     include 'allAlgTrustStore.p12'
    }
    
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').projectDir, "/securitykeys")
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include 'commonBasicKeyStore.jks'
      include 'commonTrustStore.jks'
      include 'commonBadTrustStore.jks'
    }
    
    copy {
      from project(':com.ibm.ws.security.fat.common.jwt').file('publish/shared/config')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include 'signEncryptSSLSettings.xml'
    }
	
    copy {
      from project(':com.ibm.ws.security.fat.common.jwt').file('publish/shared/securityKeys')
      into new File(autoFvtDir, "publish/servers/${serverName}/")
      include '*.pem'
    }
    
    copy {
      from new File(project(":com.ibm.ws.security.fat.common.backchannelLogout").buildDir, "test-application/backchannelLogoutTestApp.zip")
      into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      rename 'backchannelLogoutTestApp.zip', 'backchannelLogoutTestApp.war'
    }

    copy {
      from new File(project(":com.ibm.ws.security.fat.common.backchannelLogout").buildDir, "test-application/simpleLogoutTestApp.zip")
      into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      rename 'simpleLogoutTestApp.zip', 'simpleLogoutTestApp.war'
    }

    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/formlogin.zip')
      into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      rename 'formlogin.zip', 'formlogin.war'
    }
               
  }
}
}
