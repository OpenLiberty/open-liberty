/*******************************************************************************
 * Copyright (c) 2020, 2021 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

repositories {
  if (isUsingArtifactory) {
    maven {
      credentials {
        username userProps.getProperty("artifactory.download.user")
        password userProps.getProperty("artifactory.download.token")
      }
      url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-maven-remote")
    }
  } else {
    mavenCentral()
  }
}

configurations {
  derbyJar
  mongoJavaDriver
}

dependencies {
  derbyJar        'org.apache.derby:derby:10.11.1.1'
  mongoJavaDriver 'org.mongodb:mongo-java-driver:2.13.3'
  
  requiredLibs    'jtidy:jtidy:4aug2000r7-dev',
                  project(':com.ibm.ws.com.meterware.httpunit.1.6.2'),     // 1.7 causes refresh token failures
                  files('lib/jsse.jar'),
                  'rhino:js:1.6R5',
                  project(':com.ibm.ws.mongo_fat'),
                  'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.0.0',
                  'de.flapdoodle.embed:de.flapdoodle.embed.process:3.0.1',
                  'org.apache.commons:commons-compress:1.20'
}

addRequiredLibraries.dependsOn addJakartaTransformer


/*
 * Configure any auto FVT artifacts.
 */
autoFVT.dependsOn ':com.ibm.ws.security.oauth_test.custom_store:assemble'
autoFVT.dependsOn ':com.ibm.ws.security.oauth_test.custom_servlets:assemble'
autoFVT.dependsOn ':com.ibm.ws.security.oauth_test.servlets:assemble'
autoFVT.dependsOn ':com.ibm.ws.security.oauth.oidc_fat.common:assemble'
autoFVT.doLast {

  /*
   * Copy the local ApacheDS LDAP instances. 
   */
  copy {
    from project(':com.ibm.ws.org.apache.directory.server').projectDir
    into autoFvtDir
    include 'apacheds-2.0.0-M15/**'
  }
  
  /*
   * Copy the custom oauth store JAR feature so we can use it both as a user feature
   * and as a library in a BELL.
   */
  copy { 
    from new File(project(':com.ibm.ws.security.oauth_test.custom_store').buildDir, 'com.ibm.ws.security.oauth_test.custom_store.jar')
    into new File(autoFvtDir, 'publish/bundles')
    rename 'com.ibm.ws.security.oauth_test.custom_store.jar', 'security.custom.store_1.0.jar'
  }
  copy { 
    from new File(project(':com.ibm.ws.security.oauth_test.custom_store').buildDir, 'com.ibm.ws.security.oauth_test.custom_store.jar')
    into new File(autoFvtDir, 'publish/shared')
    rename 'com.ibm.ws.security.oauth_test.custom_store.jar', 'security.custom.store_1.0.jar'
  }
  copy { 
    from new File(project(':com.ibm.ws.security.oauth_test.custom_store').projectDir, 'publish/features/customStoreSample-1.0.mf')
    into new File(autoFvtDir, 'publish/features')
  }
  
  /*
   * Copy the mongo-java-driver to the shared directory.
   */
  copy {
    from configurations.mongoJavaDriver
    into new File(autoFvtDir, 'publish/shared')
    rename 'mongo-java-driver-.*.jar', 'mongo-java-driver.jar'
  }

  /*
   * Mongo OAuth custom store BELL test servers.
   */
  def servers = [
    'com.ibm.ws.security.oauth-2.0.customstore.bell.fat',
    'com.ibm.ws.security.oauth-2.0.customstore2.bell.fat',
    'com.ibm.ws.security.oauth-2.0.customstore3.bell.fat'
  ]
  servers.each { server -> 
    copy {
      from new File(project(':com.ibm.ws.security.oauth_test.custom_servlets').buildDir, 'test-application/oAuth20MongoSetup.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/apps')
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthclient.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthclient.ear', 'com.ibm.oauth.test.client.ear'
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthtaidemo.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthtaidemo.ear', 'OauthTaiDemo.ear'
    }
  }

  /*
   * Mongo OAuth custom store user feature test servers.
   */
  servers = [
    'com.ibm.ws.security.oauth-2.0.customstore.fat',
    'com.ibm.ws.security.oauth-2.0.customstore2.fat',
    'com.ibm.ws.security.oauth-2.0.customstore3.fat',
    'com.ibm.ws.security.oauth-2.0.customstore.xor.fat'
  ]
  servers.each { server -> 
    copy {
      from new File(project(':com.ibm.ws.security.oauth_test.custom_servlets').buildDir, 'test-application/oAuth20MongoSetup.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/apps')
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthclient.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthclient.ear', 'com.ibm.oauth.test.client.ear'
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthtaidemo.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthtaidemo.ear', 'OauthTaiDemo.ear'
    }
    copy {
      from configurations.mongoJavaDriver
      into new File(autoFvtDir, 'publish/servers/' + server + '/mongoDB')
      rename 'mongo-java-driver-.*.jar', 'mongo-java-driver.jar'
    }
  }

  /*
   * Derby OAuth store test servers.
   */
  servers = [
    'com.ibm.ws.security.oauth-2.0.derby.fat',
    'com.ibm.ws.security.oauth-2.0.derby2.fat',
    'com.ibm.ws.security.oauth-2.0.derby3.fat',
    'com.ibm.ws.security.oauth-2.0.derby.xor.fat'
  ]
  servers.each { server -> 
    copy {
      from configurations.derbyJar
      into new File(autoFvtDir, 'publish/servers/' + server + '/derby')
      rename 'derby-.*.jar', 'derby.jar'
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthclient.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthclient.ear', 'com.ibm.oauth.test.client.ear'
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth_test.servlets').buildDir, 'test-application/oAuth20DerbySetup.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthtaidemo.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthtaidemo.ear', 'OauthTaiDemo.ear'
    }
  }

  /*
   * All other servers.
   */
  servers = [
    'com.ibm.ws.security.oauth-2.0.fat',
    'com.ibm.ws.security.oauth-2.0.consentform.fat',
    'com.ibm.ws.security.oauth-2.0.loginform.fat'
  ]
  servers.each { server -> 
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthclient.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthclient.ear', 'com.ibm.oauth.test.client.ear'
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthtaidemo.ear')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthtaidemo.ear', 'OauthTaiDemo.ear'
    }
    copy {
      from new File(buildDir, 'com.ibm.ws.security.oauth_fat.jar')
      into new File(autoFvtDir, 'publish/servers/' + server)
      rename 'com.ibm.ws.security.oauth_fat.jar', 'testLib.jar'
    }
  }
  
  servers = [
    'com.ibm.ws.security.oauth-2.0.consentform.fat',
	'com.ibm.ws.security.oauth-2.0.customstore.bell.fat',
	'com.ibm.ws.security.oauth-2.0.customstore.fat',
	'com.ibm.ws.security.oauth-2.0.customstore.xor.fat',
	'com.ibm.ws.security.oauth-2.0.customstore2.bell.fat',
	'com.ibm.ws.security.oauth-2.0.customstore2.fat',
	'com.ibm.ws.security.oauth-2.0.customstore3.bell.fat',
	'com.ibm.ws.security.oauth-2.0.customstore3.fat',
	'com.ibm.ws.security.oauth-2.0.derby.fat',
	'com.ibm.ws.security.oauth-2.0.derby.xor.fat',
	'com.ibm.ws.security.oauth-2.0.derby2.fat',
	'com.ibm.ws.security.oauth-2.0.derby3.fat',
	'com.ibm.ws.security.oauth-2.0.fat',
	'com.ibm.ws.security.oauth-2.0.loginform.fat'
  ]
  servers.each { server ->
    copy { 
      from new File(projectDir, 'publish/files/serversettings/')
      into new File(autoFvtDir, 'publish/servers/' + server + '/imports')
      include '*.xml'
    }
    copy { 
      from new File(projectDir, 'securitykeys/')
      into new File(autoFvtDir, 'publish/servers/' + server)
      include 'oauthTest*Store.p12'
    }  }
  
}
