/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
defaultTasks 'clean', 'build'

subprojects {

  plugins.apply 'java'
  plugins.apply 'maven-publish'
  plugins.apply 'jacoco'

  def props = new Properties()
  rootProject.file('generated.properties').withInputStream { props.load(it) }

  /* Project artifacts are versioned by bnd Bundle-Version attribute, with the qualifier being current Git branch. */
  def projectVersion = (isRelease ? bnd.buildID : "1.0.${qualifier}-SNAPSHOT")
  if (releaseVersionOverride != null) {
    projectVersion = releaseVersionOverride
  }
  project.version = bnd('Bundle-Version', projectVersion)
  jar {
    version=null
  }

  repositories {
    if (usrHomeProps.exists() && !props.getProperty('artifactory.force.external.repo')) {
      maven {
        credentials {
          username props.getProperty("artifactory.download.user")
          password props.getProperty("artifactory.download.token")
        }
        url ("https://" + props.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
      }
    } else {
      mavenCentral()
      maven {
        url ("http://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/wasliberty-open-liberty/")
      }
    }
  }

  publishing {
    repositories {
      if (isRemotePublishing) {

        maven {
          if(project.version.endsWith('-SNAPSHOT')) {
            url ("https://" + props.getProperty("artifactory.upload.server") + "/artifactory/wasliberty-open-liberty${matrixParams}")
          } else {
            url ("https://" + props.getProperty("artifactory.upload.server") + "/artifactory/wasliberty-open-liberty${matrixParams}")
          }
          credentials {
            username props.getProperty("artifactory.upload.user")
            password props.getProperty("artifactory.upload.token")
          }
        }

      } else {

        maven {
          url uri(cnf.file("${mavenLocalPath}"))
        }

      }
    }
  }

  release.dependsOn publish

  task publishWLPJars(type: Copy) {
    dependsOn jar
    def publishWlpJarDefault = parseBoolean(bnd('test.project', 'false')) ? 'true' : 'false'
    enabled bnd('publish.tool.jar', '').empty && !parseBoolean(bnd('publish.wlp.jar.disabled', publishWlpJarDefault))
    from project.buildDir
    into buildImage.file('wlp/' + bnd('publish.wlp.jar.suffix', 'lib'))
    include bnd('publish.wlp.jar.include', '*.jar')
    if (parseBoolean(bnd('publish.wlp.jar.rename', 'true'))) {
      // iFixed jars should get renamed with a qualifier so they can exist in the filesystem
      // next to the base version of the jar, *except* for jars that are directly
      // referenced in a tool script's classpath...
      if (((bnd('IBM-Interim-Fixes', '').empty) && (bnd('IBM-Test-Fixes', '').empty))
          || (project.name.equals("com.ibm.ws.kernel.boot"))
          || (project.name.equals("com.ibm.ws.appclient.boot"))
          || (project.name.equals("com.ibm.ws.kernel.boot.cmdline"))) {
        rename '(.*).jar', '$1' + "_${bnd.bFullVersion}.jar"
      }
      else {
        rename '(.*).jar', '$1' + "_${bnd.bFullVersion}.${qualifier}.jar"
      }
    }
  }

  task publishDevApiIBMJavadoc(type: Copy) {
    dependsOn jar
    from project.projectDir
    into buildImage.file('wlp/dev/api/ibm/javadoc')
    include 'com.ibm.websphere.appserver.api.*.javadoc.zip'
    rename '.javadoc.zip', "_${bnd.bVersion}-javadoc.zip"
  }

  task publishDevSpiIBMJavadoc(type: Copy) {
    dependsOn jar
    from project.projectDir
    into buildImage.file('wlp/dev/spi/ibm/javadoc')
    include 'com.ibm.websphere.appserver.spi.*.javadoc.zip'
    rename '.javadoc.zip', "_${bnd.bVersion}-javadoc.zip"
  }

  task publishToolScripts(type: Copy) {
    dependsOn jar
    enabled !bnd('publish.tool.script', '').empty
    from cnf.file('resources/bin')
    into buildImage.file('wlp/bin/' + bnd('publish.tool.script.subdir', ''))
    fileMode 0755
    rename 'tool(.*)', bnd('publish.tool.script') + '$1'
    filter(org.apache.tools.ant.filters.ReplaceTokens,
           tokens: [TOOL_JAR: bnd('publish.tool.script.subdir', '') + 'tools/' + bnd('publish.tool.jar', ''),
                    TOOL_SCRIPT: bnd('publish.tool.script.subdir', '') + bnd('publish.tool.script', ''),
                    TOOL_SCRIPT_DIR_LENGTH: bnd('publish.tool.script.dir.length', '5'),
                    TOOL_SCRIPT_RELATIVE: bnd('publish.tool.script.relative', '')])
  }

  task publishToolJars(type: Copy) {
    dependsOn jar
    dependsOn publishToolScripts
    enabled !bnd('publish.tool.jar', '').empty
    from project.buildDir
    into buildImage.file('wlp/bin/' + bnd('publish.tool.script.subdir', '') + 'tools')
    include bnd('publish.tool.jar', '')
  }

  task publishSchemaResources(type: Copy) {
    dependsOn jar
    from project.file('resources/schemas')
    into buildImage.file('wlp/dev/api/ibm/schema')
  }

  def featureFiles = fileTree(dir: project.projectDir, include: '*.feature')
  def featureToAttributes = [:]
  featureFiles.visit {
    if (it.isDirectory()) { return }

    def attributes = [:]
    String text = it.getFile().getText()
    String kind = null
    if (text.contains("kind=ga")) {
      kind = "ga"
    } else if (text.contains("kind=beta")) {
      kind = "beta"
    } else if (text.contains("kind=noship")) {
      kind = "noship"
    }
    String name = null
    int index = text.indexOf("symbolicName=")
    if (index != -1) {
      int endIndex = text.indexOf("\n", index)
      if (endIndex == -1) {
        endIndex = text.length()
      }

      name = text.substring(index + "symbolicName=".length(), endIndex)
      name = name.replaceAll("\\s+", "")
    } else {
      name = it.name.substring(0, it.name.size()-8)
    }

    attributes["name"] = name
    attributes["kind"] = kind
    featureToAttributes[it] = attributes
  }

  task publishFeatureResources {
    dependsOn jar
    dependsOn ':cnf:copyMavenLibs'
    inputs.files(featureFiles).skipWhenEmpty()
    outputs.dir buildImage.file('wlp/lib/features')
    outputs.dir new File(project.buildDir, 'repo')
    doFirst {
      buildImage.mkdir('wlp/lib/features')
      project.mkdir(new File(project.buildDir, 'repo'))
    }
    doLast {
      ant.taskdef(resource: 'com/ibm/ws/wlp/feature/tasks/default.properties') {
        classpath {
          fileset(dir: cnf.file('lib')) {
            include(name: "wlp-*.jar")
          }
          fileset(dir: cnf.file('mavenlibs')) {
            include(name: "biz.aQute.bnd-*.jar")
            include(name: "infra.buildtasks*.jar")
            include(name: "asm-all-5.2.jar")
            include(name: "org.apache.aries.util-*.jar")
            include(name: "osgi.core*.jar")
            include(name: "jackson*.jar")
            include(name: "jsoup-*.jar")
          }
        }
      }

      ant.taskdef(resource: 'com/ibm/ws/wlp/repository/default.properties') {
        classpath {
          fileset(dir: "${rootDir}/cnf/lib/") {
            include(name: "wlp-generateRepositoryContent.jar")
          }
          fileset(dir: "${rootDir}/cnf/mavenlibs") {
            include(name: "org.apache.aries.util-*.jar")
            include(name: "jsoup-*.jar")
          }
        }
      }

      // featureBnd task expects files in build/l10n
      copy {
        from project.file('resources/l10n')
        into project.file('build/l10n')
      }

      featureToAttributes.each { file, attr ->
        if (attr["kind"] != null) {
          String createFor = attr["kind"]
          String buildType = attr["kind"]
          String version = ("beta".equals(attr["kind"]) ? bnd.libertyBetaVersion : bnd.libertyServiceVersion)

          ant.featureBnd(bnd: file.getPath(),
                         createESA: "true",
                         dir: buildImage.file('wlp'),
                         esaDir: new File(project.buildDir, 'repo'),
                         createFor: createFor,
                         buildType: buildType,
                         junit: new File(project.buildDir, 'report/featureChecks.xml')) {
            defaultEdition(licenseURL: "https://www.eclipse.org/legal/epl-v10.html",
                           licensePath: buildImage.file('license'),
                           version: version,
                           licenseType: "EPL",
                           displayVersion: "OpenLiberty")
            edition(baseEdition: "beta")
            edition(baseEdition: "core",
                    validEditions: "")
            edition(baseEdition: "base",
                    validEditions: "BASE,BASE_ILAN,DEVELOPERS,EXPRESS,ND,zOS")
            edition(baseEdition: "nd",
                    validEditions: "BASE_ILAN,DEVELOPERS,ND,zOS")
            edition(baseEdition: "zos",
                    validEditions: "zOS")
            edition(baseEdition: "bluemix",
                    validEditions: "BLUEMIX")
            edition(baseEdition: "full")
            edition(baseEdition: "unsupported")
          }

          delete "${buildDir}/repo/description.html"
          ant.generateEsaDescriptionHtml(featureManifestFile: ant.properties['feature.manifest.file'],
                  descriptionHtmlOutputFile: "${buildDir}/repo/description.html",
                  generateKnowledgeCentreLinks: "true",
                  licenseType: "EPL")
          ant.zip(destfile: "${buildDir}/repo/${attr["name"]}.esa.metadata.zip") {
            fileset(dir: "${buildDir}/repo", includes: "description.html")
          }
        }
      }

      copy {
        from project.file('resources/l10n')
        into buildImage.file('wlp/lib/features/l10n')
      }

    }
  }

  task publishPlatformManifests(type: Copy) {
    dependsOn jar
    from project.file('publish/platform')
    into buildImage.file('wlp/lib/platform')
    include '*.mf'
    filter(org.apache.tools.ant.filters.ConcatFilter,
      append: file(cnf.file('resources/IBM-ProductID.txt')))
  }

  task publishPlatformFiles(type: Copy) {
    dependsOn jar
    dependsOn publishPlatformManifests
    from project.file('publish/platform')
    into buildImage.file('wlp/lib/platform')
    exclude '*.mf'
  }

  task publishTemplates(type: Copy) {
    dependsOn jar
    from project.file('publish/templates')
    into buildImage.file('wlp/templates')
  }

  task publishBinScripts(type: Copy) {
    dependsOn jar
    from project.file('publish/bin')
    into buildImage.file('wlp/bin')
    fileMode 0755
  }

  task publishClientScripts(type: Copy) {
    dependsOn jar
    enabled parseBoolean(bnd('publish.wlp.clients', 'true'))
    from project.file('publish/clients')
    into buildImage.file('wlp/clients')
  }

  task publishLibNative(type: Copy) {
    dependsOn jar
    from project.file('lib/native')
    into buildImage.file('wlp/lib/native')
  }

  assemble {
    dependsOn ':cnf:copyMavenLibs'
    dependsOn publishWLPJars
    dependsOn publishDevApiIBMJavadoc
    dependsOn publishDevSpiIBMJavadoc
    dependsOn publishToolJars
    dependsOn publishSchemaResources
    dependsOn publishFeatureResources
    dependsOn publishPlatformFiles
    dependsOn publishTemplates
    dependsOn publishBinScripts
    dependsOn publishClientScripts
    dependsOn publishLibNative
  }

  compileJava {
    if (!parseBoolean(bnd('instrument.disabled', 'false'))) {
      def instrument = fileTree( dir: compileJava.destinationDir, include: bnd('instrument.classesIncludes'), exclude: bnd('instrument.classesExcludes') )
      doLast {
        if (instrument.isEmpty())
          return
        ant.taskdef(name: 'instrumentForTrace', classname: 'com.ibm.ws.ras.instrument.internal.buildtasks.InstrumentForTrace') {
          classpath {
              fileset(dir: cnf.file('lib'), includes: "ras-instrumentation.jar")
          }
        }
        ant.instrumentForTrace( ffdc: bnd('instrument.ffdc'), taskInjection: bnd('instrument.taskInjection') ) {
            fileset(dir: compileJava.destinationDir, includes: bnd('instrument.classesIncludes'), excludes: bnd('instrument.classesExcludes'))
        }
      }
    }
  }

  task globalize {
      dependsOn ':cnf:copyMavenLibs'
      enabled parseBoolean(bnd('globalize', 'true'))
      ext.destinationDir = new File(buildDir, "src/${name}/java")
      inputs.files(fileTree(dir: project.file('resources'), include: '**/*.nlsprops')).skipWhenEmpty()
      outputs.dir destinationDir
      doFirst {
        project.mkdir(destinationDir)
      }
      doLast {
        copy {
          from project.file('resources')
          into destinationDir
          include '**/package-info.java'
        }
        ant.taskdef(resource: 'com/ibm/mantis/nls/antlib.xml') {
          classpath {
              fileset(dir: cnf.file('mavenlibs'), includes: "commons-*.jar")
              fileset(dir: cnf.file('mavenlibs'), includes: "mantis-*.jar")
          }
        }
        ant.validate() {
          fileset(dir: project.file('resources'), includes: "**/*.nlsprops", excludes: "**/*_*.nlsprops")
          completenessvalidator(messagesonly: "false")
          duplicatekeyvalidator()
          metadatavalidator()
          contentvalidator(constraint: "disallowed", pattern: '"\\{\\d+\\}"', loglevel: "warning", message: "variables should not be encapsulated in quotation marks") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\{\\d+\\}", loglevel: "warning", message: "variables are disallowed in explanations or useractions") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\b((WAS)|(TAM)|(WIM)|(WPS)|(eWAS)|(LUW)|(ND)|(MQSeries))\\b", loglevel: "warning", message: "product acronyms are disallowed")
          contentvalidator(constraint: "disallowed", pattern: "([A-Z0-9]{4,5})(\\d{4})([IWE]):\\S", loglevel: "error", message: "malformed message")
        }
        ant.normalize(dest: new File(project.buildDir, 'nlsbuild/normalized'), defaultencoding: "ISO-8859-1") {
          fileset(dir: project.file('resources'), includes: "**/*.nlsprops")
          encodingtable(encodings: cnf.file('resources/EncodingTable.properties'))
          globmapper(from: "*.nlsprops", to: "*.normalized")
        }
        ant.commonize(dest: new File(project.buildDir, 'nlsbuild/normalized'), commonmessagefile: cnf.file('resources/nls/commonmessages.properties')) {
          fileset(dir: new File(project.buildDir, 'nlsbuild/normalized'), includes: "**/*.normalized")
        }
        ant.transform() {
          fileset(dir: new File(project.buildDir, 'nlsbuild/normalized'), includes: "**/*.normalized")
          javatransformer(dest: destinationDir) {
            keyfilter {
              exclude(name: "*.explanation")
              exclude(name: "*.useraction")
            }
          }
        }

        // Copy the unsuffixed nlsprops files as _en.nlsprops and
        // commonize and normalize that. Then generate
        // the tmsource for all languages (including the newly
        // generated english source)
        File nlsbuildtemp = new File(project.buildDir, 'nlsbuild/temp')
        copy {
          from project.file('resources')
          into nlsbuildtemp
          include '**/*.nlsprops'
          exclude '**/*_??.nlsprops'
          exclude '**/*_??_??.nlsprops'
          rename '(.*).nlsprops', '$1' + "_en.nlsprops"
        }
        // Existing languages first
        ant.normalize(dest: new File(project.buildDir, 'nlsbuild/normalizedxml'), defaultencoding: "ISO-8859-1") {
          fileset(dir: project.file('resources')) {
            include(name: "**/*.nlsprops")
          }
          encodingtable(encodings: cnf.file('resources/EncodingTable.properties'))
          globmapper(from: "*.nlsprops", to: "*.normalized")
        }
        // And now english
        ant.normalize(dest: new File(project.buildDir, 'nlsbuild/normalizedxml'), defaultencoding: "ISO-8859-1") {
          fileset(dir: nlsbuildtemp) {
            include(name: "**/*_en.nlsprops")
          }
          encodingtable(encodings: cnf.file('resources/EncodingTable.properties'))
          globmapper(from: "*.nlsprops", to: "*.normalized")
        }

        ant.commonize(dest: new File(project.buildDir, 'nlsbuild/normalizedxml'), commonmessagefile: cnf.file('resources/nls/commonmessages.properties')) {
          fileset(dir: new File(project.buildDir, 'nlsbuild/normalizedxml'), includes: "**/*.normalized")
          globmapper(from: "*.normalized", to: "*.commonized")
        }

        // The xml files generated by the tmstransformer are not usually used by the local project.
        // They are used and packaged by the build.pii.package project. 
        // So instead of generating these files to the local project and doing a copy, directly generate the 
        // files into the build.pii.package project.
        ant.transform() {
          fileset(dir: new File(project.buildDir, 'nlsbuild/normalizedxml'), includes: "**/*.commonized")
          tmstransformer(dest: rootProject.file("build.pii.package/nlsxml/${project.name}"))
        }
      }
  }

  task copyPiiFiles(type: Copy) {
    enabled parseBoolean(bnd('copy.pii', 'true'))
    ext.destinationDir = rootProject.file("build.pii.package/nlssrc/${project.name}")
    from project.file('resources')
    into ext.destinationDir
    include '**/*.nlsprops'
    include 'OSGI-INF/l10n/*.properties'
    include 'l10n/*.properties'
  }

  task buildfat {
      // A no-op task for regular projects which FATs will override
      group = "build"
  }

  sourceSets {
    main {
      java.srcDir globalize.destinationDir
    }
  }

  compileJava {
    dependsOn globalize
    options.warnings = false
    options.fork = true
  }

  test {
    environment("WLP_INSTALL_DIR", buildImage.file('wlp'))
    jvmArgs "-Dtest.buildDir=${buildDir}"
    jvmArgs "-Djava.io.tmpdir=${buildDir}/tmp"
    jvmArgs "-Dmain.classesDir=" + compileJava.destinationDir
    jvmArgs "-Dtest.classesDir=" + compileTestJava.destinationDir
  }

  test {
    dependsOn ':cnf:copyMavenLibs'
    def testports = fileTree(dir: compileTestJava.destinationDir, include: 'unittestports.properties')
    doFirst {
      if (testports.isEmpty())
        return
      ant.taskdef(name: 'portSelector', classname: 'com.ibm.aries.buildtasks.PortSelector') {
        classpath {
          fileset(dir: cnf.file('mavenlibs'), includes: "infra.buildtasks*.jar")
        }
      }
      def propertiesFile = new File(compileTestJava.destinationDir, 'unittestports.properties')
      ant.portSelector(engineName: "${bnd.buildEngineName}", location: propertiesFile, jvmarg: 'jvmargPorts')
      jvmArgs ant.jvmargPorts.tokenize()
    }
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        testCountTotal = testCountTotal + result.testCount
        successfulTestCountTotal = successfulTestCountTotal + result.successfulTestCount
        failedTestCountTotal = failedTestCountTotal + result.failedTestCount
        skippedTestCountTotal = skippedTestCountTotal + result.skippedTestCount
      }
    }
  }

  publishing {
    publications {

      // Publish ESA for each feature that contains kind=ga or kind=beta
      featureToAttributes.each { file, attr ->
        if ("ga".equals(attr["kind"]) || "beta".equals(attr["kind"])) {
          maven(MavenPublication) {
            artifactId attr["name"]
            version project.version
            artifact source: new File(project.buildDir, 'repo/' + attr["name"] + ".esa"), extension: 'esa'
            artifact source: new File(project.buildDir, 'repo/' + attr["name"] + ".esa.metadata.zip"), extension: 'esa.metadata.zip'
          }
        }
      }

    }
  }

  /*
   * Define dependencies for the Jacoco Ant plugin that is used to
   * generate coverage reports since Artifactory doesn't have the
   * POM and therefore can't resolve secondary dependencies.
   */
  dependencies {
     jacocoAnt "org.jacoco:org.jacoco.agent:0.7.9", 
               "org.jacoco:org.jacoco.ant:0.7.9",
               "org.jacoco:org.jacoco.core:0.7.9",
               "org.jacoco:org.jacoco.report:0.7.9",
               "org.ow2.asm:asm-all:5.2"
  }

  jacoco {
    toolVersion = "0.7.9"
  }

  test {
    /*
     * By default, don't generate code coverage unless we are
     * running the 'jacocoTestReport' task.
     */
    def enableJacoco = false
    gradle.startParameter.taskNames.each {
      if(it.contains("jacocoTestReport")) {
        enableJacoco = true;
      }
    }

    jacoco {
      append = false
      enabled = enableJacoco
    }
  }

  jacocoTestReport {
    description = 'Run the test task and generate the code coverage report.'

    dependsOn test

    reports {
      html.enabled = true
    }
  }

  jacocoTestCoverageVerification {
    violationRules {
      rule {
        limit {
          minimum = 0.8
        }
      }
    }
  }

  if (bndis('fat.project')) {
    apply from: cnf.file('gradle/scripts/fat.gradle')
  }
}

task testResults {
  dependsOn subprojects.test

  doLast {
    //TODO: need a better mechanism for 'stowaway properties' that need to be used in future gradle invocations
    def props = new Properties()
    rootProject.file('generated.properties').withInputStream { props.load(it) }

    props.setProperty('tests.total.failed', failedTestCountTotal.toString())
    props.setProperty('tests.total.successful', successfulTestCountTotal.toString())

    File propsFile = new File('generated.properties')
    props.store(propsFile.newWriter(), null)
  }
}

private boolean parseBoolean(String value) {
  return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}
