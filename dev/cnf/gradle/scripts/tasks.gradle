/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
defaultTasks 'clean', 'build'

subprojects {

  plugins.apply 'java'
  plugins.apply 'maven-publish'

  def props = new Properties()
  file("${rootDir}/generated.properties").withInputStream { props.load(it) }

  /* Project artifacts are versioned by bnd Bundle-Version attribute, with the qualifier being current Git branch. */
  def projectVersion = (isRelease ? bnd.buildID : "1.0.${qualifier}-SNAPSHOT")
  if (releaseVersionOverride != null) {
    projectVersion = releaseVersionOverride
  }
  project.version = bnd('Bundle-Version', projectVersion)

  repositories {
    if (usrHomeProps.exists() && !props.getProperty('artifactory.force.external.repo')) {
      maven {
        credentials {
          username props.getProperty("artifactory.download.user")
          password props.getProperty("artifactory.download.token")
        }
        url ("https://" + props.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
      }
    } else {
      mavenCentral()
      maven {
        url ("http://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/wasliberty-open-liberty/")
      }
    }
  }

  configurations {
    binaries
  }

  dependencies {
    binaries "com.ibm.ws.componenttest:mantis-collections:2.5.0"
    binaries "com.ibm.ws.componenttest:mantis-nls-standalone:2.5.0"
    binaries "com.ibm.ws.componenttest:infra.buildtasks-core:4.0.0"
    binaries "com.fasterxml.jackson.core:jackson-annotations:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-core:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-databind:2.2.3"
    binaries "org.osgi:osgi.core:5.0.0"
    binaries "org.apache.aries:org.apache.aries.util:1.1.3"
    binaries "commons-lang:commons-lang:2.4"
    binaries "org.apache.commons:commons-math:2.2"
    binaries "org.eclipse.jdt.core.compiler:ecj:4.3.1"
    binaries "org.ow2.asm:asm-all:5.2"
    binaries "org.jsoup:jsoup:1.7.2"
    binaries "com.ibm.ws.javax.j2ee:servlet:3.1"
    binaries "org.jmockit:jmockit:1.25"
  }

  task copyMavenLibs(type: Copy) {
    into "${rootDir}/cnf/mavenlibs"
    from configurations.binaries
  }

  publishing {
    repositories {
      if (isRemotePublishing) {

        maven {
          if(project.version.endsWith('-SNAPSHOT')) {
            url ("https://" + props.getProperty("artifactory.upload.server") + "/artifactory/wasliberty-open-liberty${matrixParams}")
          } else {
            url ("https://" + props.getProperty("artifactory.upload.server") + "/artifactory/wasliberty-open-liberty${matrixParams}")
          }
          credentials {
            username props.getProperty("artifactory.upload.user")
            password props.getProperty("artifactory.upload.token")
          }
        }

      } else {

        maven {
          url uri("${rootDir}/cnf/${mavenLocalPath}")
        }

      }
    }
  }

  release.dependsOn publish

  task publishWLPJars {
    dependsOn jar
    def publishWlpJarDefault = parseBoolean(bnd('test.project', 'false')) ? 'true' : 'false'
    enabled bnd('publish.tool.jar', '').empty && !parseBoolean(bnd('publish.wlp.jar.disabled', publishWlpJarDefault))
    inputs.files(fileTree( dir: "${buildDir}", include: '*.jar' )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/" + bnd('publish.wlp.jar.suffix', 'lib')
    doLast {
      copy {
        from "${buildDir}"
        into "${rootDir}/build.image/wlp/" + bnd('publish.wlp.jar.suffix', 'lib')
        include bnd('publish.wlp.jar.include', '*.jar')
        if (parseBoolean(bnd('publish.wlp.jar.rename', 'true'))) {
          // iFixed jars should get renamed with a qualifier so they can exist in the filesystem
          // next to the base version of the jar, *except* for jars that are directly
          // referenced in a tool script's classpath...
          if (((bnd('IBM-Interim-Fixes', '').empty) && (bnd('IBM-Test-Fixes', '').empty))
              || (project.name.equals("com.ibm.ws.kernel.boot"))
              || (project.name.equals("com.ibm.ws.appclient.boot"))
              || (project.name.equals("com.ibm.ws.kernel.boot.cmdline"))) {
            rename '(.*).jar', '$1' + "_${bnd.bFullVersion}.jar"
          }
          else {
			rename '(.*).jar', '$1' + "_${bnd.bFullVersion}.${qualifier}.jar"
          }
        }
      }
    }
  }

  task publishDevApiIBMJavadoc {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}", include: 'com.ibm.websphere.appserver.api.*.javadoc.zip' )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/dev/api/ibm/javadoc"
    doLast {
      copy {
        from "${projectDir}"
        into "${rootDir}/build.image/wlp/dev/api/ibm/javadoc"
        include 'com.ibm.websphere.appserver.api.*.javadoc.zip'
        rename '.javadoc.zip', "_${bnd.bVersion}-javadoc.zip"
      }
    }
  }

  task publishDevSpiIBMJavadoc {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}", include: 'com.ibm.websphere.appserver.spi.*.javadoc.zip' )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/dev/spi/ibm/javadoc"
    doLast {
      copy {
        from "${projectDir}"
        into "${rootDir}/build.image/wlp/dev/spi/ibm/javadoc"
        include 'com.ibm.websphere.appserver.spi.*.javadoc.zip'
        rename '.javadoc.zip', "_${bnd.bVersion}-javadoc.zip"
      }
    }
  }

  task publishToolJars {
    dependsOn jar
    enabled !bnd('publish.tool.jar', '').empty
    inputs.files(fileTree( dir: "${buildDir}", include: bnd('publish.tool.jar', '') )).skipWhenEmpty()
    outputs.files(fileTree( dir: "${rootDir}/build.image/wlp/bin/" + bnd('publish.tool.script.subdir', '') + 'tools', include: bnd('publish.tool.jar', '') ))
    doLast {
      if (!bnd('publish.tool.script', '').empty) {
        copy {
          from "${rootDir}/cnf/resources/bin"
          into "${rootDir}/build.image/wlp/bin/" + bnd('publish.tool.script.subdir', '')
          fileMode 0755
          rename 'tool(.*)', bnd('publish.tool.script') + '$1'
          filter(org.apache.tools.ant.filters.ReplaceTokens,
                 tokens: [TOOL_JAR: bnd('publish.tool.script.subdir', '') + 'tools/' + bnd('publish.tool.jar'),
                          TOOL_SCRIPT: bnd('publish.tool.script.subdir', '') + bnd('publish.tool.script'),
                          TOOL_SCRIPT_DIR_LENGTH: bnd('publish.tool.script.dir.length', '5'),
                          TOOL_SCRIPT_RELATIVE: bnd('publish.tool.script.relative', '')])
        }
      }
      copy {
        from "${buildDir}"
        into "${rootDir}/build.image/wlp/bin/" + bnd('publish.tool.script.subdir', '') + 'tools'
        include bnd('publish.tool.jar')
      }
    }
  }
  
  task publishSchemaResources {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/resources/schemas")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/dev/api/ibm/schema"
    doLast {
      copy {
        from "${projectDir}/resources/schemas"
        into "${rootDir}/build.image/wlp/dev/api/ibm/schema"
      }
    }
  }

  def featureFiles = fileTree(dir: "${projectDir}", include: '*.feature')
  def featureToAttributes = [:]
  featureFiles.visit {
    if (it.isDirectory()) { return }

    def attributes = [:]
    String text = it.getFile().getText()
    String kind = null
    if (text.contains("kind=ga")) {
      kind = "ga"
    } else if (text.contains("kind=beta")) {
      kind = "beta"
    } else if (text.contains("kind=noship")) {
      kind = "noship"
    }
    String name = null
    int index = text.indexOf("symbolicName=")
    if (index != -1) {
      int endIndex = text.indexOf("\n", index)
      if (endIndex == -1) {
        endIndex = text.length()
      }

      name = text.substring(index + "symbolicName=".length(), endIndex)
      name = name.replaceAll("\\s+", "")
    } else {
      name = it.name.substring(0, it.name.size()-8)
    }

    attributes["name"] = name
    attributes["kind"] = kind
    featureToAttributes[it] = attributes
  }

  task publishFeatureResources {
    dependsOn jar
    dependsOn copyMavenLibs
    inputs.files(featureFiles).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/features"
    outputs.dir "${buildDir}/repo"
    doLast {
      ant.taskdef(resource: 'com/ibm/ws/wlp/feature/tasks/default.properties') {
        classpath {
          fileset(dir: "${rootDir}/cnf/lib/") {
            include(name: "wlp-*.jar")
            include(name: "biz.aQute.bnd-3.3.0.jar")
          }
          fileset(dir: "${rootDir}/cnf/mavenlibs") {
            include(name: "infra.buildtasks*.jar")
            include(name: "asm-all-5.2.jar")
            include(name: "org.apache.aries.util-*.jar")
            include(name: "osgi.core*.jar")
            include(name: "jackson*.jar")
            include(name: "jsoup-*.jar")
          }
        }
      }

      ant.taskdef(resource: 'com/ibm/ws/wlp/repository/default.properties') {
        classpath {
          fileset(dir: "${rootDir}/cnf/lib/") {
            include(name: "wlp-generateRepositoryContent.jar")
          }
          fileset(dir: "${rootDir}/cnf/mavenlibs") {
            include(name: "org.apache.aries.util-*.jar")
            include(name: "jsoup-*.jar")
          }
        }
      }

      // featureBnd task expects files in build/l10n
      copy {
        from "${projectDir}/resources/l10n"
        into "${projectDir}/build/l10n"
      }

      file("${rootDir}/build.image/wlp/lib/features").mkdirs()
      file("${buildDir}/repo").mkdirs()

      featureToAttributes.each { file, attr ->
        if (attr["kind"] != null) {
          String createFor = attr["kind"]
          String buildType = attr["kind"]
          String version = ("beta".equals(attr["kind"]) ? bnd.libertyBetaVersion : bnd.libertyServiceVersion)

          ant.featureBnd(bnd: file.getPath(),
                         createESA: "true",
                         dir: "${rootDir}/build.image/wlp",
                         esaDir: "${buildDir}/repo",
                         createFor: createFor,
                         buildType: buildType,
                         junit: "${buildDir}/report/featureChecks.xml") {
            defaultEdition(licenseURL: "https://www.eclipse.org/legal/epl-v10.html",
                           licensePath: "${rootDir}/build.image/license",
                           version: version,
                           licenseType: "EPL",
                           displayVersion: "OpenLiberty")
            edition(baseEdition: "beta")
            edition(baseEdition: "core",
                    validEditions: "")
            edition(baseEdition: "base",
                    validEditions: "BASE,BASE_ILAN,DEVELOPERS,EXPRESS,ND,zOS")
            edition(baseEdition: "nd",
                    validEditions: "BASE_ILAN,DEVELOPERS,ND,zOS")
            edition(baseEdition: "zos",
                    validEditions: "zOS")
            edition(baseEdition: "bluemix",
                    validEditions: "BLUEMIX")
            edition(baseEdition: "full")
            edition(baseEdition: "unsupported")
          }

          delete "${buildDir}/repo/description.html"
          ant.generateEsaDescriptionHtml(featureManifestFile: ant.properties['feature.manifest.file'],
                  descriptionHtmlOutputFile: "${buildDir}/repo/description.html",
                  generateKnowledgeCentreLinks: "true",
                  licenseType: "EPL")
          ant.zip(destfile: "${buildDir}/repo/${attr["name"]}.esa.metadata.zip") {
            fileset(dir: "${buildDir}/repo", includes: "description.html")
          }

        }
      }

      copy {
        from "${projectDir}/resources/l10n"
        into "${rootDir}/build.image/wlp/lib/features/l10n"
      }

    }
  }

  task publishPlatformManifests {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/platform" )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/platform"
    doLast {
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image/wlp/lib/platform"
        exclude '*.mf'
      }
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image/wlp/lib/platform"
        include '*.mf'
        filter(org.apache.tools.ant.filters.ConcatFilter,
          append: file( "${rootDir}/cnf/resources/IBM-ProductID.txt" ))
      }
    }
  }

  task publishTemplates {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/templates")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/templates"
    doLast {
      copy {
        from "${projectDir}/publish/templates"
        into "${rootDir}/build.image/wlp/templates"
      }
    }
  }

  task publishBinScripts {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/bin")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/bin"
    doLast {
      copy {
        from "${projectDir}/publish/bin"
        into "${rootDir}/build.image/wlp/bin"
        fileMode 0755
      }
    }
  }

  task publishClientScripts {
    dependsOn jar
    enabled !parseBoolean(bnd('publish.wlp.clients.disabled', 'false'))
    inputs.files(fileTree( dir: "${projectDir}/publish/clients")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/clients"
    doLast {
      copy {
        from "${projectDir}/publish/clients"
        into "${rootDir}/build.image/wlp/clients"
      }
    }
  }

  task publishLibNative {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/lib/native")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/native"
    doLast {
      copy {
        from "${projectDir}/lib/native"
        into "${rootDir}/build.image/wlp/lib/native"
      }
    }
  }

  assemble {
    dependsOn copyMavenLibs
    dependsOn publishWLPJars
    dependsOn publishDevApiIBMJavadoc
    dependsOn publishDevSpiIBMJavadoc
    dependsOn publishToolJars
    dependsOn publishSchemaResources
    dependsOn publishFeatureResources
    dependsOn publishPlatformManifests
    dependsOn publishTemplates
    dependsOn publishBinScripts
    dependsOn publishClientScripts
    dependsOn publishLibNative
  }

  compileJava {
    if (!parseBoolean(bnd('instrument.disabled', 'false'))) {
      def instrument = fileTree( dir: compileJava.destinationDir, include: bnd('instrument.classesIncludes'), exclude: bnd('instrument.classesExcludes') )
      doLast {
        if (instrument.isEmpty())
          return
        ant.taskdef(name: 'instrumentForTrace', classname: 'com.ibm.ws.ras.instrument.internal.buildtasks.InstrumentForTrace') {
          classpath {
              fileset(dir: "${rootDir}/cnf/lib", includes: "ras-instrumentation.jar")
          }
        }
        ant.instrumentForTrace( ffdc: bnd('instrument.ffdc'), taskInjection: bnd('instrument.taskInjection') ) {
            fileset(dir: compileJava.destinationDir, includes: bnd('instrument.classesIncludes'), excludes: bnd('instrument.classesExcludes'))
        }
      }
    }
  }

  task globalize {
    dependsOn copyMavenLibs
    enabled !parseBoolean(bnd('globalize.disabled', 'false'))
      ext.destinationDir = new File(buildDir, "src/${name}/java")
      inputs.files(fileTree(dir: "${projectDir}/resources", include: '**/*.nlsprops')).skipWhenEmpty()
      outputs.dir destinationDir
      destinationDir.mkdirs()
      doLast {
        copy {
          from "${projectDir}/resources"
          into destinationDir
          include '**/package-info.java'
        }
        ant.taskdef(resource: 'com/ibm/mantis/nls/antlib.xml') {
          classpath {
              fileset(dir: "${rootDir}/cnf/mavenlibs", includes: "commons-*.jar")
              fileset(dir: "${rootDir}/cnf/mavenlibs", includes: "mantis-*.jar")
          }
        }
        ant.validate() {
          fileset(dir: "${projectDir}/resources", includes: "**/*.nlsprops", excludes: "**/*_*.nlsprops")
          completenessvalidator(messagesonly: "false")
          duplicatekeyvalidator()
          metadatavalidator()
          contentvalidator(constraint: "disallowed", pattern: '"\\{\\d+\\}"', loglevel: "warning", message: "variables should not be encapsulated in quotation marks") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\{\\d+\\}", loglevel: "warning", message: "variables are disallowed in explanations or useractions") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\b((WAS)|(TAM)|(WIM)|(WPS)|(eWAS)|(LUW)|(ND)|(MQSeries))\\b", loglevel: "warning", message: "product acronyms are disallowed")
          contentvalidator(constraint: "disallowed", pattern: "([A-Z0-9]{4,5})(\\d{4})([IWE]):\\S", loglevel: "error", message: "malformed message")
        }
        ant.normalize(dest: "${buildDir}/nlsbuild/normalized", defaultencoding: "ISO-8859-1") {
          fileset(dir: "${projectDir}/resources", includes: "**/*.nlsprops")
          encodingtable(encodings: "${rootDir}/cnf/resources/EncodingTable.properties")
          globmapper(from: "*.nlsprops", to: "*.normalized")
        }
        ant.commonize(dest: "${buildDir}/nlsbuild/normalized", commonmessagefile: "${rootDir}/cnf/resources/nls/commonmessages.properties") {
          fileset(dir: "${buildDir}/nlsbuild/normalized", includes: "**/*.normalized")
        }
        ant.transform() {
          fileset(dir: "${buildDir}/nlsbuild/normalized", includes: "**/*.normalized")
          javatransformer(dest: destinationDir) {
            keyfilter {
              exclude(name: "*.explanation")
              exclude(name: "*.useraction")
            }
          }
        }
      }
  }

  task copyPiiFiles {
    enabled !parseBoolean(bnd('copy.pii.disabled', 'false'))
    ext.destinationDir = new File(rootDir, "build.pii.package/nlssrc/${project.name}")
    inputs.files(fileTree(dir: "${projectDir}/resources", includes: ['**/*.nlsprops', 'OSGI-INF/l10n/*.properties', 'l10n/*.properties'])).skipWhenEmpty()
    outputs.dir destinationDir
    doLast {
      copy {
        from "${projectDir}/resources"
        into destinationDir
        include '**/*.nlsprops'
        include 'OSGI-INF/l10n/*.properties'
        include 'l10n/*.properties'
      }
    }
  }
  
  task buildfat {
      // A no-op task for regular projects which FATs will override
      group = "build"
  }

  sourceSets {
    main {
      java.srcDir globalize.destinationDir
    }
  }

  compileJava {
    dependsOn globalize
    options.warnings = false
    options.fork = true
  }

  test {
    environment("WLP_INSTALL_DIR", "${rootDir}/build.image/wlp")
    jvmArgs "-Dtest.buildDir=${buildDir}"
    jvmArgs "-Djava.io.tmpdir=${buildDir}/tmp"
    jvmArgs "-Dmain.classesDir=" + compileJava.destinationDir
    jvmArgs "-Dtest.classesDir=" + compileTestJava.destinationDir
  }

  test {
    dependsOn copyMavenLibs
    def testports = fileTree(dir: compileTestJava.destinationDir, include: 'unittestports.properties')
    doFirst {
      if (testports.isEmpty())
        return
      ant.taskdef(name: 'portSelector', classname: 'com.ibm.aries.buildtasks.PortSelector') {
        classpath {
          fileset(dir: "${rootDir}/cnf/mavenlibs", includes: "infra.buildtasks*.jar")
        }
      }
      def propertiesFile = new File(compileTestJava.destinationDir, 'unittestports.properties')
      ant.portSelector(engineName: "${bnd.buildEngineName}", location: propertiesFile, jvmarg: 'jvmargPorts')
      jvmArgs ant.jvmargPorts.tokenize()
    }
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        testCountTotal = testCountTotal + result.testCount
        successfulTestCountTotal = successfulTestCountTotal + result.successfulTestCount
        failedTestCountTotal = failedTestCountTotal + result.failedTestCount
        skippedTestCountTotal = skippedTestCountTotal + result.skippedTestCount
      }
    }
  }

  publishing {
    publications {

      // Publish ESA for each feature that contains kind=ga or kind=beta
      featureToAttributes.each { file, attr ->
        if ("ga".equals(attr["kind"]) || "beta".equals(attr["kind"])) {
          maven(MavenPublication) {
            artifactId attr["name"]
            version project.version
            artifact source: "${buildDir}/repo/" + attr["name"] + ".esa", extension: 'esa'
            artifact source: "${buildDir}/repo/" + attr["name"] + ".esa.metadata.zip", extension: 'esa.metadata.zip'
          }
        }
      }

    }
  }
  
}

task testResults {
  dependsOn subprojects.test

  doLast {
    //TODO: need a better mechanism for 'stowaway properties' that need to be used in future gradle invocations
    def props = new Properties()
    file("${rootDir}/generated.properties").withInputStream { props.load(it) }

    props.setProperty('tests.total.failed', failedTestCountTotal.toString())
    props.setProperty('tests.total.successful', successfulTestCountTotal.toString())

    File propsFile = new File('generated.properties')
    props.store(propsFile.newWriter(), null)
  }
}

private boolean parseBoolean(String value) {
  return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}
