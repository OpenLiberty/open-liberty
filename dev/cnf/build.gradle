/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

configurations {
    binaries
}

dependencies {
    binaries "com.ibm.ws.componenttest:mantis-collections:2.5.0"
    binaries "com.ibm.ws.componenttest:mantis-nls-standalone:2.5.0"
    binaries "com.ibm.ws.componenttest:infra.buildtasks-core:4.0.0"
    binaries "com.fasterxml.jackson.core:jackson-annotations:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-core:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-databind:2.2.3"
    binaries "org.osgi:osgi.core:5.0.0"
    binaries "org.apache.aries:org.apache.aries.util:1.1.3"
    binaries "commons-lang:commons-lang:2.4"
    binaries "org.apache.commons:commons-math:2.2"
    binaries "org.eclipse.jdt.core.compiler:ecj:4.3.1"
    binaries "org.ow2.asm:asm-all:5.2"
    binaries "org.jsoup:jsoup:1.7.2"
    binaries "com.ibm.ws.javax.j2ee:servlet:3.1"
    binaries "org.jmockit:jmockit:1.25"
    binaries "biz.aQute.bnd:biz.aQute.bnd:3.5.0"
    binaries "biz.aQute.bnd:biz.aQute.bnd.annotation:3.5.0"
    binaries "biz.aQute.bnd:org.osgi.impl.bundle.repoindex.cli:3.5.0"
}

task copyMavenLibs(type: Copy) {
    from configurations.binaries
    into cnf.file('mavenlibs')
}

task initialize {
    dependsOn copyMavenLibs
    doLast {
        println "Gradle Initialized"
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.DirectoryScanner
import groovy.util.XmlSlurper

DirectoryScanner.removeDefaultExclude("**/.gitignore")
DirectoryScanner.removeDefaultExclude("**/.gitattributes")

task everythingElseHasBeenReleased {
    dependsOn parent.subprojects.minus(project).release
}

task createGradleBootstrap {
    dependsOn everythingElseHasBeenReleased
    doLast {
        String depsList = ""
        rootProject.fileTree(dir: 'cnf/release', include: '**/*.pom').each {
            //for every pom file we will create an entry in the bootstrap containing the artifact and pom
            def pom = new XmlSlurper().parseText(it.getText())
            def pomsPackaging = '' //no ext is a jar
            if (pom.packaging != null && pom.packaging != '') {
                pomsPackaging = '@' + pom.packaging
            }
            if ("@pom".equals(pomsPackaging)) {
                //assuming artifacts with pom packaging are ESAs for now
                depsList = depsList + '    compile \'' + pom.groupId + ':' + pom.artifactId + ':' + pom.version + '@esa\'\n'
                depsList = depsList + '    compile \'' + pom.groupId + ':' + pom.artifactId + ':' + pom.version + '@esa.metadata.zip\'\n'
            } else {
                depsList = depsList + '    compile \'' + pom.groupId + ':' + pom.artifactId + ':' + pom.version + pomsPackaging + '\'\n'
            }
            depsList = depsList + '    compile \'' + pom.groupId + ':' + pom.artifactId + ':' + pom.version + '@pom\'\n'
        }

        File dependenciesFile = new File(project.buildDir, 'dependencies.gradle')
        dependenciesFile.createNewFile()
        dependenciesFile.text = """dependencies {
$depsList}
"""
    }
}

task createGaESAList {
    doLast {
        String features = ""
        rootProject.fileTree(dir: '.', include: '*/*.feature').visit { feature ->
            if (feature.isDirectory() || !feature.getFile().getText().contains("kind=ga")) {
                return
            }

            String name = feature.name.substring(0, feature.name.size()-8)
            features += name + "\n"
        }

        File gaEsa = new File(project.buildDir, 'gaFeatures.txt')
        gaEsa.createNewFile()
        gaEsa.text = features
    }
}

task createProjectBsnMapping {
    doLast {
        //map to retrieve project names from bsns
        def bsnToProject = [:]
        bndWorkspace.getCurrentProjects().each { project ->
            project.getBsns().each { bsn ->
                bsnToProject[bsn] = project.getName()
            }
        }
        Properties props = new Properties()
        props.putAll(bsnToProject)
    }
}

task createGeneratedReplacementProjects {
    dependsOn everythingElseHasBeenReleased
    doLast {
        File templateDir = new File(projectDir, 'gradle/projects.for.ivy.ant')
        rootProject.fileTree(dir: 'cnf/release', include: '**/*.pom').each {
            //for every pom file with jar as packaging, generate replacement projects
            def pom = new XmlSlurper().parseText(it.getText())

            if (pom.artifactId == null) { return }
            if (bsnToProject[pom.artifactId.toString()] == null) { return }
            def bndProject = bndWorkspace.getProject(bsnToProject[pom.artifactId.toString()])
            if (bndProject == null) { return }
            boolean generateReplacement = 'true'.equals(bndProject.get('generate.replacement', 'false'))
            if (!generateReplacement && 'true'.equals(bndProject.get('test.project', 'false'))) {
                return
            }

            if (pom.packaging == null || pom.packaging == '') {
                List bsns = bndProject.getBsns()
                int bsnCount = bndProject.isNoBundles() ? 0 : bndProject.getBsns().size()
                if (bsnCount > 0) {
                    String artifact = "${pom.artifactId}-${pom.version}.jar"
                    File targetDir = new File(buildDir, "replacements/" + bndProject.getName())
                    targetDir.mkdirs()
                    copy {
                        from templateDir
                        into targetDir
                        include '*.template'
                        rename { String fileName ->
                            fileName.replace('.template', '')
                        }
                        filter(ReplaceTokens, tokens: [PROJECT_NAME: bndProject.getName(), MAVEN_ARTIFACT: artifact])
                    }
                    if ("com.ibm.ws.logging".equals(pom.artifactId.toString())) {
                        String classpathEntries = '	<classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>\n' +
                                '	<classpathentry combineaccessrules="false" exported="true" kind="src" path="/com.ibm.ws.kernel.boot"/>\n'
                        File classpathFile = new File(buildDir, "replacements/" + bndProject.getName() + "/.classpath")
                        classpathFile.delete()
                        classpathFile.createNewFile()
                        classpathFile.text = """<?xml version="1.0" encoding="UTF-8"?>
    <classpath>
    $classpathEntries</classpath>
    """
                    }
                    if (bndProject.getBsns().size() > 1) {
                        String classpathEntries = ""
                        for (String line : classpathFile.getText()) {
                            if (line.contains("classpathentry")) {
                                classpathEntries += line
                            }
                        }
                        classpathEntries = '	<classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>\n' + classpathEntries

                        File classpathFile = new File(buildDir, "replacements/" + bndProject.getName() + "/.classpath")
                        classpathFile.delete()
                        classpathFile.createNewFile()
                        classpathFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<classpath>
$classpathEntries</classpath>
"""
                    }
                }
            }
        }
    }
}

def releaserepo = file(bnd('releaserepo', 'release')) /* Release repository. */

task ('createIndex') {
    dependsOn copyMavenLibs
    dependsOn everythingElseHasBeenReleased
    description 'Index the release repository.'
    group 'release'

    /* Bundles to index. */
    def bundles = fileTree(releaserepo) {
        include '**/*.jar'
        exclude '**/*-latest.jar'
        exclude '**/*-sources.jar'
        exclude '**/*-javadoc.jar'
    }

    inputs.files { bundles.files }

    /* Index files */
    def index_uncompressed = new File(releaserepo, 'index.xml')
    def index_compressed = new File(releaserepo, 'index.xml.gz')

    outputs.files index_uncompressed, index_compressed

    doLast {
        /* indexer */
        def repoindexJar = project.file('mavenlibs/org.osgi.impl.bundle.repoindex.cli-3.5.0.jar')

        def bundlesToIndex = bundles*.absolutePath.sort()

        /* index uncompressed. */
        javaexec {
            main = '-jar' // first arg must be the jar
            args repoindexJar
            args '--pretty'
            args '-r', index_uncompressed
            args '-d', releaserepo
            args '-n', 'bnd'
            args bundlesToIndex
        }.assertNormalExitValue()
        logger.info 'Generated index {}.', index_uncompressed

        /* index compressed. */
        javaexec {
            main = '-jar' // first arg must be the jar
            args repoindexJar
            args '-r', index_compressed
            args '-d', releaserepo
            args '-n', 'bnd'
            args bundlesToIndex
        }.assertNormalExitValue()
        logger.info 'Generated index {}.', index_compressed
    }
}

task zipGradleBootstrap(type: Zip) {
    dependsOn createGradleBootstrap
    dependsOn createGeneratedReplacementProjects
    dependsOn createGaESAList
    dependsOn createIndex
    baseName 'gradle-bootstrap'
    into 'prereq.published', {from new File(project.buildDir, 'dependencies.gradle'), new File(project.buildDir, 'gaFeatures.txt')}
    from new File(project.buildDir, 'replacements')
}

publishing {
  publications {
    gradle(MavenPublication) {
        artifactId 'gradle-bootstrap'
        version project.version
        artifact zipGradleBootstrap
    }
  }
}
