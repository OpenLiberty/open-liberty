/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

configurations {
    binaries
}

dependencies {
    binaries "com.ibm.ws.componenttest:mantis-collections:2.5.0"
    binaries "com.ibm.ws.componenttest:mantis-nls-standalone:2.5.0"
    binaries "com.ibm.ws.componenttest:infra.buildtasks-core:4.0.0"
    binaries "com.fasterxml.jackson.core:jackson-annotations:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-core:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-databind:2.2.3"
    binaries "org.osgi:osgi.core:5.0.0"
    binaries "org.apache.aries:org.apache.aries.util:1.1.3"
    binaries "commons-lang:commons-lang:2.4"
    binaries "org.apache.commons:commons-math:2.2"
    binaries "org.eclipse.jdt.core.compiler:ecj:4.3.1"
    binaries "org.ow2.asm:asm-all:5.2"
    binaries "org.jsoup:jsoup:1.7.2"
    binaries "com.ibm.ws.javax.j2ee:servlet:3.1"
    binaries "org.jmockit:jmockit:1.25"
    binaries "biz.aQute.bnd:biz.aQute.bnd:3.5.0"
    binaries "biz.aQute.bnd:biz.aQute.bnd.annotation:3.5.0"
    binaries "biz.aQute.bnd:org.osgi.impl.bundle.repoindex.cli:3.5.0"
}

task copyMavenLibs(type: Copy) {
    from configurations.binaries
    into cnf.file('mavenlibs')
}

task initialize {
    dependsOn copyMavenLibs
    doLast {
        println "Gradle Initialized"
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.DirectoryScanner

DirectoryScanner.removeDefaultExclude("**/.gitignore")
DirectoryScanner.removeDefaultExclude("**/.gitattributes")

/**
 * Writes two ivy.xml files:
 *  ivy.xml grabs specific versions so that local devs can switch which branches are consumed from, and
 *  ivy-latest.xml grabs latest.integration so most recent versions are downloaded.
 */
task createIvyXml {
    doLast {
        String depsList = ""
        String depsListLatest = ""

        rootProject.fileTree(dir: '.', include: '*').visit { element ->
            if (element.isDirectory()) {
                String relativePath = "$element.relativePath"
                def bndProject = bndWorkspace.getProject(relativePath)
                if (bndProject != null && !bndProject.isNoBundles()) {
                    String artifact = ""
                    for (String bsn : bndProject.getBsns()) {
                        String org = ""
                        String name = ""
                        if ('true'.equals(bndProject.get('test.project', 'false'))) {
                            (org, name) = ['test', bsn]
                        } else {
                            (org, name) = ['dev', bsn]
                        }
                        depsList = depsList + '        <dependency org="' + org + '" name="' + name + '" rev="' + bndProject.getVersion(bsn) + '">\n'
                        depsList = depsList + '          <artifact name="' + name + '" type="jar"/>\n'
                        depsList = depsList + '          <artifact name="' + name + '" type="pom"/>\n'
                        depsList = depsList + '        </dependency>\n'
                        depsListLatest = depsListLatest + '        <dependency org="' + org + '" name="' + name + '" rev="latest.integration">\n'
                        depsListLatest = depsListLatest + '          <artifact name="' + name + '" type="jar"/>\n'
                        depsListLatest = depsListLatest + '          <artifact name="' + name + '" type="pom"/>\n'
                        depsListLatest = depsListLatest + '        </dependency>\n'
                    }
                }
            }
        }

        File ivyXml = new File(project.buildDir, 'ivy.xml')
        ivyXml.createNewFile()
        ivyXml.text = """<ivy-module version="2.0">
  <info organisation="dev" module="prereq.published"/>
  <dependencies>
$depsList  </dependencies>
</ivy-module>
"""
        File ivyXmlLatest = new File(project.buildDir, 'ivy-latest.xml')
        ivyXmlLatest.createNewFile()
        ivyXmlLatest.text = """<ivy-module version="2.0">
  <info organisation="dev" module="prereq.published"/>
  <dependencies>
$depsListLatest  </dependencies>
</ivy-module>
"""
    }
}

task createGradleBootstrap {
    doLast {
        String depsList = ""

        rootProject.fileTree(dir: '.', include: '*').visit { element ->
            if (element.isDirectory()) {
                String relativePath = "$element.relativePath"
                def bndProject = bndWorkspace.getProject(relativePath)
                if (bndProject != null && !bndProject.isNoBundles()) {
                    String artifact = ""
                    for (String bsn : bndProject.getBsns()) {
                        String org = ""
                        String name = ""
                        if ('true'.equals(bndProject.get('test.project', 'false'))) {
                            (org, name) = ['test', bsn]
                        } else {
                            (org, name) = ['dev', bsn]
                        }
                        depsList = depsList + '    compile \'' + org + ':' + name + ':' + bndProject.getVersion(bsn) + '\'\n'
                        depsList = depsList + '    compile \'' + org + ':' + name + ':' + bndProject.getVersion(bsn) + '@pom\'\n'
                    }
                }
            }
        }

        String org = "dev"
        Map<String, String> projectPathToVersion = new HashMap<String, String>()
        rootProject.subprojects.each { p ->
            projectPathToVersion.put(p.name, p.version)
        }

        rootProject.fileTree(dir: '.', include: '*/*.feature').visit { feature ->
            if (feature.isDirectory()) return

            String text = feature.getFile().getText()
            if (text.contains("kind=ga") || text.contains("kind=beta")) {
                String name = null
                int index = text.indexOf("symbolicName=")
                if (index != -1) {
                    int endIndex = text.indexOf("\n", index)
                    if (endIndex == -1) {
                        endIndex = text.length()
                    }
                    // symbolicName= is length 13
                    name = text.substring(index + 13, endIndex)
                    name = name.replaceAll("\\s+", "")
                } else {
                    name = feature.name.substring(0, feature.name.size() - 8)
                }

                String featureName = feature.name.substring(0, feature.name.size() - 8)
                String rev = projectPathToVersion.get(featureName)
                if (rev != null) {
                    depsList = depsList + '    compile \'' + org + ':' + name + ':' + rev + '@esa\'\n'
                    depsList = depsList + '    compile \'' + org + ':' + name + ':' + rev + '@esa.metadata.zip\'\n'
                }
            }
        }

        File dependenciesFile = new File(project.buildDir, 'dependencies.gradle')
        dependenciesFile.createNewFile()
        dependenciesFile.text = """dependencies {
$depsList
}
"""
    }
}

task createGaESAList {
    doLast {
        String features = ""
        rootProject.fileTree(dir: '.', include: '*/*.feature').visit { feature ->
            if (feature.isDirectory() || !feature.getFile().getText().contains("kind=ga")) {
                return
            }

            String name = feature.name.substring(0, feature.name.size()-8)
            features += name + "\n"
        }

        File gaEsa = new File(project.buildDir, 'gaFeatures.txt')
        gaEsa.createNewFile()
        gaEsa.text = features
    }
}

task createGeneratedReplacementProjects {
    doLast {
        File templateDir = new File(projectDir, 'gradle/projects.for.ivy.ant')
        rootProject.fileTree(dir: '.', include: '*').visit { element ->
            if (element.isDirectory()) {
                String relativePath = "$element.relativePath"
                def bndProject = bndWorkspace.getProject(relativePath)
                if (bndProject == null) {
                    return
                }
                if ('true'.equals(bndProject.get('test.project', 'false'))) {
                    return
                }

                List bsns = bndProject.getBsns()
                int bsnCount = bndProject.isNoBundles() ? 0 : bndProject.getBsns().size()
                if (bsnCount > 0) {
                    String firstBsn = bndProject.getBsns()[0]
                    String artifact = firstBsn + '-' + bndProject.getVersion(firstBsn) + '.jar'
                    //println "projectName=" + relativePath + ", artifact=" + artifact
                    File targetDir = new File(buildDir, 'replacements/' + relativePath)
                    targetDir.mkdirs()
                    copy {
                        from templateDir
                        into targetDir
                        include '*.template'
                        rename { String fileName ->
                            fileName.replace('.template', '')
                        }
                        filter(ReplaceTokens, tokens: [PROJECT_NAME: relativePath, MAVEN_ARTIFACT: artifact])
                    }
                    if (relativePath.equals('com.ibm.ws.logging')) {
                        String classpathEntries = '	<classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>\n' +
                                                  '	<classpathentry combineaccessrules="false" exported="true" kind="src" path="/com.ibm.ws.kernel.boot"/>\n'
                        File classpathFile = new File(buildDir, "replacements/${relativePath}/.classpath")
                        classpathFile.delete()
                        classpathFile.createNewFile()
                        classpathFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<classpath>
$classpathEntries</classpath>
"""
                    }
                    if (bndProject.getBsns().size() > 1) {
                        String classpathEntries = ""
                        //println bndProject.getBsns()
                        for (String bsn : bndProject.getBsns()) {
                            artifact = bsn + '-' + bndProject.getVersion(bsn) + '.jar'
                            classpathEntries = '	<classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>\n' + classpathEntries
                        }
                        File classpathFile = new File(buildDir, "replacements/${relativePath}/.classpath")
                        classpathFile.delete()
                        classpathFile.createNewFile()
                        classpathFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<classpath>
$classpathEntries</classpath>
"""
                    }
                }
            }
        }
    }
}

def releaserepo = file(bnd('releaserepo', 'release')) /* Release repository. */

task ('createIndex') {
    dependsOn copyMavenLibs
    description 'Index the release repository.'
    group 'release'

    /* Bundles to index. */
    def bundles = fileTree(releaserepo) {
        include '**/*.jar'
        exclude '**/*-latest.jar'
        exclude '**/*-sources.jar'
        exclude '**/*-javadoc.jar'
    }

    inputs.files { bundles.files }

    /* Index files */
    def index_uncompressed = new File(releaserepo, 'index.xml')
    def index_compressed = new File(releaserepo, 'index.xml.gz')

    outputs.files index_uncompressed, index_compressed

    doLast {
        /* indexer */
        def repoindexJar = project.file('mavenlibs/org.osgi.impl.bundle.repoindex.cli-3.5.0.jar')

        def bundlesToIndex = bundles*.absolutePath.sort()

        /* index uncompressed. */
        javaexec {
            main = '-jar' // first arg must be the jar
            args repoindexJar
            args '--pretty'
            args '-r', index_uncompressed
            args '-d', releaserepo
            args '-n', 'bnd'
            args bundlesToIndex
        }.assertNormalExitValue()
        logger.info 'Generated index {}.', index_uncompressed

        /* index compressed. */
        javaexec {
            main = '-jar' // first arg must be the jar
            args repoindexJar
            args '-r', index_compressed
            args '-d', releaserepo
            args '-n', 'bnd'
            args bundlesToIndex
        }.assertNormalExitValue()
        logger.info 'Generated index {}.', index_compressed
    }
}

task zipIvyBootstrap(type: Zip) {
    dependsOn createIvyXml
    dependsOn createGeneratedReplacementProjects
    dependsOn createGaESAList
    dependsOn createIndex
    baseName 'ivy-bootstrap'
    into 'prereq.published', {from new File(project.buildDir, 'ivy.xml'), new File(project.buildDir, 'ivy-latest.xml')}
    from new File(project.buildDir, 'replacements')
}

task zipGradleBootstrap(type: Zip) {
    dependsOn createGradleBootstrap
    dependsOn createGeneratedReplacementProjects
    dependsOn createGaESAList
    dependsOn createIndex
    baseName 'gradle-bootstrap'
    into 'prereq.published', {from new File(project.buildDir, 'dependencies.gradle'), new File(project.buildDir, 'gaFeatures.txt')}
    from new File(project.buildDir, 'replacements')
}

publishing {
  publications {
    ivy(MavenPublication) {
        artifactId 'ivy-bootstrap'
        version project.version
        artifact zipIvyBootstrap
    }
    gradle(MavenPublication) {
        artifactId 'gradle-bootstrap'
        version project.version
        artifact zipGradleBootstrap
    }
  }
}
