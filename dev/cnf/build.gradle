/*******************************************************************************
 * Copyright (c) 2017, 2023 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

configurations {
    binaries
}

dependencies {
    binaries "com.ibm.ws.componenttest:mantis-collections:2.5.0"
    binaries "com.ibm.ws.componenttest:mantis-nls-standalone:2.5.0"
    binaries "com.ibm.ws.componenttest:infra.buildtasks-core:7.0.2"
    binaries "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    binaries "com.fasterxml.jackson.core:jackson-core:2.15.2"
    binaries "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    binaries "org.osgi:org.osgi.core:6.0.0"
    binaries "org.apache.aries:org.apache.aries.util:1.1.3"
    binaries "commons-io:commons-io:2.11.0"
    binaries "commons-lang:commons-lang:2.4"
    binaries "org.apache.commons:commons-math:2.2"
    binaries "org.eclipse.jdt:ecj:3.22.0"
    binaries "org.ow2.asm:asm-all:5.2"
    binaries "org.jsoup:jsoup:1.7.2"
    binaries "com.ibm.ws.javax.j2ee:servlet:3.1"
    binaries "org.jmockit:jmockit:1.25"
    binaries "org.apache.maven:maven-model:3.5.0"
    binaries "javax.json:javax.json-api:1.1.2"
    binaries "org.glassfish:javax.json:1.1.2"
    binaries "org.codehaus.plexus:plexus-utils:3.0.24"
    binaries "org.apache.ant:ant:1.10.10"
    binaries "com.jcraft:jsch:0.1.54"
}

//TODO: move this function somewhere common
void sortAlphabetical(String filename){
  def list = []
  def orig = file(filename)
  orig.eachLine { line ->
      line = line.trim()
      list << line
  }
  orig.delete()
  
  println("Sorting "+filename)
  def newfile = file(filename)
  list.sort()
  for(String line:list){
    newfile << line
    newfile << "\n"
  }
  
}

//TODO: move this function somewhere common
void assertAlphabetical(String filename) {
  def prev = ""
  def lines = file(filename).readLines()
  for(String line:lines){
      line = line.trim()
      if(line.compareTo(prev) < 0){
          println(filename+' is not alphabetical. \"' + prev + '\" should be after \"' +line+ '\"')
          sortAlphabetical(filename)
          break;
      }
      prev = line
  }
}

task checkAlphabetical() {
  assertAlphabetical('oss_dependencies.maven')
  assertAlphabetical('oss_ibm_source_dependencies.maven')
  assertAlphabetical('oss_source_dependencies.maven')
  assertAlphabetical('oss_ibm.maven')
}

task copyMavenLibs(type: Copy) {
    from configurations.binaries
    into project.file('mavenlibs')
}

task dependabotGenerate() {
  dependsOn checkAlphabetical
  inputs.file('oss_dependencies.maven')
  inputs.file('oss_ibm_source_dependencies.maven')
  inputs.file('oss_source_dependencies.maven')
  outputs.file('cnf/dependabot/check_this_in_if_it_changes/pom.xml')
  ArrayList inputFiles = [file('oss_dependencies.maven'),file('oss_ibm_source_dependencies.maven'),file('oss_source_dependencies.maven')]
  doLast {
    // Generate pom.xml
    File pom = rootProject.file('cnf/dependabot/check_this_in_if_it_changes/pom.xml')
    pom.delete()
      
    // First generate header content
    pom << "<?xml version='1.0' encoding='utf-8'?>\n"
    pom << "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n"
    pom << "  <modelVersion>4.0.0</modelVersion>\n"
    pom << "  <groupId>io.openliberty</groupId>\n"
    pom << "  <artifactId>dummy-pom</artifactId>\n"
    pom << "  <version>1.0-SNAPSHOT</version>\n\n"
    pom << "  <!-- GENERATED FILE, DO NOT HAND EDIT! -->\n\n"
    pom << "  <!-- If changes are generated from the build, check in the changes -->\n\n"
    pom << "  <dependencies>\n"
    
    inputFiles.each { aFile ->  
        aFile.eachLine { line ->
          line = line.trim()
          if (line.startsWith('#') || line.isEmpty())
            return;
          def (g,a,v) = line.split(':').collect { it.trim() }
          pom << "    <dependency>\n"
          pom << "      <groupId>"    + g + "</groupId>\n"
          pom << "      <artifactId>" + a + "</artifactId>\n"
          pom << "      <version>"    + v + "</version>\n"
          pom << "    </dependency>\n"
        }
    }
    pom << "  </dependencies>\n"
    pom << "</project>\n"
  }
}

def pluginsProject = project(':wlp-bndPlugins')

task updatePluginClasses(type: Copy) {
    dependsOn ':wlp-bndPlugins:jar'
    dependsOn dependabotGenerate
    from zipTree(bnd.get('build.bnd.plugins.jar'))
    into project.file('bndplugins/classes')
    doLast {
        println 'Refresh bnd Projects after building bnd plugins in ' + project.name
        bnd.project.refresh()
        bnd.project.clear()
        parent.subprojects {
            if (project != pluginsProject) {
                bnd.project.refresh()
                bnd.project.clear()
            }
        }
    }
}


task cleanPublishedOutputs(type: Delete) {
    doLast {
        println rootProject.file(rootProject.ext.get('published.outputs'))
        rootProject.delete rootProject.file(rootProject.ext.get('published.outputs'))
    }
}

task cleanRepos(type: Delete) {
    doLast {
        project.delete('release')
        delete 'release.mvn'
        project.delete('local')
        delete 'local.mvn'
        delete fileTree('mavenlibs')
    }
}

task initialize {
    dependsOn cleanRepos
    dependsOn cleanPublishedOutputs
    dependsOn copyMavenLibs
    dependsOn updatePluginClasses
    doLast {
        println "Gradle Initialized"
    }
}

clean {
    dependsOn cleanRepos
    dependsOn cleanPublishedOutputs
}

classes {
    dependsOn updatePluginClasses
}

/* bnd plugins influence bundle contents, so add plugins project output to jar inputs */
parent.subprojects {
  if (project != pluginsProject) {
    jar.inputs.files { tasks.getByPath(':cnf:updatePluginClasses') }
  }
}

import org.apache.tools.ant.filters.ReplaceTokens
import groovy.util.XmlSlurper

String getVersionFromReleaseRepo(String org, String name) {
    def versions = []
    project.fileTree(dir: 'release/' + org + '/' + name, include: '**/*.pom', exclude: '**/.bnd/**').visit { entry ->
        if (entry.isDirectory()) {
            String relPath = "$entry.relativePath"
            versions.add(relPath)
        }
    }
    
    if (versions.size() == 0) {
        throw new GradleException('Unable to locate a version for the artifact ' + org + ':' + name + '. Run release task to publish the artifact.')
    }
    return versions.sort()[versions.size()-1]
}

task everythingElseHasBeenReleased {
    dependsOn parent.subprojects.minus(project).release
}

task createGradleBootstrap {
    dependsOn everythingElseHasBeenReleased
    doLast {
        println 'Generating gradle bootstrap'

        def depsList = []
        gradleBndProjects.each { projectName ->
            def bndProject = bndWorkspace.getProject(projectName)
            if (!bndProject.isNoBundles()) {
                String org
                if ('true'.equals(bndProject.get('test.project', bndProject.get('fat.project', 'false')))) {
                    org = 'test'
                } else {
                    org = 'dev'
                }
                for (String bsn : bndProject.getBsns()) {
                    String version = null
                    try {
                        version = getVersionFromReleaseRepo(org, bsn)
                    } catch (GradleException e) {
                        throw e
                    }
                    depsList.add('    compile(\'' + org + ':' + bsn + ':' + version + '\') { transitive = false }')
                    depsList.add('    compile(\'' + org + ':' + bsn + ':' + version + '@pom\') { transitive = false }')
                }
            }
        }

        String org = 'dev'
        Map<String,Properties> featureMap = featureMap()
        featureMap.keySet().each { featureName ->
            def featureProps = featureMap.get(featureName)
            if ('ga'.equals(featureProps.get('kind')) || 'beta'.equals(featureProps.get('kind'))) {
                String featureArtifactId = featureName
                String version = getVersionFromReleaseRepo(org, featureName)
                depsList.add('    compile \'' + org + ':' + featureArtifactId + ':' + version + '@esa\'')
                depsList.add('    compile \'' + org + ':' + featureArtifactId + ':' + version + '@esa.metadata.zip\'')
                depsList.add('    compile \'' + org + ':' + featureArtifactId + ':' + version + '@pom\'')
            }
        }

        if (isAutomatedBuild) {
            depsList.add('    compile \'' + org + ':openliberty-MavenArtifact:' + getVersionFromReleaseRepo('dev', 'openliberty-MavenArtifact') + '@zip\'')
            depsList.add('    compile \'' + org + ':openliberty-singleJson:' + getVersionFromReleaseRepo('dev', 'openliberty-singleJson') + '@json\'')
        }
        depsList.add('    compile \'' + org + ':openliberty-modifiedgaFeatureList:' + getVersionFromReleaseRepo('dev', 'openliberty-modifiedgaFeatureList') + '@txt\'')

        File dependenciesFile = new File(project.buildDir, 'dependencies.gradle')
        dependenciesFile.createNewFile()
        def deps = ""
        def sortedDeps = depsList.sort()
        for(def i=0;i<sortedDeps.size;i++){
          deps+=sortedDeps.get(i)+"\n"
          if(i%100==0){
            deps+="}\ndependencies {"
          }
        }
        dependenciesFile.text = """dependencies {
           ${deps}
        }"""
    }
}

task createESALists {
    dependsOn everythingElseHasBeenReleased
    doLast {
        String features = ""
        gaFeatures(false).each { gaFeature ->
            features += gaFeature + "\n"
        }

        File gaEsa = new File(project.buildDir, 'gaFeatures.txt')
        gaEsa.createNewFile()
        gaEsa.text = features

        features = ""
        betaFeatures().each { betaFeature ->
            features += betaFeature + "\n"
        }

        File betaEsa = new File(project.buildDir, 'betaFeatures.txt')
        betaEsa.createNewFile()
        betaEsa.text = features
    }
}

task createGeneratedReplacementProjects {
    dependsOn everythingElseHasBeenReleased
    doLast {
        File templateDir = new File(projectDir, 'gradle/replacement.project.templates')
        def excludeList = []
        gradleBndProjects.each { projectName ->
            def bndProject = bndWorkspace.getProject(projectName)
            String relativePath = bndProject.getName()
            boolean testProject = 'true'.equals(bndProject.get('test.project', bndProject.get('fat.project', 'false')))
            boolean generateReplacement = 'true'.equals(bndProject.get('generate.replacement', testProject || bndProject.isNoBundles() ? 'false' : 'true'))
            if (!generateReplacement) {
                return
            }
            String org
            if (testProject) {
                org = 'test'
            } else {
                org = 'dev'
            }
            List bsns = bndProject.getBsns()
            int bsnCount = bndProject.isNoBundles() ? 0 : bsns.size()
            String classpathEntries = ""
            if (bsnCount > 0) {
                String suffix = ""
                ArrayList transformedBnds = [bndProject.getFile('transformed.bnd'),bndProject.getFile('transformed10.bnd')]
                List excludeBsns = new ArrayList()
                for (File transformedBnd : transformedBnds) {
                	String excludeBsn = null;
                	if (transformedBnd != null && transformedBnd.exists()) {
                    	Properties p = new Properties();
                    	p.load(new FileInputStream(transformedBnd))
                    	excludeBsn = p.getProperty("Bundle-SymbolicName")
                    	if (excludeBsn != null) {
                        	int index = excludeBsn.indexOf(";")
                        	if (index != -1) {
                            	excludeBsn = excludeBsn.substring(0, index).trim()
                        	}
                    	}
                    	excludeBsns.add(excludeBsn)
                	}
                }

                for (String bsn : bsns) {
                    // Do not include the transformed bsn in the replacement
                    if (excludeBsns.contains(bsn)) {
                        continue;
                    }
                    String artifact = bsn + '.jar'
                    classpathEntries = '<classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>' + suffix + classpathEntries
                    suffix = '\n    '
                }
                if (relativePath.equals('com.ibm.ws.logging')) {
                    classpathEntries = classpathEntries + '\n    <classpathentry combineaccessrules="false" exported="true" kind="src" path="/com.ibm.ws.kernel.boot"/>'
                }
            }
            excludeList.add('dev/' + relativePath + '/')
            File targetDir = new File(buildDir, 'replacements/' + relativePath)
            targetDir.mkdirs()
            copy {
                from templateDir
                into targetDir
                include '*.template'
                rename { String fileName ->
                    fileName.replace('.template', '')
                }
                filter(ReplaceTokens, tokens: [PROJECT_NAME: relativePath, CLASSPATH_ENTRIES: classpathEntries])
            }
        }
        File excludeFile = new File(project.buildDir, 'excludeList.txt')
        excludeFile.createNewFile()
        String text = ""
        excludeList.sort().each { text += it + '\n' }
        excludeFile.text = text
    }
}

def releaserepo = file(bnd.get('releaserepo', 'release')) /* Release repository. */

import aQute.bnd.gradle.Index

task ('index', type: Index) {
    description 'Index the release repository. (Does not depend on releaseNeeded)'
    group 'release'
    repositoryName = "OpenLiberty ${version}"
    destinationDirectory = releaserepo
    gzip = true
    /* Bundles to index. */
    bundles fileTree(destinationDirectory) {
        include '**/*.jar'
        exclude '**/*-latest.jar'
        exclude '**/*-sources.jar'
        exclude '**/*-javadoc.jar'
    }
}

task('createIndex') {
    description 'Index the release repository.'
    group 'release'
    dependsOn copyMavenLibs
    dependsOn everythingElseHasBeenReleased
    finalizedBy index
}

task zipGradleBootstrap(type: Zip) {
    dependsOn createGradleBootstrap
    dependsOn createGeneratedReplacementProjects
    dependsOn createESALists
    dependsOn createIndex
    archiveBaseName = 'gradle-bootstrap'
    into 'prereq.published/build', {
        from new File(project.buildDir, 'dependencies.gradle'),
             new File(project.buildDir, 'gaFeatures.txt'),
             new File(project.buildDir, 'betaFeatures.txt'),
             new File(project.buildDir, 'excludeList.txt')
    }
    from new File(project.buildDir, 'replacements')
    into 'com.ibm.websphere.features.internal.openliberty', {
        from rootProject.fileTree(dir: 'com.ibm.websphere.appserver.features', include: 'visibility/**/*.feature').collect {
            if (!it.isDirectory()) {
                it
            }
        }
    }
    into 'wlp-jakartaee-transform/rules', {
        from rootProject.fileTree(dir: 'wlp-jakartaee-transform/rules')
    }
}

def getBetaVersion() {
    def (year, major, minor, month) = "${bnd.libertyRelease}".tokenize('.')
    int new_month = month.toInteger() + 1
    if (new_month > 12) {
        new_month = 1
        int new_year = year.toInteger() + 1
        return "" + new_year + "." + major + "." + minor + "." + new_month
    }
    return year + "." + major + "." + minor + "." + new_month
}

task libertyReleaseVersions {
  inputs.file('resources/bnd/liberty-release.props')
  outputs.file('build/liberty-versions.props')
  doLast {
    def releaseVersion = bnd.get('libertyRelease') + '-' + rootProject.userProps.getProperty('version.qualifier')
    println 'releaseVersion = ' + releaseVersion
    def libertyBeta = rootProject.userProps.getProperty("betaVersionOverride") == null ? (getBetaVersion() + "-beta") : (rootProject.userProps.getProperty("betaVersionOverride") + "-beta")
    def betaVersion = libertyBeta + "-" + rootProject.userProps.getProperty("version.qualifier")
    def libertyVersionsProps = new Properties()
    libertyVersionsProps.setProperty('libertyBaseVersion', bnd.get('libertyBaseVersion'))
    libertyVersionsProps.setProperty('libertyFixpackVersion', bnd.get('libertyFixpackVersion'))
    libertyVersionsProps.setProperty('libertyServiceVersion', bnd.get('libertyServiceVersion'))
    libertyVersionsProps.setProperty('libertyBetaVersion', bnd.get('libertyBetaVersion'))
    libertyVersionsProps.setProperty('libertyRelease', bnd.get('libertyRelease'))
    libertyVersionsProps.setProperty('libertyBundleMicroVersion', bnd.get('libertyBundleMicroVersion'))
    libertyVersionsProps.setProperty('buildID', bnd.get('buildID'))
    libertyVersionsProps.setProperty('releaseVersion', releaseVersion)
    libertyVersionsProps.setProperty('betaVersion', betaVersion)
    File libertyVersionsPropsFile = file('build/liberty-versions.props')
    libertyVersionsProps.store(libertyVersionsPropsFile.newWriter(), null)
  }
}

publish {
  dependsOn libertyReleaseVersions
}

publishing {
  publications {
    gradle(MavenPublication) {
        artifactId 'gradle-bootstrap'
        version project.version
        artifact zipGradleBootstrap
    }
    libertyVersions(MavenPublication) {
        artifactId 'liberty-versions'
        version project.version
        artifact project.file('build/liberty-versions.props')
    }
  }
}

afterEvaluate {
  publishLibertyVersionsPublicationToMavenRepository.dependsOn libertyReleaseVersions
  if (isUsingArtifactory && isArtifactoryPublishing) {
    publishLibertyVersionsPublicationToMaven2Repository.dependsOn libertyReleaseVersions
  }
}

task printProjectDependencies() {
    doLast {
        def kernelProps = new Properties()
        def kernelFile = rootProject.file('com.ibm.ws.kernel.boot/publish/platform/kernel-1.0.mf')
        def kernelText = kernelFile.getText()
        def startIndex = kernelText.indexOf('Subsystem-Content:')
        startIndex = kernelText.indexOf(':', startIndex)
        def endIndex = kernelText.indexOf('\n', ++startIndex)
        while (endIndex > 0) {
            if (++endIndex == kernelText.length())
                break
            if (kernelText.charAt(endIndex) != ' ')
                break
            endIndex = kernelText.indexOf('\n', endIndex)
        }
        def content = kernelText.substring(startIndex, endIndex)
        content.replaceAll('"[^"]*"', '#').split(',').each { elem ->
            println elem.trim().replaceAll(';.*', '')
        }

        Map dependencyMap = new LinkedHashMap()
        rootProject.fileTree(dir: '.', include: '*/bnd.bnd').each { bndFile ->
            def bndProps = new Properties()
            bndFile.withInputStream { bndProps.load(it) }
            if ('false'.equals(bndProps.get('feature.project', 'false')) && 'false'.equals(bndProps.get('test.project', bndProps.get('fat.project', 'false')))) {
                dependencyMap.put(bndFile.getParentFile().getName(), populateProjectDeps(bndFile, bndProps));
            }
        }
        println 'Size before root project removal: ' + dependencyMap.size()

        List dependencyLevels = new ArrayList()
        Set seenProjects = new TreeSet()
        dependencyMap.each { item, list ->
            boolean isRoot = true
            list.each { bnd ->
                if (!bnd.contains(':')) {
                    isRoot = false
                }
            }
            if (isRoot) {
                seenProjects.add(item)
            }
        }
        List rootProjects = new ArrayList()
        println 'Number of root projects found: ' + seenProjects.size()
        seenProjects.each {
            println it
            dependencyMap.remove(it)
            rootProjects.add(it)
        }
        dependencyLevels.add(0, rootProjects)
        println 'Size after root project removal: ' + dependencyMap.size()
        rootProjects.each { pivot ->
            println pivot
        }
        int level = 0
        while (dependencyMap.size() > 0) {
            level++
            println 'Buildable projects at level: ' + level
            dependencyLevels.add(level, nextPivot(dependencyMap, seenProjects))
            println 'Seen projects size: ' + seenProjects.size()
            println 'Size after buildable project removal: ' + dependencyMap.size()
            dependencyLevels.get(level).each { pivot ->
                println pivot
            }
        }
    }
}

void checkForUpdates(boolean microOnly) {
  def list = ['oss_dependencies.maven', 'oss_source_dependencies.maven']
  def xmlParser = new XmlSlurper()
  int totalArtifacts = 0
  int possibleUpdates = 0
  for (String fileName : list) { 
    file(fileName).eachLine { line ->
      line = line.trim()
      if (line.startsWith('#'))
        return;
      totalArtifacts++
      def (g,a,v) = line.split(':').collect { it.trim() }
      g = g.replace('.','/')
      //println '### g=' + g + '   a=' + a + '  v=' + v
      //println '  checking https://repo.maven.apache.org/maven2/' + g + '/' + a + '/maven-metadata.xml'
      def response = new URL('https://repo.maven.apache.org/maven2/' + g + '/' + a + '/maven-metadata.xml').text
      def mavenMetadata = xmlParser.parseText(response)
      VersionString currentVersion = new VersionString(v)
      VersionString possibleUpdate = currentVersion;
      // Look for a MINOR or MICRO version update (within current MAJOR version)
      mavenMetadata.versioning.versions.version.each { rawVersion ->
        VersionString version = new VersionString(rawVersion.text())
        if (currentVersion.major == version.major && (!microOnly || currentVersion.minor == version.minor) && version.isNewerThan(possibleUpdate)) {
          possibleUpdate = version;
        }
      }
      if (!possibleUpdate.raw.equals(currentVersion.raw)) {
        println(sprintf("%-60s --> %s", line, possibleUpdate.raw))
        possibleUpdates++;
      }
    }
  }
  String types = microOnly ? 'MICRO' : 'MINOR/MICRO'
  println 'Found ' + possibleUpdates + ' possible ' + types + ' version updates out of ' + totalArtifacts + ' total artifacts.'
}

task checkForUpdates() {
  doLast {
    checkForUpdates(false)
  }
}

task checkForMicroUpdates() {
  doLast {
    checkForUpdates(true)
  }
}

task updateArtifact() {
  doLast {
    String mavenCoords = System.getProperty('mavenCoords');
    String toVersion = System.getProperty('toVersion');
     if (mavenCoords == null || System.getProperty('toVersion') == null) {
       throw new InvalidUserDataException('Missing required arguments.\nExample usage:\n' +
         './gradlew cnf:updateArtifact -DmavenCoords=org.apache.commons:commons-lang3:1.0 -DtoVersion=2.0');
     }
     def (group, artifact, version) = mavenCoords.split(':').collect { it.trim() }
     println 'Updating GROUP=' + group + '  ARTIFACT=' + artifact + '  VERSION=' + version + ' --> ' + toVersion
     // Update maven, gradle, and bnd files
     String regex = '((' + group + '[\\.:]' + artifact + '):?;?(version=)?)(' + version + ')'
     println 'Using regex: ' + regex
     rootProject.fileTree(dir: '.', includes: ['**/*.maven', '**/*.gradle', '**/*.bnd', '**/bnd.*']).each{file ->
       ant.replaceregexp(match: regex,
                         replace: '\\1' + toVersion, 
                         file: file, flags: 'g', byline: true)
     }
     // Update BND files
     //rootProject.fileTree(dir: '.', includes: []).each{file ->
     //  ant.replaceregexp(match: group + ':' + artifact + ';' + version, replace: group + ':' + artifact + ';' + toVersion, file: file, flags: 'g', byline: true)
     //  ant.replaceregexp(match: group + ':' + artifact + ';version=' + version, replace: group + ':' + artifact + ';version=' + toVersion, file: file, flags: 'g', byline: true)
    // }
  }
}

class VersionString {

  String raw
  Integer major = 0
  Integer minor = 0
  Integer micro = 0
  String qualifier = ''

  VersionString(String version) {
    raw = version
    def versionParts = version.split('\\.')
    major = parseVersion(versionParts[0])
    if (versionParts.length > 1)
      minor = parseVersion(versionParts[1])
    if (versionParts.length > 2)
      micro = parseVersion(versionParts[2])
    if (versionParts.length > 3)
      qualifier = versionParts[3]
  }

  Integer parseVersion(String versionPart) {
    try {
      return Integer.valueOf(versionPart)
    } catch (NumberFormatException e) {
      return 0;
    }
  }

  boolean isNewerThan(VersionString other) {
    if (major > other.major)
      return true;
    if (major == other.major && minor > other.minor)
      return true;
    if (major == other.major && minor == other.minor && micro > other.micro)
      return true;
    return false;
  }
}

List nextPivot(Map dependencyMap, Set seenProjects) {
    List buildableProjects = new ArrayList()
    dependencyMap.keySet().each { item ->
        List list = dependencyMap.get(item)
        boolean isBuildable = true
        list.each { bnd ->
            if (!bnd.contains(':') && !seenProjects.contains(bnd) && dependencyMap.containsKey(bnd)) {
                isBuildable = false
            }
        }
        if (isBuildable) {
            seenProjects.add(item)
            buildableProjects.add(item)
        }
    }
    println 'Number of buildable projects found: ' + buildableProjects.size()
    buildableProjects.each { item ->
        dependencyMap.remove(item)
    }
    return buildableProjects
}

List populateProjectDeps(File bndFile, Properties bndProps) {
    List dependents = new LinkedList()
    String path = bndProps.get('-buildpath')
    if (path != null)
        return populateProjectDeps(bndFile, path, dependents)
    path = bndProps.get('-dependson')
    if (path != null)
        return populateProjectDeps(bndFile, path, dependents)
    return dependents
}

List populateProjectDeps(File bndFile, String path, List dependents) {
    path = path.replaceAll('"[^"]*"', '#')
    path.split(',').each { pathElem ->
        if (pathElem.indexOf('version=file') == -1)
            dependents.add(pathElem.replaceAll(';.*', '').trim())
    }
    return dependents
}
