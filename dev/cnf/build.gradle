/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

configurations {
    binaries
}

dependencies {
    binaries "com.ibm.ws.componenttest:mantis-collections:2.5.0"
    binaries "com.ibm.ws.componenttest:mantis-nls-standalone:2.5.0"
    binaries "com.ibm.ws.componenttest:infra.buildtasks-core:4.0.0"
    binaries "com.fasterxml.jackson.core:jackson-annotations:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-core:2.2.3"
    binaries "com.fasterxml.jackson.core:jackson-databind:2.2.3"
    binaries "org.osgi:osgi.core:5.0.0"
    binaries "org.apache.aries:org.apache.aries.util:1.1.3"
    binaries "commons-lang:commons-lang:2.4"
    binaries "org.apache.commons:commons-math:2.2"
    binaries "org.eclipse.jdt.core.compiler:ecj:4.3.1"
    binaries "org.ow2.asm:asm-all:5.2"
    binaries "org.jsoup:jsoup:1.7.2"
    binaries "com.ibm.ws.javax.j2ee:servlet:3.1"
    binaries "org.jmockit:jmockit:1.25"
    binaries "biz.aQute.bnd:biz.aQute.bnd:3.5.0"
    binaries "biz.aQute.bnd:biz.aQute.bnd.annotation:3.5.0"
    binaries "biz.aQute.bnd:org.osgi.impl.bundle.repoindex.cli:3.5.0"
}

task copyMavenLibs(type: Copy) {
    from configurations.binaries
    into cnf.file('mavenlibs')
}

void deleteRecursive(File file) {
    if (file.isDirectory()) {
        for (File entry : file.listFiles()) {
            deleteRecursive(entry)
        }
    }
    file.delete()
}

task cleanRepos(type: Delete) {
    doLast {
        deleteRecursive(file('release'))
        delete 'release.mvn'
        deleteRecursive(file('local'))
        delete 'local.mvn'
        delete fileTree('mavenlibs')
    }
}

clean{
    dependsOn cleanRepos
}

task initialize {
    dependsOn cleanRepos
    dependsOn copyMavenLibs
    doLast {
        println "Gradle Initialized"
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.DirectoryScanner
import groovy.util.XmlSlurper

DirectoryScanner.removeDefaultExclude("**/.gitignore")
DirectoryScanner.removeDefaultExclude("**/.gitattributes")

String getVersionFromReleaseRepo(String org, String name) {
    def versions = []
    cnf.project.fileTree(dir: 'release/' + org + '/' + name, include: '**/*.pom').visit { entry ->
        if (entry.isDirectory()) {
            String relPath = "$entry.relativePath"
            versions.add(relPath)
        }
    }
    if (versions.size() != 1) {
        throw new GradleException('Unable to locate a distinct version for the artifact ' + org + ':' + name)
    }
    return versions[0]
}

task everythingElseHasBeenReleased {
    dependsOn parent.subprojects.minus(project).release
}

task createGradleBootstrap {
    dependsOn everythingElseHasBeenReleased
    doLast {
        println 'Generating gradle bootstrap'

        String depsList = ""
        rootProject.fileTree(dir: '.', include: '*').visit { element ->
            if (element.isDirectory()) {
                String relativePath = "$element.relativePath"
                def bndProject = bndWorkspace.getProject(relativePath)
                if (bndProject != null && !bndProject.isNoBundles()) {
                    String org
                    if ('true'.equals(bndProject.get('test.project', 'false'))) {
                        org = 'test'
                    } else {
                        org = 'dev'
                    }
                    for (String bsn : bndProject.getBsns()) {
                        String version = getVersionFromReleaseRepo(org, bsn)
                        depsList = depsList + '    compile \'' + org + ':' + bsn + ':' + version + '\'\n'
                        depsList = depsList + '    compile \'' + org + ':' + bsn + ':' + version + '@pom\'\n'
                    }
                }
            }
        }

        Map<String, String> projectPathToVersion = new HashMap<String, String>()
        rootProject.subprojects.each { p ->
            projectPathToVersion.put(p.name, p.version)
        }

        String org = 'dev'
        rootProject.fileTree(dir: '.', include: '**/*.feature').visit { feature ->
            if (feature.isDirectory()) return

            String text = feature.getFile().getText()
            if (text.contains("kind=ga") || text.contains("kind=beta")) {
                String name = null
                int index = text.indexOf("symbolicName=")
                if (index != -1) {
                    int endIndex = text.indexOf("\n", index)
                    if (endIndex == -1) {
                        endIndex = text.length()
                    }
                    // symbolicName= is length 13
                    name = text.substring(index + 13, endIndex)
                    name = name.replaceAll("\\s+", "")
                } else {
                    name = feature.name.substring(0, feature.name.size() - 8)
                }

                String featureName = feature.name.substring(0, feature.name.size() - 8)
                String rev = projectPathToVersion.get(featureName)
                if (rev != null) {
                    depsList = depsList + '    compile \'' + org + ':' + name + ':' + rev + '@esa\'\n'
                    depsList = depsList + '    compile \'' + org + ':' + name + ':' + rev + '@esa.metadata.zip\'\n'
                }
            }
        }

        File dependenciesFile = new File(project.buildDir, 'dependencies.gradle')
        dependenciesFile.createNewFile()
        dependenciesFile.text = """dependencies {
$depsList}
"""
    }
}

task createGaESAList {
    dependsOn everythingElseHasBeenReleased
    doLast {
        String features = ""
        rootProject.fileTree(dir: '.', include: '*/*.feature').visit { feature ->
            if (feature.isDirectory() || !feature.getFile().getText().contains("kind=ga")) {
                return
            }

            String name = feature.name.substring(0, feature.name.size()-8)
            features += name + "\n"
        }

        File gaEsa = new File(project.buildDir, 'gaFeatures.txt')
        gaEsa.createNewFile()
        gaEsa.text = features
    }
}

task createGeneratedReplacementProjects {
    dependsOn everythingElseHasBeenReleased
    doLast {
        File templateDir = new File(projectDir, 'gradle/replacement.project.templates')
        def excludeList = []
        rootProject.fileTree(dir: '.', include: '*').visit { element ->
            if (!element.isDirectory()) {
                return
            }
            String relativePath = "$element.relativePath"
            def bndProject = bndWorkspace.getProject(relativePath)
            if (bndProject == null) {
                return
            }
            boolean generateReplacement = 'true'.equals(bndProject.get('generate.replacement', 'false'))
            String org
            if ('true'.equals(bndProject.get('test.project', 'false'))) {
                if (!generateReplacement) {
                    return
                }
                org = 'test'
            } else {
                org = 'dev'
            }
            List bsns = bndProject.getBsns()
            int bsnCount = bndProject.isNoBundles() ? 0 : bsns.size()
            if (bsnCount > 0) {
                String classpathEntries = ""
                String suffix = ""
                for (String bsn : bsns) {
                    String version = getVersionFromReleaseRepo(org, bsn)
                    String artifact = bsn + '-' + version + '.jar'
                    classpathEntries = '<classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>' + suffix + classpathEntries
                    suffix = '\n	'
                }
                if (relativePath.equals('com.ibm.ws.logging')) {
                    classpathEntries = classpathEntries + '\n	<classpathentry combineaccessrules="false" exported="true" kind="src" path="/com.ibm.ws.kernel.boot"/>'
                }
                excludeList.add('dev/' + relativePath + '/')
                File targetDir = new File(buildDir, 'replacements/' + relativePath)
                targetDir.mkdirs()
                copy {
                    from templateDir
                    into targetDir
                    include '*.template'
                    rename { String fileName ->
                        fileName.replace('.template', '')
                    }
                    filter(ReplaceTokens, tokens: [PROJECT_NAME: relativePath, CLASSPATH_ENTRIES: classpathEntries])
                }
            }
        }
        File excludeFile = new File(project.buildDir, 'excludeList.txt')
        excludeFile.createNewFile()
        String text = ""
        excludeList.sort().each { text += it + '\n' }
        excludeFile.text = text
    }
}

def releaserepo = file(bnd('releaserepo', 'release')) /* Release repository. */

task ('createIndex') {
    dependsOn copyMavenLibs
    dependsOn everythingElseHasBeenReleased
    description 'Index the release repository.'
    group 'release'

    /* Bundles to index. */
    def bundles = fileTree(releaserepo) {
        include '**/*.jar'
        exclude '**/*-latest.jar'
        exclude '**/*-sources.jar'
        exclude '**/*-javadoc.jar'
    }

    inputs.files { bundles.files }

    /* Index files */
    def index_uncompressed = new File(releaserepo, 'index.xml')
    def index_compressed = new File(releaserepo, 'index.xml.gz')

    outputs.files index_uncompressed, index_compressed

    doLast {
        /* indexer */
        def repoindexJar = project.file('mavenlibs/org.osgi.impl.bundle.repoindex.cli-3.5.0.jar')

        def tmpreleaserepo = cnf.file('tmpreleaserepo')
        deleteRecursive(tmpreleaserepo)

        try {
            copy {
                from releaserepo
                into tmpreleaserepo
                include '**/*.jar'
                exclude '**/*-latest.jar'
                exclude '**/*-sources.jar'
                exclude '**/*-javadoc.jar'
            }

            println 'Generating index of release repo'

            /* index uncompressed. */
            javaexec {
                main = '-jar' // first arg must be the jar
                args repoindexJar
                args '--pretty'
                args '-r', index_uncompressed
                args '-d', tmpreleaserepo
                args '-n', 'bnd'
                args tmpreleaserepo
            }.assertNormalExitValue()
            logger.info 'Generated index {}.', index_uncompressed

            /* index compressed. */
            javaexec {
                main = '-jar' // first arg must be the jar
                args repoindexJar
                args '-r', index_compressed
                args '-d', tmpreleaserepo
                args '-n', 'bnd'
                args tmpreleaserepo
            }.assertNormalExitValue()
            logger.info 'Generated index {}.', index_compressed
        } finally {
            deleteRecursive(tmpreleaserepo)
        }
    }
}

task zipGradleBootstrap(type: Zip) {
    dependsOn createGradleBootstrap
    dependsOn createGeneratedReplacementProjects
    dependsOn createGaESAList
    dependsOn createIndex
    baseName 'gradle-bootstrap'
    into 'prereq.published', { from new File(project.buildDir, 'dependencies.gradle'),
                                    new File(project.buildDir, 'gaFeatures.txt'),
                                    new File(project.buildDir, 'excludeList.txt') }
    from new File(project.buildDir, 'replacements')
}

publishing {
  publications {
    gradle(MavenPublication) {
        artifactId 'gradle-bootstrap'
        version project.version
        artifact zipGradleBootstrap
    }
  }
}
