###############################################################################
# Copyright (c) 2019, 2021 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#CMVCPATHNAME com.ibm.ws.security/resources/com/ibm/ws/security/openidconnect/clients/common/resources/OidcClientMessages.nlsprops
#COMPONENTPREFIX CWWKS
#COMPONENTNAMEFOR WebSphere Application Server OpenID Connect Security
#ISMESSAGEFILE TRUE
#NLS_MESSAGEFORMAT_VAR
#NLS_ENCODING=UNICODE
# -------------------------------------------------------------------------------------------------
# Message prefix block: CWWKS1700 - CWWKS1750
# AND:  CWWKS1520 - CWWKS1599

# BEWARE: Due to code refactoring, some of these messages are also used in the clients.common bundle. Check there too before using or
# altering any of these messages.

#used_by_client_project
OIDC_CLIENT_CONFIG_PROCESSED=CWWKS1700I: OpenID Connect client {0} configuration successfully processed.
OIDC_CLIENT_CONFIG_PROCESSED.explanation=The OpenID Connect client (relying party or resource server) configuration has been successfully processed.
OIDC_CLIENT_CONFIG_PROCESSED.useraction=None

#used_by_client_project
OIDC_CLIENT_CONFIG_MODIFIED=CWWKS1701I: OpenID Connect client {0} configuration change successfully processed.
OIDC_CLIENT_CONFIG_MODIFIED.explanation=The OpenID Connect client (relying party or resource server) configuration has been successfully modified.
OIDC_CLIENT_CONFIG_MODIFIED.useraction=None.

#1702 is used by clients.common bundle, do not use.

# used_by_client_project and clients project IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN THE OTHER BUNDLE!
# social also uses this and it does not have the enforceHTTPS attribute.
#do not translate enforceHTTPS
OIDC_CLIENT_URL_PROTOCOL_NOT_HTTPS=CWWKS1703E: The OpenID Connect client requires SSL (HTTPS) but the OpenID Connect provider URL is HTTP: [{0}]. Update the configuration to use an HTTPS URL, or use the OpenID Connect Client feature and set enforceHTTPS to false. 
OIDC_CLIENT_URL_PROTOCOL_NOT_HTTPS.explanation=The OpenID Connect client (relying party or resource server) requires SSL (HTTPS) but the OpenID Connect provider (OP) URL protocol specified in the OpenID Connect client configuration is not HTTPS.
OIDC_CLIENT_URL_PROTOCOL_NOT_HTTPS.useraction=Do one of the following: First, ensure that the OpenID Connect provider supports SSL. If the OpenID Connector provider does not support SSL, use the OpenID Connect Client feature and set enforceHTTPS to false in the OpenID Connect Client feature configuration.

# unused, but present in both bundles.  IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES
OIDC_CLIENT_RESPONSE_STATE_VERIFY_ERR=CWWKS1704E: The current state [{0}] for the OpenID Connect client [{2}] and the state parameter [{1}] in the response from the OpenID Connect provider do not match.  This condition is not allowed.
OIDC_CLIENT_RESPONSE_STATE_VERIFY_ERR.explanation=The OpenID Connect client (relying party or RP) has sent a request to an OpenID Connect provider (OP) and the OP has sent back a response with a state parameter does not match the state of the RP at the time it was sent. The OP must include in the response the same state as was sent.  The state is used in this manner to prevent cross-site request forgery. 
OIDC_CLIENT_RESPONSE_STATE_VERIFY_ERR.useraction=Ensure that your OP URL is correct. Check the logs on your OP to ensure that it has received the request.

# This is not in use any more, but present in both bundles.  IF YOU CHANGE THIS YOU MUST DUPLICATE IN BOTH BUNDLES
OIDC_CLIENT_MISSING_PRINCIPAL_ERR=CWWKS1705E: The OpenID Connect client [{0}] failed to authenticate the ID token because a subject identifier was not included in the token. 
OIDC_CLIENT_MISSING_PRINCIPAL_ERR.explanation=In order to authenticate an ID token, the OpenID Connect client (relying party or RP) must have a subject identifier. The ID token received in the response from OpenID Connect provider (OP) did not contain a subject identifier, so authentication failed. 
OIDC_CLIENT_MISSING_PRINCIPAL_ERR.useraction=Ensure that the OpenID Connect provider (OP) returns an ID token that includes a subject identifier.

#used_by_client_project and clients project. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_IDTOKEN_VERIFY_ERR=CWWKS1706E: The OpenID Connect client [{1}] failed to validate the ID token due to [{0}].
OIDC_CLIENT_IDTOKEN_VERIFY_ERR.explanation=The OpenID Connect client (relying party or RP) cannot validate the ID token successfully. This might have been caused by a failure in the process of required claims validation. Some of the ID token required claims include issuer, audience, issued time. 
OIDC_CLIENT_IDTOKEN_VERIFY_ERR.useraction=Ensure that OpenID Connect client (RP) system clock is in sync with OpenID Connect provider (OP) system clock (in case they are on two different systems). Also see the user action for the error that appears after this error.

#used_by_client_project and clients projects. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_HTTPS_WITH_SSLCONTEXT_NULL=CWWKS1707E: The OpenID Connect client [{1}] was unable to create an SSL context due to [{0}]. Ensure that your SSL feature is properly configured.
OIDC_CLIENT_HTTPS_WITH_SSLCONTEXT_NULL.explanation=The OpenID Connect client (relying party or resource server) configuration is configured to use the HTTPS scheme, but an HTTPS connection could not be established. The SSL feature may not be enabled. The keyStore element may be missing or incorrectly specified.  
OIDC_CLIENT_HTTPS_WITH_SSLCONTEXT_NULL.useraction=Ensure that you have the correct SSL information in the server.xml. See the user action for the error that appears before this message.

#1708 is used in clients.common bundle. don't use it.

#used_by_client_project, present in clients.common bundle. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OAUTH_REQUEST_ACCESS_DENIED=CWWKS1710E: The OpenID Connect request has been denied by the user, or another error occurred that resulted in denial of the request.
OAUTH_REQUEST_ACCESS_DENIED.explanation=The user has either denied the OpenID Connect request by canceling the request on the scope consent form, or some other error has occurred that has denied access to the OpenID Connect request.
OAUTH_REQUEST_ACCESS_DENIED.useraction=The user must allow the OpenID Connect provider to share the scopes that the client requires in order for the OpenID Connect request to succeed. If the user approved the request, check the logs on the OP for any additional errors.

#used_by_client_project
OAUTH_REQUEST_ACCESS_DENIED_ENDUSER=CWWKS1711E: The request has been denied by the user, or another error occurred that resulted in denial of the request.
OAUTH_REQUEST_ACCESS_DENIED_ENDUSER.explanation=The user has either denied the OpenID Connect request by canceling the request on the scope consent form, or some other error has occurred that has denied access to the OpenID Connect request.
OAUTH_REQUEST_ACCESS_DENIED_ENDUSER.useraction=The user must allow the OpenID Connect provider to share the scopes that the client requires in order for the OpenID Connect request to succeed. If the user approved the request, check the logs on the OP for any additional errors.

# 1712,13,14 are used in the clients.common bundle. Do not use here.

#used_by_client_project
OSGI_SERVICE_ERROR=CWWKS1715E: The OSGi service {0} is not available.
OSGI_SERVICE_ERROR.explanation=The specified OSGi service is not available.
OSGI_SERVICE_ERROR.useraction=Restart the server with the "clean" option.

#used_by_client_project
PROPAGATION_TOKEN_EXPIRED_ERR=CWWKS1716E: The resource server failed the authentication request because the access token which is in the request has expired. The expiration time ("exp") is [{0}] and the current time is [{1}].
PROPAGATION_TOKEN_EXPIRED_ERR.explanation=The access token has expired and the runtime cannot continue with the propagation of the access token.
PROPAGATION_TOKEN_EXPIRED_ERR.useraction=Make sure to provide a valid access token, and also make sure to synchronize the time between the systems.

#used_by_client_project
PROPAGATION_TOKEN_FUTURE_TOKEN_ERR=CWWKS1717E: The resource server failed the authentication request because the access token which is in the request is not valid. The issue at time ("iat") [{0}] is after the current time [{1}] and this condition is not allowed.
PROPAGATION_TOKEN_FUTURE_TOKEN_ERR.explanation=The issue at claim time in the access token is after the current time. This is not allowed.
PROPAGATION_TOKEN_FUTURE_TOKEN_ERR.useraction=Make sure that the access token is not issued for a future time and/or synchronize the time between the systems.

#used_by_client_project
PROPAGATION_TOKEN_MISSING_REQUIRED_CLAIM_ERR=CWWKS1718E: The resource server failed the authentication request because the access token which is in the request does not have the [{0}] claim. The required claims are [{1}].
PROPAGATION_TOKEN_MISSING_REQUIRED_CLAIM_ERR.explanation=The access token does not have all the required claims. 
PROPAGATION_TOKEN_MISSING_REQUIRED_CLAIM_ERR.useraction=Make sure that the provided access token has the required claim.

#used_by_client_project
PROPAGATION_TOKEN_NBF_ERR=CWWKS1719E: The resource server failed the authentication request because the access token which is in the request cannot be used. The not before time ("nbf") [{0}] is after the current time [{1}] and this condition is not allowed.
PROPAGATION_TOKEN_NBF_ERR.explanation=The not before time claim in the access token is after the current time and the runtime cannot use the access token at present.
PROPAGATION_TOKEN_NBF_ERR.useraction=Make sure that the access token does not have a "nbf" claim set to a future time and/or synchronize the time between the systems or resubmit the request at a later time.

#used_by_client_project
PROPAGATION_TOKEN_NOT_ACTIVE=CWWKS1720E: The resource server failed the authentication request because the access token which is in the request is not active. The validation method is [{0}], and the validation endpoint url is [{1}].
PROPAGATION_TOKEN_NOT_ACTIVE.explanation=The provided access token is not active and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_NOT_ACTIVE.useraction=Make sure that the provided access token is valid and if possible check the OpenID Connector provider (OP) logs for more details. Also, make sure that the specified validation method and the endpoint url in the OpenID Connect client configuration are correct.

#used_by_client_project
OIDC_PROPAGATION_FAIL=CWWKS1721E: The resource server received an error [{0}] while it was attempting to validate the access token. It is either expired or cannot be recognized by the validation end point [{1}].
OIDC_PROPAGATION_FAIL.explanation=The provided access token cannot be validated due to the error response from the OpenID Connect provider. 
OIDC_PROPAGATION_FAIL.useraction=Make sure that the propagation token is valid and if possible, check the logs on the OpenID Connect provider for more details on the error.

# 1722 is used in clients.common bundle, do not use here.

#used_by_client_project
PROPAGATION_TOKEN_INVALID_CLIENTID=CWWKS1723E: An invalid_client error occurred while the resource server was attempting to validate the access token using the client id [{0}] and the validation url [{1}].
PROPAGATION_TOKEN_INVALID_CLIENTID.explanation=The provided access token cannot be verified due to the invalid_client error from the OpenID Connect provider and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_INVALID_CLIENTID.useraction=Verify that the OpenID Connect client configuration has the client id that matches with the client id in the OpenID Connect provider configuration and if possible, check the logs on the OpenID Connect provider for more information.

#used_by_client_project
PROPAGATION_TOKEN_ISS_ERROR=CWWKS1724E: The resource server failed the authentication request because the issuerIdentifier [{0}] in the configuration does not contain the "iss" claim [{1}] in the access token.
PROPAGATION_TOKEN_ISS_ERROR.explanation=The provided access token cannot be verified because the "iss" claim in the access token does not match  the issuerIdentifier configuration attribute, and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_ISS_ERROR.useraction=Verify that the OpenID Connect client configuration has the issuerIdentifier that contains the "iss" claim in the access token. 

#used_by_client_project
PROPAGATION_TOKEN_INVALID_VALIDATION_URL=CWWKS1725E: The resource server failed to validate the access token because the validationEndpointUrl [{0}] was either not a valid URL or could not perform the validation.
PROPAGATION_TOKEN_INVALID_VALIDATION_URL.explanation=The provided access token cannot be validated because the validationEndpointUrl specified in the OpenID Connect client configuration is invalid and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_INVALID_VALIDATION_URL.useraction=Make sure to specify a valid value for the validationEndpointUrl attribute in the OpenID Connect client configuration.

#used_by_client_project
PROPAGATION_TOKEN_MISSING_ACCESSTOKEN=CWWKS1726E: The resource server failed the authentication request because the request does not have a required propagation token, such as: an access token or jwt token.
PROPAGATION_TOKEN_MISSING_ACCESSTOKEN.explanation=The request must contain a required propagation token, such as: an access token or jwt token, so the resource server can process the authentication and propagation of the token.
PROPAGATION_TOKEN_MISSING_ACCESSTOKEN.useraction=Make sure that the request has a valid propagation token.

# USED IN CLIENT AND CLIENTS.COMMON BUNDLE. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
PROPAGATION_TOKEN_INTERNAL_ERR=CWWKS1727E: The resource server failed the authentication request because it cannot validate the access token due to an error [{0}]. The validation method is [{1}], and the validation endpoint url is [{2}].
PROPAGATION_TOKEN_INTERNAL_ERR.explanation=The provided access token cannot be validated due to an internal error and the runtime cannot continue with the authentication process. 
PROPAGATION_TOKEN_INTERNAL_ERR.useraction=Check the resource server logs to see if there are any other errors logged prior to this.


# USED IN CLIENT AND CLIENTS.COMMON BUNDLE. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
# PROPAGATION_TOKEN_USERINFO_ISS_ERROR=CWWKS1728E: The resource server failed the authentication request because the issuerIdentifier [{0}] in the configuration does not match the "iss" claim [{1}] in the UserInfo.
# PROPAGATION_TOKEN_USERINFO_ISS_ERROR.explanation=The provided access token cannot be verified because the "iss" claim in the UserInfo does not match the issuerIdentifier configuration attribute, and the runtime cannot continue with the authentication process.
# PROPAGATION_TOKEN_USERINFO_ISS_ERROR.useraction=Verify that the OpenID Connect client configuration has the issuerIdentifier that matches the "iss" claim in the UserInfo.

#unused but present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
PROPAGATION_TOKEN_VALIDATION_MISMATCH=CWWKS1729E: The resource server failed the authentication request because the validation method [{0}] was not appropriate for the validation endpoint URL [{1}].
PROPAGATION_TOKEN_VALIDATION_MISMATCH.explanation=The validationEndpointUrl specified in the OpenID Connect client configuration is not the appropriate endpoint for the specified validationMethod.
PROPAGATION_TOKEN_VALIDATION_MISMATCH.useraction=Update the OpenID Connect client configuration by either changing the validationMethod or the validationEndpointUrl.
 
# 1730 used in clients.common, don't use here.

#unused but present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
PROPAGATION_TOKEN_MISSING_REALM=CWWKS1731E: The resource server failed the authentication request because the access token does not contain the claim [{0}] specified by the [{1}] attribute.
PROPAGATION_TOKEN_MISSING_REALM.explanation=The provided access token does not contain the specified claim to identify the realm and the runtime cannot continue with the authentication process.
PROPAGATION_TOKEN_MISSING_REALM.useraction=Do one of the following. 1)Verify that the OpenID Connect client configuration specifies the realmName attribute 2)Verify that the OpenID Connect provider (OP) emits the access token with the specified claim 3)Verify whether the OP can emit the access token with the "iss" claim. 

# do not translate the quoted "required"
#used_by_client_project
BAD_INBOUND_PRPAGATION_REQUIRED=CWWKS1732E: The OpenID Connect client [{0}] configuration is disabled because the validationEndpointUrl value [{1}]  is not valid and inboundPropagation is "required".
BAD_INBOUND_PRPAGATION_REQUIRED.explanation=The indicated OpenID Connect client has set inboundPropagation to "required" but the configured validationEndpointUrl was not valid. The validationEndpointUrl must be set to a valid URI using the http or https URI scheme. The OpenID Connect client acting as a resource server will not be able to process any requests.
BAD_INBOUND_PRPAGATION_REQUIRED.useraction=Make sure the OpenID Connect client configuration has specified a non-empty validationEndpointUrl that uses the http or https URI scheme.

# do not translate the quoted "supported" and "none"
#used_by_client_project
BAD_INBOUND_PRPAGATION_SUPPORTED=CWWKS1733W: The validationEndpointUrl [{0}] is not valid but the inboundPropagation attribute is set to "supported". To support inbound propagation, a valid validationEndpointUrl must be specified, so the OpenID Connect client [{1}] will behave as if its inboundPropagation value were "none".
BAD_INBOUND_PRPAGATION_SUPPORTED.explanation=The validationEndpointUrl specified in the indicated OpenID Connect client configuration was not valid. A proper validationEndpointUrl is required to support inbound propagation. The validationEndpointUrl value must be non-empty and must use the http or https URI scheme. The OpenID Connect client will behave as if its inboundPropagation were "none".
BAD_INBOUND_PRPAGATION_SUPPORTED.useraction=Make sure the OpenID Connect client configuration has specified a non-empty validationEndpointUrl that uses the http or https URI scheme. 

#1734 used by clients.common bundle, don't use here. 

#present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
PROPAGATION_TOKEN_ISS_CLAIM_NOT_REQUIRED_ERR=CWWKS1735E: The resource server failed the authentication request because the response from the validation end point [{0}] has the [{1}] claim, but the [{2}] attribute is set to true.
PROPAGATION_TOKEN_ISS_CLAIM_NOT_REQUIRED_ERR.explanation=Since the OpenID Connect client configuration specifies "disableIssChecking", the resource server expects the json response from the validation end point to not have the "iss" claim.  
PROPAGATION_TOKEN_ISS_CLAIM_NOT_REQUIRED_ERR.useraction=Do one of the following. 1)Update the OpenID Connect client configuration and set the "disableIssChecking" to "false" 2) Make the validation end point to not emit the "iss" claim.

# Do not translate "JSON Web Token"
#0=Java runtime level, 1=Minimum Java level required by JWT library
#unused but present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_JWT_JDK7=CWWKS1736E: The Java version used by this run time [{0}] is not supported by the JSON Web Token library. The supported Java version is [{1}] or higher.
OIDC_CLIENT_JWT_JDK7.explanation=The open source libraries for processing JSON Web Tokens does not support the Java version that the Liberty server is currently using.
OIDC_CLIENT_JWT_JDK7.useraction=Install a Java version that is at or higher than the Java level shown in the message.

#1737 used in clients.common bundle, do not use here.
#1738 is unused.

#present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
#0=signatureAlgorithm, 1=exception or error message if any
#used_by_client_project and clients project
OIDC_CLIENT_NO_VERIFYING_KEY=CWWKS1739E: A signing key required by signature algorithm [{0}] was not available. {1}
OIDC_CLIENT_NO_VERIFYING_KEY.explanation=A signing key could not be found, or a key that uses the configured signature algorithm could not be found. This could be due to missing, malformed, or inaccurate information in the client configuration or token.
OIDC_CLIENT_NO_VERIFYING_KEY.useraction=Do one of the following actions: 1) If using JWK to sign and validate tokens, ensure the jwkEndpointUrl attribute is configured properly and the JWT and JWK claims are correct. 2) If using X.509 certificates to sign and validate tokens, ensure the signatureAlgorithm, trustStoreRef, and trustStoreAlias attributes are configured properly. 3) If using shared keys to sign and validate tokens, ensure the clientId and clientSecret attributes are configured properly.

#0=More specific error message, 1=clientId
#used_by_client_project
OIDC_CLIENT_BAD_RS_TOKEN=CWWKS1740W: The inbound propagation token for client [{1}] is not valid due to [{0}]. The request will be authenticated using OpenID Connect.
OIDC_CLIENT_BAD_RS_TOKEN.explanation=The token can not be verified for the inbound propagation request. This client will continue to attempt authentication using OpenID Connect.
OIDC_CLIENT_BAD_RS_TOKEN.useraction=If the failure is expected, then no action is required. Otherwise, make sure the inbound propagation environment is properly set up.

# Do not translate "signatureAlgorithm"
#0=OIDC client ID, 1="none"
#used_by_client_project
OIDC_CLIENT_NONE_ALG=CWWKS1741W: The signatureAlgorithm of the OpenID Connect client [{0}] is set to [{1}].
OIDC_CLIENT_NONE_ALG.explanation=Since the signatureAlgorithm is set to "none", a non-signed token is expected, which is not a common use case.
OIDC_CLIENT_NONE_ALG.useraction=If inbound tokens are not expected to be signed, then no action is required. Otherwise, select a supported signatureAlgorithm such as RS256 or HS256.

# present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
# CWWKS1742E
#JWK_RETRIVE_FAILED=CWWKS1742E: Cannot get the Json Web Key(JWK) from the URL [{0}]. Response status [{1}]. Message:[{2}] 



# present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
# do not translate WASOidcCode
# 0: the content of WASOidcCode, 1: client ID
#used_by_client_project and clients project
OIDC_CLIENT_BAD_PARAM_COOKIE=CWWKS1745E: The WASOidcCode cookie [{0}] in the request to the OpenID Connect client [{1}] is not valid. Its value might have been modified.
OIDC_CLIENT_BAD_PARAM_COOKIE.explanation=The OpenID Connect client (relying party or RP) received a WASOidcCode cookie that is not valid. Its value might have been modified.
OIDC_CLIENT_BAD_PARAM_COOKIE.useraction=Verify that the cookie has not been modified and that the decoded content of the cookie begins with a properly formatted JSON object.

#1746, 1747  used in clients.common, do not use here. 

# do not translate GET
# present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_BAD_GET_REQUEST=CWWKS1748E: A GET request to [{0}] is not valid. A response code of 500 is returned.
OIDC_CLIENT_BAD_GET_REQUEST.explanation=A request was received that did not match an expected URL or did not contain the required parameters.
OIDC_CLIENT_BAD_GET_REQUEST.useraction=Verify the OpenID Connect provider configuration. This message can also be caused by snooping with a browser. 

# present in both bundles. IF YOU CHANGE THIS YOU MUST DUPLICATE THE CHANGE IN BOTH BUNDLES.
OIDC_CLIENT_BAD_REQUEST_NO_STATE=CWWKS1749E: A request to [{0}] is not valid. The required state parameter is missing. A response code of 500 is returned.
OIDC_CLIENT_BAD_REQUEST_NO_STATE.explanation=A request was received that did not include a required state parameter.
OIDC_CLIENT_BAD_REQUEST_NO_STATE.useraction=Verify the OpenID Connect provider configuration. This message can also be caused by snooping with a browser.

# STOP HERE, OIDC COMMON HAS RESERVED 1751 - 1799

# do not translate hostname, sameSiteCookie, webAppSecurity, Strict, Lax, None
# used by client
OIDC_CLIENT_BAD_REQUEST_NO_COOKIE=CWWKS1520E: A request to [{0}] is not valid. A required cookie with a name that begins with WASReqURLOidc is missing. The host name that is used to access the client might not match the name that is registered at the provider. A response code of 500 is returned.
OIDC_CLIENT_BAD_REQUEST_NO_COOKIE.explanation=A request was received that did not include a required cookie.
OIDC_CLIENT_BAD_REQUEST_NO_COOKIE.useraction=Verify the OpenID Connect provider and client configurations. The missing cookie can be caused by accessing the client with a host name that differs from the host name of the redirect that is registered with the provider. If the sameSiteCookie attribute in the webAppSecurity element in the server configuration is set to Strict, try setting the value to Lax or None.

OIDC_CLIENT_DISCOVERY_OVERRIDE_EP=CWWKS1521W: The OpenId Connect client (Relying Party or RP) [{2}] configuration specifies both the discovery endpoint URL [{0}] and the other endpoints. RP will use the information from the discovery request and ignore the other configured endpoints [{1}].
OIDC_CLIENT_DISCOVERY_OVERRIDE_EP.explanation=The OpenId Connect client uses the discovery endpoint to contact the provider and uses the information from the discovery request to contact the other endpoints such as authorization and token and userinfo.
OIDC_CLIENT_DISCOVERY_OVERRIDE_EP.useraction=Configure either the discovery endpoint or the other endpoints such as authorization and token and userinfo, not both.

OIDC_CLIENT_DISCOVERY_OVERRIDE_ISSUER=CWWKS1522W: The OpenId Connect client (Relying Party or RP) [{2}] configuration specifies both the discovery endpoint URL [{0}] and the issuer identifier [{1}]. RP will use the information from the discovery request and ignore the configured issuer identifier.
OIDC_CLIENT_DISCOVERY_OVERRIDE_ISSUER.explanation=The OpenId Connect client uses the discovery endpoint to contact the provider and uses the information from the discovery request.
OIDC_CLIENT_DISCOVERY_OVERRIDE_ISSUER.useraction=Configure either the discovery endpoint or the issuer identifier not both.

OIDC_CLIENT_DISCOVERY_OVERRIDE_DEFAULT=CWWKS1523I: The OpenId Connect client (Relying Party or RP) [{3}] configuration specifies [{0}], a default value for the [{1}] and as a result of discovery this is changed to [{2}].
OIDC_CLIENT_DISCOVERY_OVERRIDE_DEFAULT.explanation=If the OpenID Connect provider does not support RP defaults, depending on the capacity of the RP, the defaults can be adjusted to what OP supports.
OIDC_CLIENT_DISCOVERY_OVERRIDE_DEFAULT.useraction=Informational message. No action is required.

OIDC_CLIENT_DISCOVERY_SSL_ERROR=CWWKS1524E: The OpenID Connect client [{0}] failed to obtain Open ID Connect Provider endpoint information through the discovery endpoint URL [{1}]. Update the configuration for the OpenID Connect client with the correct HTTPS discovery endpoint URL. 
OIDC_CLIENT_DISCOVERY_SSL_ERROR.explanation=The OpenID Connect Client is configured to discover the OpenID Connect Provider endpoints through the discovery URL, but the discovery process failed. The OpenID Connect Client will be unable to process the authentication requests until the configuration of the discoveryEndpointURL is corrected or the discovery is successful.
OIDC_CLIENT_DISCOVERY_SSL_ERROR.useraction=Correct the OpenID Connect Client configuration to ensure that 1) the discovery endpoint URL refers to the correct OpenID Connect provider, 2) the discovery endpoint URL is HTTPS and 3) the SSL feature and keystore elements are configured correctly with trust for OpenID Connect Provider. Make sure that the OpenID Connect provider discovery endpoint is functional.

OIDC_CLIENT_DISC_RESPONSE_ERROR=CWWKS1525E: A successful response was not returned from the URL [{0}]. This is the [{1}] response status and the [{2}] error from the discovery request.
OIDC_CLIENT_DISC_RESPONSE_ERROR.explanation=OpenID Connect client failed to access the OpenID Connect provider discovery endpoint and the message may contain more information about the error.
OIDC_CLIENT_DISC_RESPONSE_ERROR.useraction=Ensure that the OpenID Connect provider is available and the specified discovery endpoint is correct.

OIDC_CLIENT_DISCOVERY_COMPLETE=CWWKS1526I: The OpenID Connect client [{0}] configuration has been established with the information from the discovery endpoint URL [{1}]. This information enables the client to interact with the OpenID Connect provider to process the requests such as authorization and token.
OIDC_CLIENT_DISCOVERY_COMPLETE.explanation=The OpenID Connect client contacts the discovery endpoint of the OpenID Connect provider to get the information such as authorizationEndpointUrl, tokenEndpointUrl, userInfoEndpointUrl, jwkEndpointUrl. This information enables the OpenID Connect client to interact with the OpenID Connect provider to send authorization, token, jwk, userinfo requests.
OIDC_CLIENT_DISCOVERY_COMPLETE.useraction=Informational message. No action is required.

OIDC_CLIENT_DISCOVERY_UPDATED_CONFIG=CWWKS1527I: The OpenID Connect client [{0}] configuration has been updated with the new information received from the discovery endpoint URL [{1}].
OIDC_CLIENT_DISCOVERY_UPDATED_CONFIG.explanation=The OpenID Connect client contacts the discovery endpoint of the OpenID Connect provider, 1)if there is a problem contacting the authorization or token endpoints of the OpenID Connect provider 2)if the current time is later than the next discovery time. Next discovery time is calculated by adding the discoveryPollingRate value to the current time after each discovery call.
OIDC_CLIENT_DISCOVERY_UPDATED_CONFIG.useraction=Informational message. No action is required.

OIDC_CLIENT_DISCOVERY_NOT_UPDATED_CONFIG=CWWKS1528I: The OpenID Connect client [{0}] configuration is consistent with the information from the discovery endpoint URL [{1}], so no configuration updates are needed.
OIDC_CLIENT_DISCOVERY_NOT_UPDATED_CONFIG.explanation=The OpenID Connect client contacts the discovery endpoint of the OpenID Connect provider, 1)if there is a problem contacting the authorization or token endpoints of the OpenID Connect provider 2)if the current time is later than the next discovery time. Next discovery time is calculated by adding the discoveryPollingRate value to the current time after each discovery call. If the latest discovery information matches the previous one, then no configuration update takes place.
OIDC_CLIENT_DISCOVERY_NOT_UPDATED_CONFIG.useraction=Informational message. No action is required.

CONFIG_REQUIRED_ATTRIBUTE_NULL=CWWKS1529E: The required [{0}] configuration attribute is missing or empty and a default value is not provided. Verify that the attribute is configured or discovered from the provider, that it is not empty, and that it does not consist of only white space characters.
CONFIG_REQUIRED_ATTRIBUTE_NULL.explanation=The specified configuration attribute might be missing from the server configuration. If a value is specified, white space at the beginning and end of the value is removed when the value is processed, so the value in the configuration might be empty or consist of only white space characters. If the discovery endpoint is specified to get this attribute value from the provider, then the discovery might have a problem.
CONFIG_REQUIRED_ATTRIBUTE_NULL.useraction=Ensure that the specified configuration attribute is configured, that it is not empty, and that it does not consist of only white space characters. If the discovery endpoint is configured to obtain this information, then make sure that there are no errors with the discovery request.

# do not translate authFilterRef
CONFIG_AUTHFILTER_NOTUNIQUE=CWWKS1530W: More than one OpenID Connect client configuration specifies the same authentication filter [{0}]. This can cause indeterminate behavior.
CONFIG_AUTHFILTER_NOTUNIQUE.explanation=More than one OpenID Connect client configuration contains an authFilterRef attribute that refers to the same filter. Any of these clients might process a request that matches the filter, leading to indeterminate behavior.  
CONFIG_AUTHFILTER_NOTUNIQUE.useraction=Review the server.xml file and correct the configuration.

AUTHFILTER_MULTIPLE_MATCHED=CWWKS1531W: More than one OpenID Connect client authentication filter matches a request to [{0}] URL. The matching filters were [{1}]. This can cause indeterminate behavior.
AUTHFILTER_MULTIPLE_MATCHED.explanation=More than one authentication filter matches an inbound request. Any client that uses one of these filters could process the request, leading to indeterminate behavior.  
AUTHFILTER_MULTIPLE_MATCHED.useraction=Review the server.xml file and correct the configuration.

# do not translate hostname, wasReqURLRedirectDomainNames, and webAppSecurity
OIDC_CLIENT_BAD_REQUEST_MALFORMED_URL_IN_COOKIE=CWWKS1532E: A request to [{0}] is not valid. A required cookie with a name that begins with WASReqURLOidc has an incorrect value. The host name [{1}] that is used in the cookie does not match the name that is registered at the provider. A response code of 500 is returned.
OIDC_CLIENT_BAD_REQUEST_MALFORMED_URL_IN_COOKIE.explanation=A request was received that includes a malformed cookie.
OIDC_CLIENT_BAD_REQUEST_MALFORMED_URL_IN_COOKIE.useraction=Verify the OpenID Connect provider and client configurations. The malformed cookie can be caused by cookie modification at the user agent with a host name that differs from the host name of the redirect that is registered with the provider. If the host name is expected, then add it to the wasReqURLRedirectDomainNames attribute of the webAppSecurity element in server.xml.

# STOP HERE, OIDC SERVER HAS RESERVED 1600 - 1649
