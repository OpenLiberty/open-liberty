/*******************************************************************************
 * Copyright (c) 2022 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
apply from: '../com.ibm.ws.security.saml.sso_fat.common/SAMLCommon.gradle'

/* copySamlFat_sp_server will populate files needed by the op to interact with the SAML IDP */
addRequiredLibraries.dependsOn copyApache, copyShibbolethIdpConfig, copyShibbolethServer, copySamlFat_sp_server

repositories {
  if (isUsingArtifactory) {
    maven {
      credentials {
        username userProps.getProperty("artifactory.download.user")
        password userProps.getProperty("artifactory.download.token")
      }
      url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-maven-remote")
    }
  } else {
    mavenCentral()
  }
}

dependencies {
   requiredLibs project(':com.ibm.ws.security.fat.common'),
                project(':com.ibm.ws.security.fat.common.jwt'),
                project(':com.ibm.ws.security.fat.common.social'),
                project(':com.ibm.ws.security.oauth.oidc_fat.common'),
                project(':com.ibm.ws.com.meterware.httpunit.1.7'),
                project(':com.ibm.ws.org.jose4j'),
                project(':com.ibm.json4j'),
                'jtidy:jtidy:4aug2000r7-dev',
                'rhino:js:1.5R4.1' // See NOTE below

  // NOTE: More current js versions have a bug that prevents multiple redirects - this causes
  // a couple of our tests to fail.
                
  /*
   * Previously we had an uber jar named htmlunit-2.20-OSGi.jar. It appears to have contained all of
   * the runtime dependencies for htmlunit. Instead of generating an uber jar, we'll add the dependencies
   * here. The uber jar also was configured to be an OSGi bundle, but it is not necessary for this bucket.
   */ 
  requiredLibs project(':com.ibm.ws.org.apache.commons.io'),        // htmlunit-2.44.0 --> 2.8.0
               project(':com.ibm.ws.org.apache.commons.lang3'),     // htmlunit-2.44.0 --> 3.11
               'net.sourceforge.htmlunit:htmlunit-core-js:2.44.0',
               'net.sourceforge.htmlunit:htmlunit-cssparser:1.6.0',
               'net.sourceforge.htmlunit:neko-htmlunit:2.44.0',
               'org.apache.httpcomponents:httpmime:4.5.12',
               'org.brotli:dec:0.1.2',
               'xalan:xalan:2.7.2',
               project(':io.openliberty.org.apache.xercesImpl'),
               'httpunit:httpunit:1.7',
               'xml-apis:xml-apis:1.4.01'
}

addRequiredLibraries.dependsOn addJakartaTransformer

/*
 * This is where all application ZIP and WARs will be built.
 */
def appBuildDir = "${buildDir}/test-application"

/******************************************************************
 ******************************************************************
 **
 ** backchannelLogoutTestApp.zip
 **
 ******************************************************************
 ******************************************************************/
task backchannelLogoutTestApp_ZIP (type: Zip, dependsOn: classes) {
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'backchannelLogoutTestApp.zip'

  from (new File(projectDir, 'test-applications/backchannelLogoutTestApp/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp', '*.html'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'com/ibm/ws/security/fat/backChannelLogoutTestApps/BackChannelLogout_logoutToken_Servlet.class'
    include 'com/ibm/ws/security/fat/backChannelLogoutTestApps/BackChannelLogout_Sleep_Servlet.class'
    include 'com/ibm/ws/security/fat/backChannelLogoutTestApps/BackChannelLogout_400_Servlet.class'
    include 'com/ibm/ws/security/fat/backChannelLogoutTestApps/BackChannelLogout_501_Servlet.class'
    include 'com/ibm/ws/security/fat/backChannelLogoutTestApps/BackChannelLogout_logMsg_Servlet.class'
    include 'com/ibm/ws/security/fat/backChannelLogoutTestApps/BackChannelLogout_logJSessionId_Servlet.class'
    include 'com/ibm/ws/security/fat/backChannelLogoutTestApps/utils/BackChannelLogout_utils.class'
    into 'WEB-INF/classes'
  }
}

/******************************************************************
 ******************************************************************
 **
 ** simpleLogoutTestApp.zip
 **
 ******************************************************************
 ******************************************************************/
task simpleLogoutTestApp_ZIP (type: Zip, dependsOn: classes) {
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'simpleLogoutTestApp.zip'

  from (new File(projectDir, 'test-applications/simpleLogoutTestApp/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp', '*.html'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'com/ibm/ws/security/fat/simpleLogoutTestApps/SimpleLogout_Servlet.class'
    into 'WEB-INF/classes'
  }
}
/******************************************************************
 ******************************************************************
 **
 ** Copy feature bundles and applications to specific servers.
 **
 ******************************************************************
 ******************************************************************/
autoFVT.dependsOn ':com.ibm.ws.security.fat.common:assemble'
autoFVT.dependsOn ':com.ibm.ws.security.fat.common.jwt:assemble'
autoFVT.dependsOn ':com.ibm.ws.security.fat.common.social:assemble'
autoFVT.dependsOn ':com.ibm.ws.security.oauth.oidc_fat.common:assemble'
assemble.dependsOn backchannelLogoutTestApp_ZIP
assemble.dependsOn simpleLogoutTestApp_ZIP

autoFVT.doLast {

  /*
   * Copy the local ApacheDS LDAP instances. 
   */
   /*
  copy {
    from project(':com.ibm.ws.org.apache.directory.server').projectDir
    into autoFvtDir
    include 'apacheds-2.0.0-M15/**'
  }
 */
  
  /*
   * Copy common artifacts to test servers.
   */
  def servers = [
    'com.ibm.ws.security.backchannelLogout_fat.op',
    'com.ibm.ws.security.backchannelLogout_fat.op.saml',
    'com.ibm.ws.security.backchannelLogout_fat.rp',
    'com.ibm.ws.security.backchannelLogout_fat.rp.2',
    'com.ibm.ws.security.backchannelLogout_fat.social',
    'com.ibm.ws.security.backchannelLogout_fat.social.2'
  ]
  servers.each { server ->
    copy { 
      from new File(projectDir, 'publish/files/serversettings/')
      into new File(autoFvtDir, 'publish/servers/' + server + '/imports')
      include '*.xml'
    }
    
    copy { 
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
    }

  	/* copy shared key/trust stores from the common security fat project */
    copy { 
     from project(':com.ibm.ws.security.fat.common').file('publish/shared/securityKeys')
     into new File(autoFvtDir, 'publish/servers/' + server + '/')
     include 'allAlgKeyStore.p12'
     include 'allAlgTrustStore.p12'
    }
    
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').projectDir, "/securitykeys")
      into new File(autoFvtDir, 'publish/servers/' + server)
      include 'commonBasicKeyStore.jks'
      include 'commonTrustStore.jks'
      include 'commonBadTrustStore.jks'
    }
    copy {
      from project(':com.ibm.ws.security.fat.common.jwt').file('publish/shared/config')
      into new File(autoFvtDir, 'publish/servers/' + server+ '/imports')
      include 'signEncryptSSLSettings.xml'
    }
    
  }
  
  servers = [
    'com.ibm.ws.security.backchannelLogout_fat.op',
    'com.ibm.ws.security.backchannelLogout_fat.op.saml'
  ]
  servers.each { server ->
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').projectDir, 'publish/files/serversettings/')
      into new File(autoFvtDir, 'publish/servers/' + server + '/imports')
      include 'op_fatTestPorts.xml'
    }  
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/oauthclient.zip')
      into new File(autoFvtDir, 'publish/servers/' + server + '/dropins')
      rename 'oauthclient.zip', 'oauthclient.war'
    }
    copy {
      from new File(appBuildDir, 'simpleLogoutTestApp.zip')
      into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
      rename 'simpleLogoutTestApp.zip', 'simpleLogoutTestApp.war'
    }

  }


  servers = [
    'com.ibm.ws.security.backchannelLogout_fat.op.saml'
  ]
  servers.each { server ->
     copy { 
     from project(':com.ibm.ws.security.saml.sso_fat.common').file('securityKeys')
     into new File(autoFvtDir, 'publish/servers/' + server + '/')
     include 'samlKey.jks'
    }
     copy {
      from new File(projectDir, 'publish/files/serversettings/localhost')
      into new File(autoFvtDir, 'publish/servers/' + server + '/imports/localhost')
      include '*.xml.orig'
    }  
 
  /* The oidc saml configs use their own certs, so, we need our own copy of the metadata using those certs */
  /*
    copy {
      from new File(projectDir, 'publish/files/serversettings/localhost')
      into new File(autoFvtDir, 'publish/servers/' + server + '/imports/localhost')
      include '*.xml.orig'
    }  

*/
  }
  /* The oidc saml configs use their own certs, so, we need our own copy of the metadata using those certs */
  /*
    copy {
      from new File(projectDir, 'publish/files/serversettings/shibboleth')
      into new File(autoFvtDir, 'shibboleth-idp/3.3.1/metadata/')
      include '*.xml.orig'
    }  
    copy {
      from new File(projectDir, 'publish/files/serversettings/shibboleth')
      into new File(autoFvtDir, 'shibboleth-idp/4.1.0/metadata/')
      include '*.xml.orig'
    }  
*/
  
  /*
   * Copy formlogin application to designated test servers.
   */
  servers = [
    'com.ibm.ws.security.backchannelLogout_fat.rp',
    'com.ibm.ws.security.backchannelLogout_fat.rp.2',
    'com.ibm.ws.security.backchannelLogout_fat.social',
    'com.ibm.ws.security.backchannelLogout_fat.social.2'
  ]
  servers.each { server ->
    copy {
      from project(':com.ibm.ws.security.fat.common.jwt').file('publish/shared/securityKeys')
      into new File(autoFvtDir, 'publish/servers/' + server + '/')
      include '*.pem'
    }
    
    copy {
      from new File(appBuildDir, 'backchannelLogoutTestApp.zip')
      into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
      rename 'backchannelLogoutTestApp.zip', 'backchannelLogoutTestApp.war'
    }
     
    copy {
      from new File(appBuildDir, 'simpleLogoutTestApp.zip')
      into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
      rename 'simpleLogoutTestApp.zip', 'simpleLogoutTestApp.war'
    }
     
  }
 
  servers = [
    'com.ibm.ws.security.backchannelLogout_fat.rp',
    'com.ibm.ws.security.backchannelLogout_fat.rp.2'

  ]
  servers.each { server ->
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').buildDir, 'test-application/formlogin.zip')
      into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
      rename 'formlogin.zip', 'formlogin.war'
    }
  }
       
  servers = [
    'com.ibm.ws.security.backchannelLogout_fat.social',
    'com.ibm.ws.security.backchannelLogout_fat.social.2'
  ]
  servers.each { server ->
    copy {
      from new File(project(":com.ibm.ws.security.fat.common.social").buildDir, "test-application/formlogin.war")
      into new File(autoFvtDir, 'publish/servers/' + server + '/test-apps')
    }
 
   } 
        
  /*
   * Copy some other testing artifacts to the root autofvt directory.
   */
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').projectDir, "/securitykeys")
      into new File(autoFvtDir, 'securitykeys')
      include 'commonSslClientDefault.jks'
    }
    copy {
      from new File(project(':com.ibm.ws.security.oauth.oidc_fat.common').projectDir, 'testFiles')
      into new File(autoFvtDir, 'testFiles')
      include '**'
    }
      
}
