<server>
    <featureManager>
        <feature>servlet-3.1</feature>
        <feature>batch-1.0</feature>
        <feature>jsonp-1.0</feature>
        <feature>appSecurity-2.0</feature>
    </featureManager>

    <include location="../fatTestPorts.xml"/>
    
     <!-- batch container persistence config -->
    <batchPersistence jobStoreRef="BatchDatabaseStore" />
    <databaseStore id="BatchDatabaseStore" dataSourceRef="batchDB" schema="JBATCH" tablePrefix="" />

    <library id="DerbyLib">
	    <file name="${shared.resource.dir}/derby/derby.jar"/>
	</library>

    <dataSource id="batchDB" jndiName="jdbc/batch">
        <jdbcDriver libraryRef="DerbyLib" />
        <!-- The following configures in-memory Derby.  For Derby on disk, which is needed if the database
       	is required beyond a single server start, configure the databaseName with a file location such as:
       	databaseName="${shared.config.dir}/data/derbydb" -->
        <properties.derby.embedded databaseName="memory:RUNTIMEDB"
            createDatabase="create" user="user" password="pass" />
    </dataSource>
	
	<!-- ssl keystore to enable SSL port for batch rest connector -->
    <keyStore id="defaultKeyStore" location="${server.config.dir}/resources/security/key.p12" type="PKCS12" password="{xor}EzY9Oi0rJg==" />

    <basicRegistry id="basic" realm="basic">
        <user name="user1" password="pass1" />
        <user name="user2" password="pass2" />
    </basicRegistry>
    
    <authorization-roles id="com.ibm.ws.batch">
		<security-role name="batchSubmitter">
            <special-subject type="EVERYONE" />
		</security-role>
	</authorization-roles>

	<javaPermission className="java.security.AllPermission" codebase="${shared.resource.dir}/derby/derby.jar"/>
  	<javaPermission className="javax.security.auth.AuthPermission" name="wssecurity.getRunAsSubject"/>
  	<javaPermission className="javax.security.auth.AuthPermission" name="doAs"/>
  	<javaPermission className="javax.security.auth.PrivateCredentialPermission"  name='* * "*"' actions="read" />
    <javaPermission className="javax.security.auth.PrivateCredentialPermission" 
    			    signedBy="java.util.HashMap" principalType="*" principalName="*" actions="read"/>
	
</server>
