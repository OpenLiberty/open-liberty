/*******************************************************************************
 * Copyright (c) 2019 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

pluginManagement {
  /**
   * Load properties before initializing in order to use credentials to configure repositories.
   */
  File usrHomeProps = file(System.properties['user.home'] + '/gradle.startup.properties')
  if (System.properties['build.properties.path'] != null) {
    usrHomeProps = file(System.properties['build.properties.path'])
  }

  Properties props = new Properties()
  if (usrHomeProps.exists()) {
    usrHomeProps.withInputStream { props.load(it) }
  }

  def isUsingArtifactory = false

  def fetchRepoPublic = ('aQute.bnd.repository.maven.provider.MavenBndRepository;'+
          'name = RemotePublic;'+
          'releaseUrl=https://repo.maven.apache.org/maven2/'+
          ';index=${build}/oss_dependencies.maven')

  def fetchRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository'+
          ';name = RemoteIBM'+
          ';local=~/.ibmdhe/repository'+
          ';releaseUrl=http://public.dhe.ibm.com/ibmdl/export/pub/software/olrepo/'+
          ';index=${build}/oss_ibm.maven')

  // Not yet supported to not have this set via gradle.startup.properties
  def fetchRepoIBMJava = ('aQute.bnd.repository.maven.provider.MavenBndRepository'
          +';name = DummyRepo')

  def pushRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository'+
          ';name = RemotePublish')

  if (usrHomeProps.exists() && !props.getProperty('artifactory.force.external.repo')) {
    if (props.getProperty('artifactory.download.server') != null) {
      // This is to support more controlled dependency management if we are able to access particular internal systems.
      isUsingArtifactory = true
      def repoURL = ('https://' + props.getProperty('artifactory.download.server') + '/artifactory/wasliberty-open-liberty')
      fetchRepoPublic = ('aQute.bnd.repository.maven.provider.MavenBndRepository'+
              ';name = RemotePublic'+
              ';local=~/.ibmartifactory/repository'+
              ';releaseUrl=' + repoURL +
              ';snapshotUrl=' + repoURL +
              ';index=${build}/oss_dependencies.maven')

      fetchRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository'+
              ';name = RemoteIBM'+
              ';local=~/.ibmartifactory/repository'+
              ';releaseUrl=' + repoURL +
              ';snapshotUrl=' + repoURL +
              ';index=${build}/oss_ibm.maven')

      fetchRepoIBMJava = ('aQute.bnd.repository.maven.provider.MavenBndRepository'+
              ';local=~/.ibmjava/repository'+
              ';name = IBMInternalJava'+
              ';releaseUrl=' + repoURL +
              ';snapshotUrl=' + repoURL +
              ';index=${build}/ibm_java.maven')
    }
    if (props.getProperty('artifactory.upload.server') != null) {
      def uploadRepoURL = ('https://' + props.getProperty('artifactory.upload.server') + '/artifactory/wasliberty-open-liberty')
      pushRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository'+
              ';name = RemotePublish'+
              ';releaseUrl=' + uploadRepoURL +
              ';snapshotUrl=' + uploadRepoURL +
              ';index=${build}/openliberty.maven')
    }
  }

  props.setProperty('is.using.artifactory',      isUsingArtifactory.toString())
  props.setProperty('fetch.oss.repository',      fetchRepoPublic)
  props.setProperty('fetch.oss.ibm.repository',  fetchRepoIBM)
  props.setProperty('fetch.ibm.java.repository', fetchRepoIBMJava)
  props.setProperty('push.ibm.repository',       pushRepoIBM)
  gradle.ext.userProps = props

  repositories {
    /**
     * Prefer a configured Artifactory over plugins.gradle.org.
     * Do not fall back to plugins.gradle.org when there are Artifactory outages.
     */
    if ('true'.equalsIgnoreCase(gradle.userProps.getProperty('is.using.artifactory'))) {
      maven {
          credentials {
              username gradle.userProps.getProperty("artifactory.download.user")
              password gradle.userProps.getProperty("artifactory.download.token")
          }
          url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
      }
    } else {
      maven {
        url "https://plugins.gradle.org/m2/"
      }
    }
  }
}

// Require Java 11
if (!JavaVersion.current().isJava11Compatible()) {
  println "WARNING: Building this repository will soon require Java 11. To use Java 11 follow these steps:\n" + 
                            "  1) You can download a copy for your OS here if you don't already have it: " + 
                            "https://adoptopenjdk.net/index.html?variant=openjdk11&jvmVariant=openj9\n" + 
                            "  2) run 'export JAVA_HOME=/path/to/your/java11' in the shell, or set in ~/.bashrc\n" + 
                            "  3) [MACOS ONLY] Set 'ulimit -Sn 1024' in your ~/.bashrc\n" + 
                            "  4) Restart your gradle daemon with './gradlew --stop'\n";
}

apply from: 'wlp-gradle/propertiesSettings.gradle'
apply from: 'wlp-gradle/bndSettings.gradle'
apply from: 'wlp-gradle/buildCacheSettings.gradle'
