/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
/*
 * Master Gradle initialization script
 *
 * Depends on bnd_* values from gradle.properties.
 */

/* Construct a properties file to store build-time variables. generated.properties is used to pass information from
 * Gradle during initialization into bnd during configuration for use in cnf/build.bnd.
 */
buildscript {
  
  Properties props = new Properties()

  // Properties for automated-build relevant tasks. These assignments below are defaults for when building locally
  def isAutomatedBuild = false
  def isContinuousBuild = false
  def isRelease = false
  def isPublicPublishing = false

  def isRemotePublishing = false
  if (System.properties['is.remote.publishing']!=null) {
    isRemotePublishing = System.properties['is.remote.publishing'];
  }

  // Does userhome Gradle startup properties exist?
  File usrHomeProps = file(System.properties['user.home'] + '/gradle.startup.properties')
  if (!usrHomeProps.exists()) {
    if (System.properties['build.properties.path']!=null) {
      usrHomeProps = file(System.properties['build.properties.path']);
    }
  }

  if (usrHomeProps.exists()) {
    usrHomeProps.withInputStream { props.load(it) }
  }

  // Retain properties from prior builds; used in automated build publishing
  //TODO: need a better mechanism for 'stowaway properties' that need to be used in future gradle invocations
  File genPropsFile = file('generated.properties')
  if (genPropsFile.exists()) {
    Properties genProps = new Properties()
    genPropsFile.withInputStream { genProps.load(it) }
    if (genProps['tests.total.failed'] != null) {
      props.setProperty('tests.total.failed', genProps['tests.total.failed'])
    }

    if (genProps['tests.total.successful'] != null) {
      props.setProperty('tests.total.successful', genProps['tests.total.successful'])
    }

    if (genProps['zipopenliberty.archivename'] != null) {
      props.setProperty('zipopenliberty.archivename', genProps['zipopenliberty.archivename'])
    }
  }
  
  def fetchRepoPublic = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublic;releaseUrl=https://repo.maven.apache.org/maven2/;index=${build}/oss_dependencies.maven')
  def fetchRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemoteIBM;local=~/.ibmdhe/repository;releaseUrl=http://public.dhe.ibm.com/ibmdl/export/pub/software/olrepo/;index=${build}/oss_ibm.maven')
  def fetchRepoIBMJava = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = DummyRepo') //Not yet supported to not have this set via gradle.startup.properties
  def pushRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublish')

  def javaHome = org.gradle.internal.jvm.Jvm.current().getJavaHome()
  props.setProperty('java.home', javaHome.getAbsolutePath())

  //scrape java.home JARs in jre/lib
  FileTree jdkLibs = fileTree(System.properties['java.home'])

  //bin is needed for IBM JDKs
  jdkLibs.include 'bin/default/**/vm.jar'
  jdkLibs.include 'lib/**/default/**/vm.jar'
  jdkLibs.include 'lib/*.jar'
  jdkLibs.exclude 'lib/ibmcfw.jar' //has com.ibm.nws.ejs.ras.Tr, which we don't want

  def jdkLibString = ""
  Boolean isFirstPass = true;
  
  jdkLibs.each { File file ->
    if (isFirstPass) {
      jdkLibString = jdkLibString + file + ";version=file;boot=true"
    } else {
      jdkLibString = jdkLibString + ", " + file + ";version=file;boot=true"
    }
    isFirstPass = false
  }

  props.setProperty('javac.bootclasspath.1.4', jdkLibString)
  props.setProperty('javac.bootclasspath.1.6', jdkLibString)
  props.setProperty('javac.bootclasspath.1.7', jdkLibString)
  props.setProperty('javac.bootclasspath.1.8', jdkLibString)

  // Property for Artifactory matrix parameters
  def branch = ""
  def proc = "git rev-parse --abbrev-ref HEAD".execute()
  proc.in.eachLine { line -> branch = line }
  proc.err.eachLine { line -> println line }
  proc.waitFor()
  branch

  def branchName = branch
  def matrixParams = ";GIT_BRANCH=master;GIT_FEATURE_BRANCH=${branchName}"

  def artifactoryExists = false
  if (usrHomeProps.exists() && !props.getProperty('artifactory.force.external.repo')) {
    //Some functionality is added if we are able to access particular internal systems.
    //This is to support more controlled dependency management, and multiple JDK paths for cross-compilation
    artifactoryExists = true
    def repoURL = ('https://' + props.getProperty('artifactory.download.server') + '/artifactory/wasliberty-open-liberty')
    def uploadRepoURL = ('https://' + props.getProperty('artifactory.upload.server') + '/artifactory/wasliberty-open-liberty')
    fetchRepoPublic = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublic;local=~/.ibmartifactory/repository;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/oss_dependencies.maven')
    fetchRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemoteIBM;local=~/.ibmartifactory/repository;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/oss_ibm.maven')
    fetchRepoIBMJava = ('aQute.bnd.repository.maven.provider.MavenBndRepository;local=~/.ibmjava/repository;name = IBMInternalJava;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/ibm_java.maven')
    pushRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublish;releaseUrl='+ uploadRepoURL + matrixParams + ';snapshotUrl='+ uploadRepoURL + matrixParams + ';index=${build}/openliberty.maven')

    isAutomatedBuild = (props.getProperty("buildResultUUID") != null)

    if (props.getProperty('is.continuous.build') != null) {
      isContinuousBuild = 'on'.equalsIgnoreCase(props.getProperty('is.continuous.build')) || 'true'.equalsIgnoreCase(props.getProperty('is.continuous.build'))
    }

    if (props.getProperty('is.release') != null) {
      isRelease = 'on'.equalsIgnoreCase(props.getProperty('is.release')) || 'true'.equalsIgnoreCase(props.getProperty('is.release'))
    }

    if (props.getProperty('is.public.publishing') != null) {
      isPublicPublishing = 'on'.equalsIgnoreCase(props.getProperty('is.public.publishing')) || 'true'.equalsIgnoreCase(props.getProperty('is.public.publishing'))
    }

    props.setProperty('javac.bootclasspath.1.4', '${internaljavac.bootclasspath.1.4}')
    props.setProperty('javac.bootclasspath.1.6', '${internaljavac.bootclasspath.1.6}')
    props.setProperty('javac.bootclasspath.1.7', '${internaljavac.bootclasspath.1.7}')
    props.setProperty('javac.bootclasspath.1.8', '${internaljavac.bootclasspath.1.8}')
  }

  // Must be run after isRelease is set
  def timestamp = new SimpleDateFormat("yyyyMMddHHmm").format(new java.util.Date())
  def qualifier = timestamp
  
  //For release builds we can use a consistent qualifier of the build label.
  //This comes from the RTC build engines
  if (isRelease && (props.getProperty('buildLabel') != null)) {
    qualifier = props.getProperty('buildLabel')
  }
  
  props.setProperty('version.qualifier', qualifier)
  props.setProperty('buildLabel', timestamp)
  props.setProperty('artifactory.matrix.parameters', matrixParams)
  props.setProperty('fetch.oss.repository', fetchRepoPublic)
  props.setProperty('fetch.oss.ibm.repository', fetchRepoIBM)
  props.setProperty('fetch.ibm.java.repository', fetchRepoIBMJava)
  props.setProperty('push.ibm.repository', pushRepoIBM)
  props.setProperty('is.automated.build', isAutomatedBuild.toString())
  props.setProperty('is.continuous.build', isContinuousBuild.toString())
  props.setProperty('is.release', isRelease.toString())
  props.setProperty('maven.release.name', "release")
  props.setProperty('is.remote.publishing', isRemotePublishing.toString())
  props.setProperty('is.public.publishing', isPublicPublishing.toString())

  gradle.ext.bndWorkspaceConfigure = { workspace ->
    props.each { prop ->
      workspace.setProperty(prop.key, prop.value.toString())
    }
  }

  // Store props to file for bnd to use. Imported by cnf/build.bnd and props files in cnf/resources/bnd
  File propsFile = new File('generated.properties')
  props.store(propsFile.newWriter(), null)


  // Set extra properties extension
  gradle.rootProject { rootProject ->
    rootProject.ext.qualifier = props.getProperty("version.qualifier")
    rootProject.ext.matrixParams = props.getProperty("artifactory.matrix.parameters")
    rootProject.ext.isAutomatedBuild = 'on'.equalsIgnoreCase(props.getProperty("is.automated.build")) || 'true'.equalsIgnoreCase(props.getProperty("is.automated.build"))
    rootProject.ext.isContinuousBuild = 'on'.equalsIgnoreCase(props.getProperty("is.continuous.build")) || 'true'.equalsIgnoreCase(props.getProperty("is.continuous.build"))
    rootProject.ext.isRelease = 'on'.equalsIgnoreCase(props.getProperty('is.release')) || 'true'.equalsIgnoreCase(props.getProperty('is.release'))
    rootProject.ext.artifactoryExists = artifactoryExists
    rootProject.ext.isRemotePublishing = 'on'.equalsIgnoreCase(props.getProperty('is.remote.publishing')) || 'true'.equalsIgnoreCase(props.getProperty('is.remote.publishing'))
    rootProject.ext.isPublicPublishing = 'on'.equalsIgnoreCase(props.getProperty('is.public.publishing')) || 'true'.equalsIgnoreCase(props.getProperty('is.public.publishing'))
    rootProject.ext.releaseVersionOverride = props.getProperty('release.version.override')
    rootProject.ext.usrHomeProps = usrHomeProps
    rootProject.ext.generatedProps = props

    // Test results for this run
    rootProject.ext.testCountTotal = 0
    rootProject.ext.successfulTestCountTotal = 0
    rootProject.ext.failedTestCountTotal = 0
    rootProject.ext.skippedTestCountTotal = 0
  }

 
 repositories {
  if ((props.getProperty("artifactory.download.server") != null) && !props.getProperty('artifactory.force.external.repo')) {
      maven {
           credentials {
               username props.getProperty("artifactory.download.user")
               password props.getProperty("artifactory.download.token")
           }
      url ("https://" + props.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
      }
   } else {
        maven { url uri(bnd_repourl) }
   }
  }

  dependencies {
    classpath bnd_plugin
  }

  /* Since the files in the repository change with each build, we need to recheck for changes */
  configurations.classpath {
    resolutionStrategy {
      cacheChangingModulesFor 30, 'minutes'
      cacheDynamicVersionsFor 30, 'minutes'
    }
  }

  dependencies {
    components {
      all { ComponentMetadataDetails details ->
        details.changing = true
      }
    }
  }

  /* Add bnd gradle plugin to buildscript classpath of rootProject */
  def bndPlugin = files(configurations.classpath.files)
  gradle.projectsLoaded { gradle ->
    gradle.rootProject.buildscript {
      dependencies {
        classpath bndPlugin
      }
    }
  }

}



private boolean parseBoolean(String value) {
  return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}


/* Add bnd gradle plugin as a script dependency */



/* Initialize the bnd workspace */
import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants

import java.text.SimpleDateFormat

Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
Workspace workspace = new Workspace(rootDir, bnd_cnf).setOffline(startParameter.offline)
gradle.bndWorkspaceConfigure(workspace)

/* Add cnf project to the graph */
include bnd_cnf

/* Start with the declared build project name */
def defaultProjectName = bnd_build

/* If in a subproject, use the subproject name */
for (def currentDir = startParameter.currentDir; currentDir != rootDir; currentDir = currentDir.parentFile) {
  defaultProjectName = currentDir.name
}

/* Build a set of project names we need to include from the specified tasks */
def projectNames = startParameter.taskNames.collect { taskName ->
  def elements = taskName.split(':')
  switch (elements.length) {
    case 1:
      return defaultProjectName
    case 2:
      return elements[0].empty ? bnd_build : elements[0]
    default:
      return elements[0].empty ? elements[1] : elements[0]
  }
}.toSet()

/* Include the default project name if in a subproject or no tasks specified */
if ((startParameter.currentDir != rootDir) || projectNames.empty) {
  projectNames.add(defaultProjectName)
}

/* If bnd_build used but declared empty, add all non-private folders of rootDir */
def addAll = projectNames.remove('')
if (addAll) {
  println 'Preparing all bnd projects in the workspace (this can take a while)'
}

def allBndProjects = workspace.getAllProjects().collect { project ->
  if (!project.name.startsWith('.')) {
    if (addAll) {
      project.prepare()
      include project.name
    }
    return project.name
  } else {
    return ''
  }
}.toSet()
allBndProjects.remove('')
if (addAll) {
  println 'All bnd projects in the workspace have been prepared'
}

/* Add our common build/tool projects */
projectNames.add('build.image')
projectNames.add('wlp-bndPlugins')
projectNames.add('wlp-rasInstrumentation')

/* Add each project and its dependencies to the graph */
projectNames.each { projectName ->
  if (allBndProjects.contains(projectName)) {
    include projectName
    workspace.getProject(projectName).getDependson()*.getName().each {
      include it
    }
  } else if (new File(rootDir, projectName + '/springboot.gradle').exists()) {
    include projectName
  }
}

/* Pass workspace to root project */
gradle.projectsLoaded { gradle ->
  gradle.rootProject.ext.bndWorkspace = workspace
  gradle.rootProject.ext.gradleBndProjects = allBndProjects
  gradle.rootProject.ext.parseBoolean = { value -> parseBoolean(value) }
}
