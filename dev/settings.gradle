/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
/*
 * Master Gradle initialization script
 *
 * Depends on bnd_* values from gradle.properties.
 */
pluginManagement {
  def userProperties = {
    Properties props = new Properties()
    File usrHomeProps = file(System.properties['user.home'] + '/gradle.startup.properties')
    if (!usrHomeProps.exists()) {
      if (System.properties['build.properties.path']!=null) {
        usrHomeProps = file(System.properties['build.properties.path']);
      }
    }

    if (usrHomeProps.exists()) {
      usrHomeProps.withInputStream { props.load(it) }
    }

    // Retain properties from prior builds; used in automated build publishing
    File genPropsFile = file('generated.properties')
    if (genPropsFile.exists()) {
      Properties genProps = new Properties()
      genPropsFile.withInputStream { genProps.load(it) }
      if (genProps['tests.total.failed'] != null) {
        props.setProperty('tests.total.failed', genProps['tests.total.failed'])
      }

      if (genProps['tests.total.successful'] != null) {
        props.setProperty('tests.total.successful', genProps['tests.total.successful'])
      }

      if (genProps['zipopenliberty.archivename'] != null) {
        props.setProperty('zipopenliberty.archivename', genProps['zipopenliberty.archivename'])
      }
      if (genProps['zipopenliberty.runtime.archivename'] != null) {
        props.setProperty('zipopenliberty.runtime.archivename', genProps['zipopenliberty.runtime.archivename'])
      }
      if (genProps['zipopenliberty.kernel.archivename'] != null) {
        props.setProperty('zipopenliberty.kernel.archivename', genProps['zipopenliberty.kernel.archivename'])
      }
      if (genProps['zipopenliberty.webprofile8.archivename'] != null) {
        props.setProperty('zipopenliberty.webprofile8.archivename', genProps['zipopenliberty.webprofile8.archivename'])
      }
      if (genProps['zipopenliberty.javaee8.archivename'] != null) {
        props.setProperty('zipopenliberty.javaee8.archivename', genProps['zipopenliberty.javaee8.archivename'])
      }
      if (genProps['zipopenliberty.microprofile2.archivename'] != null) {
        props.setProperty('zipopenliberty.microprofile2.archivename', genProps['zipopenliberty.microprofile2.archivename'])
      }
    }

    // Properties for automated-build relevant tasks. These assignments below are defaults for when building locally
    def isUsingArtifactory = false
    def isAutomatedBuild = false
    def isPersonal = false
    def isContinuousBuild = false
    def isRelease = false
    def isPublicPublishing = false
    def isRemotePublishing = false
    if (System.properties['is.remote.publishing']!=null) {
      isRemotePublishing = System.properties['is.remote.publishing'];
    }
    def isUnittestsDisabled = false

    def fetchRepoPublic =  ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublic;releaseUrl=https://repo.maven.apache.org/maven2/;index=${build}/oss_dependencies.maven')
    def fetchRepoIBM =     ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemoteIBM;local=~/.ibmdhe/repository;releaseUrl=http://public.dhe.ibm.com/ibmdl/export/pub/software/olrepo/;index=${build}/oss_ibm.maven')
    def fetchRepoIBMJava = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = DummyRepo') //Not yet supported to not have this set via gradle.startup.properties
    def pushRepoIBM =      ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublish')

    def javaHome = org.gradle.internal.jvm.Jvm.current().getJavaHome()
    props.setProperty('java.home', javaHome.getAbsolutePath())

    //scrape java.home JARs in jre/lib
    FileTree jdkLibs = fileTree(System.properties['java.home'])

    //bin is needed for IBM JDKs
    jdkLibs.include 'bin/default/**/vm.jar'
    jdkLibs.include 'lib/**/default/**/vm.jar'
    jdkLibs.include 'lib/*.jar'
    jdkLibs.exclude 'lib/ibmcfw.jar' //has com.ibm.nws.ejs.ras.Tr, which we don't want

    def jdkLibString = ""
    Boolean isFirstPass = true;

    jdkLibs.each { File file ->
      if (isFirstPass) {
        jdkLibString = jdkLibString + file + ";version=file;boot=true"
      } else {
        jdkLibString = jdkLibString + ", " + file + ";version=file;boot=true"
      }
      isFirstPass = false
    }

    props.setProperty('javac.bootclasspath.1.4', jdkLibString)
    props.setProperty('javac.bootclasspath.1.6', jdkLibString)
    props.setProperty('javac.bootclasspath.1.7', jdkLibString)
    props.setProperty('javac.bootclasspath.1.8', jdkLibString)

    // Property for Artifactory matrix parameters
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch

    def branchName = branch
    def matrixParams =  ""
    if (usrHomeProps.exists() && !props.getProperty('artifactory.force.external.repo')) {
      //Some functionality is added if we are able to access particular internal systems.
      //This is to support more controlled dependency management, and multiple JDK paths for cross-compilation
      if (props.getProperty('artifactory.download.server') != null) {
        isUsingArtifactory = true
        def repoURL =       ('https://' + props.getProperty('artifactory.download.server') + '/artifactory/wasliberty-open-liberty')
        fetchRepoPublic =   ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublic;local=~/.ibmartifactory/repository;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/oss_dependencies.maven')
        fetchRepoIBM =      ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemoteIBM;local=~/.ibmartifactory/repository;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/oss_ibm.maven')
        fetchRepoIBMJava =  ('aQute.bnd.repository.maven.provider.MavenBndRepository;local=~/.ibmjava/repository;name = IBMInternalJava;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/ibm_java.maven')
      }
      if (props.getProperty('artifactory.upload.server') != null) {
        def uploadRepoURL = ('https://' + props.getProperty('artifactory.upload.server') + '/artifactory/wasliberty-open-liberty')
        matrixParams =  ";GIT_BRANCH=master;GIT_FEATURE_BRANCH=${branchName}"
        pushRepoIBM =       ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublish;releaseUrl='+ uploadRepoURL + matrixParams + ';snapshotUrl='+ uploadRepoURL + matrixParams + ';index=${build}/openliberty.maven')
      }

      isAutomatedBuild = (props.getProperty("buildResultUUID") != null)

      if (props.getProperty('is.personal') != null) {
        isPersonal = 'on'.equalsIgnoreCase(props.getProperty('is.personal')) || 'true'.equalsIgnoreCase(props.getProperty('is.personal'))
      }

      if (props.getProperty('is.continuous.build') != null) {
        isContinuousBuild = 'on'.equalsIgnoreCase(props.getProperty('is.continuous.build')) || 'true'.equalsIgnoreCase(props.getProperty('is.continuous.build'))
      }

      if (props.getProperty('is.release') != null) {
        isRelease = 'on'.equalsIgnoreCase(props.getProperty('is.release')) || 'true'.equalsIgnoreCase(props.getProperty('is.release'))
      }

      if (props.getProperty('is.public.publishing') != null) {
        isPublicPublishing = 'on'.equalsIgnoreCase(props.getProperty('is.public.publishing')) || 'true'.equalsIgnoreCase(props.getProperty('is.public.publishing'))
      }

      if (props.getProperty('disable.run.runUnitTests') != null) {
        isUnittestsDisabled = 'on'.equalsIgnoreCase(props.getProperty('disable.run.runUnitTests')) || 
        'true'.equalsIgnoreCase(props.getProperty('disable.run.runUnitTests'))
      }

      props.setProperty('javac.bootclasspath.1.4', '${internaljavac.bootclasspath.1.4}')
      props.setProperty('javac.bootclasspath.1.6', '${internaljavac.bootclasspath.1.6}')
      props.setProperty('javac.bootclasspath.1.7', '${internaljavac.bootclasspath.1.7}')
      props.setProperty('javac.bootclasspath.1.8', '${internaljavac.bootclasspath.1.8}')
    }

    // Must be run after isRelease is set
    def timestamp = new SimpleDateFormat("yyyyMMddHHmm").format(new java.util.Date())
    def qualifier = timestamp

    //For release builds we can use a consistent qualifier of the build label.
    //This comes from the RTC build engines
    if (isRelease && (props.getProperty('buildLabel') != null)) {
      qualifier = props.getProperty('buildLabel')
    }

    props.setProperty('version.qualifier',             qualifier)
    props.setProperty('buildLabel',                    timestamp)
    props.setProperty('artifactory.matrix.parameters', matrixParams)
    props.setProperty('fetch.oss.repository',          fetchRepoPublic)
    props.setProperty('fetch.oss.ibm.repository',      fetchRepoIBM)
    props.setProperty('fetch.ibm.java.repository',     fetchRepoIBMJava)
    props.setProperty('push.ibm.repository',           pushRepoIBM)
    props.setProperty('is.automated.build',            isAutomatedBuild.toString())
    props.setProperty('is.personal',                   isPersonal.toString())
    props.setProperty('is.continuous.build',           isContinuousBuild.toString())
    props.setProperty('is.release',                    isRelease.toString())
    props.setProperty('maven.release.name',            "release")
    props.setProperty('is.remote.publishing',          isRemotePublishing.toString())
    props.setProperty('is.public.publishing',          isPublicPublishing.toString())
    props.setProperty('is.using.artifactory',          isUsingArtifactory.toString())
	props.setProperty('disable.run.runUnitTests',          isUnittestsDisabled.toString())

    return props
  }

  gradle.ext.userProps = userProperties()

  gradle.rootProject { rootProject ->
    rootProject.ext.userProps = gradle.userProps
    rootProject.ext.qualifier = gradle.userProps.getProperty("version.qualifier")
    rootProject.ext.matrixParams = gradle.userProps.getProperty("artifactory.matrix.parameters")
    rootProject.ext.isAutomatedBuild =   'on'.equalsIgnoreCase(gradle.userProps.getProperty("is.automated.build"))   || 'true'.equalsIgnoreCase(gradle.userProps.getProperty("is.automated.build"))
    rootProject.ext.isPersonal = 'on'.equalsIgnoreCase(gradle.userProps.getProperty("is.personal")) || 'true'.equalsIgnoreCase(gradle.userProps.getProperty("is.personal"))
    rootProject.ext.isContinuousBuild =  'on'.equalsIgnoreCase(gradle.userProps.getProperty("is.continuous.build"))  || 'true'.equalsIgnoreCase(gradle.userProps.getProperty("is.continuous.build"))
    rootProject.ext.isRelease =          'on'.equalsIgnoreCase(gradle.userProps.getProperty('is.release'))           || 'true'.equalsIgnoreCase(gradle.userProps.getProperty('is.release'))
    rootProject.ext.isUsingArtifactory = 'on'.equalsIgnoreCase(gradle.userProps.getProperty('is.using.artifactory')) || 'true'.equalsIgnoreCase(gradle.userProps.getProperty('is.using.artifactory'))
    rootProject.ext.isRemotePublishing = 'on'.equalsIgnoreCase(gradle.userProps.getProperty('is.remote.publishing')) || 'true'.equalsIgnoreCase(gradle.userProps.getProperty('is.remote.publishing'))
    rootProject.ext.isPublicPublishing = 'on'.equalsIgnoreCase(gradle.userProps.getProperty('is.public.publishing')) || 'true'.equalsIgnoreCase(gradle.userProps.getProperty('is.public.publishing'))
    rootProject.ext.isUnittestsDisabled = 'on'.equalsIgnoreCase(gradle.userProps.getProperty('disable.run.runUnitTests')) || 'true'.equalsIgnoreCase(gradle.userProps.getProperty('disable.run.runUnitTests'))
    rootProject.ext.releaseVersionOverride = gradle.userProps.getProperty('release.version.override')
    // Test results for this run
    rootProject.ext.testCountTotal = 0
    rootProject.ext.successfulTestCountTotal = 0
    rootProject.ext.failedTestCountTotal = 0
    rootProject.ext.skippedTestCountTotal = 0
  }

  repositories {
    // Prefer an internal IBM Artifactory over plugins.gradle.org.
    if ('true'.equalsIgnoreCase(gradle.userProps.getProperty('is.using.artifactory'))) {
      maven {
          credentials {
              username gradle.userProps.getProperty("artifactory.download.user")
              password gradle.userProps.getProperty("artifactory.download.token")
          }
          url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
      }
    } else {
      maven {
        url "https://plugins.gradle.org/m2/"
      }
    }
  }
}

// Require Java 11
if (!JavaVersion.current().isJava11Compatible()) {
  println "WARNING: Building this repository will soon require Java 11. To use Java 11 follow these steps:\n" + 
                            "  1) You can download a copy for your OS here if you don't already have it: " + 
                            "https://adoptopenjdk.net/index.html?variant=openjdk11&jvmVariant=openj9\n" + 
                            "  2) run 'export JAVA_HOME=/path/to/your/java11' in the shell, or set in ~/.bashrc\n" + 
                            "  3) [MACOS ONLY] Set 'ulimit -Sn 1024' in your ~/.bashrc\n" + 
                            "  4) Restart your gradle daemon with './gradlew --stop'\n";
}



/* Construct a properties file to store build-time variables. generated.properties is used to pass information from
 * Gradle during initialization into bnd during configuration for use in cnf/build.bnd.
 */
buildscript {
  gradle.ext.bndWorkspaceConfigure = { workspace ->
    gradle.userProps.each { prop ->
      workspace.setProperty(prop.key, prop.value.toString())
    }
  }

  // Store props to file for bnd to use. Imported by cnf/build.bnd and props files in cnf/resources/bnd
  File propsFile = new File('generated.properties')
  gradle.userProps.store(propsFile.newWriter(), null)

  repositories {
    if ('true'.equalsIgnoreCase(gradle.userProps.getProperty('is.using.artifactory'))) {
      maven {
          credentials {
              username gradle.userProps.getProperty("artifactory.download.user")
              password gradle.userProps.getProperty("artifactory.download.token")
          }
          url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
      }
    } else {
      maven { url uri(bnd_repourl) }
      maven { url "https://plugins.gradle.org/m2/" }
    }
  }

  dependencies {
    classpath bnd_plugin
    classpath 'net.ossindex.audit:net.ossindex.audit.gradle.plugin:0.3.8-beta'
    classpath 'com.gradle:build-scan-plugin:2.1'
  }

  /* Since the files in the repository change with each build, we need to recheck for changes */
  configurations.classpath {
    resolutionStrategy {
      cacheChangingModulesFor 30, 'minutes'
      cacheDynamicVersionsFor 30, 'minutes'
    }
  }

  dependencies {
    components {
      all { ComponentMetadataDetails details ->
        details.changing = true
      }
    }
  }

  /* Add bnd gradle plugin to buildscript classpath of rootProject */
  def bndPlugin = files(configurations.classpath.files)
  gradle.projectsLoaded { gradle ->
    gradle.rootProject.buildscript {
      dependencies {
        classpath bndPlugin
      }
    }
  }
}

private boolean parseBoolean(String value) {
  return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}

/* Initialize the bnd workspace */
import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants
import java.text.SimpleDateFormat

Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
Workspace workspace = new Workspace(rootDir, bnd_cnf).setOffline(startParameter.offline)
gradle.bndWorkspaceConfigure(workspace)

/* Add cnf project to the graph */
include bnd_cnf

/* Start with the declared build project name */
def defaultProjectName = bnd_build

/* If in a subproject, use the subproject name */
for (def currentDir = startParameter.currentDir; currentDir != rootDir; currentDir = currentDir.parentFile) {
  defaultProjectName = currentDir.name
}

/* Build a set of project names we need to include from the specified tasks */
def projectNames = startParameter.taskNames.collect { taskName ->
  def elements = taskName.split(':')
  switch (elements.length) {
    case 1:
      return defaultProjectName
    case 2:
      return elements[0].empty ? bnd_build : elements[0]
    default:
      return elements[0].empty ? elements[1] : elements[0]
  }
}.toSet()

/* Include the default project name if in a subproject or no tasks specified */
if ((startParameter.currentDir != rootDir) || projectNames.empty) {
  projectNames.add(defaultProjectName)
}

/* If bnd_build used but declared empty, add all non-private folders of rootDir */
def addAll = projectNames.remove('')
if (addAll) {
  println 'Preparing all bnd projects in the workspace (this can take a while)'
}

/**
 *This method is a hardcoded method that assumes if a project is
 *a multi module project, it will have a module named "module"
**/
def includeModuleIfExists(projectName) {
    File module = new File(rootDir, projectName + '/module')
    if (module.exists()) {
        include projectName + ':' + module.getName()
    }
}

def allBndProjects = workspace.getAllProjects().collect { project ->
  if (!project.name.startsWith('.')) {
    if (addAll) {
      project.prepare()
      include project.name
     
      if (new File(rootDir, project.name + '/springboot.gradle').exists()) {
          includeModuleIfExists(project.name)
      }

    }
    return project.name
  } else {
    return ''
  }
}.toSet()
allBndProjects.remove('')
if (addAll) {
  println 'All bnd projects in the workspace have been prepared'
}

/* Add our common build/tool projects */
projectNames.add('build.image')
projectNames.add('wlp-bndPlugins')
projectNames.add('wlp-rasInstrumentation')

/* Add each project and its dependencies to the graph */
projectNames.each { projectName ->
  if (allBndProjects.contains(projectName)) {
    include projectName
    workspace.getProject(projectName).getDependson()*.getName().each {
      include it
    }

    if (new File(rootDir, projectName + '/springboot.gradle').exists()) {
          includeModuleIfExists(projectName)
    }
  }
}

/* Pass workspace to root project */
gradle.projectsLoaded { gradle ->
  gradle.rootProject.ext.bndWorkspace = workspace
  gradle.rootProject.ext.gradleBndProjects = allBndProjects
  gradle.rootProject.ext.parseBoolean = { value -> parseBoolean(value) }
}

gradle.projectsLoaded { gradle ->
  def isContinuousBuild = gradle.userProps.getProperty("is.continuous.build")
  def buildCacheURL = ('https://' + gradle.userProps.getProperty('artifactory.download.server') + '/artifactory/wasliberty-generic-local/')
  if (isContinuousBuild) {
    buildCacheURL = ('https://' + gradle.userProps.getProperty('artifactory.upload.server') + '/artifactory/wasliberty-generic-local/')
  }

  buildCache {
    local {
      enabled = !isContinuousBuild
    }

    if ('true'.equalsIgnoreCase(gradle.userProps.getProperty('is.using.artifactory'))) {
      remote(HttpBuildCache) {
        push = isContinuousBuild
        url = buildCacheURL

        credentials {
          username = gradle.userProps.getProperty("artifactory.download.user")
          password = gradle.userProps.getProperty("artifactory.download.token")
        }
      }
    }
  }
}
