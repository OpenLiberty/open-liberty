/*******************************************************************************
 * Copyright (c) 2020 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
apply from: '../wlp-gradle/subprojects/fat.gradle'

configurations { 
    collectedDeps
    collectedDeps.transitive = false  /* Don't copy transitive dependencies. */
}

dependencies {

    /*
     * These JARs will be copied into $buildDir/collectedJars
     * for eash of retrieval by other projects.
     */
    collectedDeps 'org.mongodb:mongo-java-driver:2.13.3',
                  project(':io.openliberty.org.apache.commons.codec'),
                  project(':io.openliberty.org.apache.commons.logging'),
                  project(':com.ibm.json4j'),
                  project(':com.ibm.ws.com.google.gson'),
                  project(':com.ibm.ws.com.google.guava'),
                  project(':com.ibm.ws.com.meterware.httpunit.1.7'),
                  project(':com.ibm.ws.net.oauth.jsontoken'),
                  project(':com.ibm.ws.org.apache.commons.lang3'),
                  project(':com.ibm.ws.org.joda.time'),
                  project(':com.ibm.ws.security.oauth'),
                  project(':com.ibm.ws.security.openidconnect.clients.common')
}



/*
 * This is where all application ZIP and WARs will be built.
 */
def appBuildDir = "${buildDir}/test-application"


/******************************************************************
 ******************************************************************
 **
 ** authzParameter.zip
 **
 ******************************************************************
 ******************************************************************/
task authzParameter_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'authzParameter.zip'

  from (new File(projectDir, 'test-applications/authzParameter/resources')) {
    include 'WEB-INF/**'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
    include 'web/AuthzParameterServlet.class'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** formlogin.zip
 **
 ******************************************************************
 ******************************************************************/
task formlogin_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'formlogin.zip'

  from (new File(projectDir, 'test-applications/formlogin/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp', '*.html'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
    include 'web/FormLoginServlet.class', 'web/FormLoginServlet2.class', 'web/Base64.class',
            'web/manual_IntrospectRequester*.class', 'web/manual_IntrospectServlet.class'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** formlogine2e.zip
 **
 ******************************************************************
 ******************************************************************/
task formlogine2e_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'formlogine2e.zip'

  from (new File(projectDir, 'test-applications/formlogine2e/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp', '*.html'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
    include 'web/FormLoginServletE2E1.class'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** formlogine2e2.zip
 **
 ******************************************************************
 ******************************************************************/
task formlogine2e2_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'formlogine2e2.zip'

  from (new File(projectDir, 'test-applications/formlogine2e/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp', '*.html'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
    include 'web/FormLoginServletE2E2.class'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** helloworld.war.zip (TODO Maybe copied from jaxrs?)
 **
 ******************************************************************
 ******************************************************************/
task helloworld_war_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'helloworld.war.zip'

  from (new File(projectDir, 'test-applications/helloworld.war/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
    include 'com/ibm/ws/jaxrs/fat/helloworld/*.class'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** manual_complexclient.zip (TODO compied com.ibm.ws.jaxrs-2.0.client_fat)
 **
 ******************************************************************
 ******************************************************************/
task manual_complexclient_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'manual_complexclient.zip'

  from (new File(projectDir, 'test-applications/manual_complexclient/resources')) {
    include 'META-INF/**', '*.html'
    include 'WEB-INF/web.xml'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
    include 'com/ibm/ws/jaxrs20/client/ComplexClientTest/**/*.class'
    into 'WEB-INF/classes'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** oauthclient.zip
 **
 ******************************************************************
 ******************************************************************/
task oauthclient_ZIP (type: Zip, dependsOn: classes) { 

  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'oauthclient.zip'

  from (new File(projectDir, 'test-applications/oauthclient/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp', '*.html', '*.css'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** oauthclient.ear
 **
 ******************************************************************
 ******************************************************************/
task oauthclient_EAR (type: Zip, dependsOn: oauthclient_ZIP) { 

  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'oauthclient.ear'

  from (new File(projectDir, 'test-applications/oauthclient.ear/resources')) {
    include 'META-INF/**'
  }
  from (new File(appBuildDir, 'oauthclient.zip')) {
    rename 'oauthclient.zip', 'com.ibm.oauth.test.client.war'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** oauthclientcert.zip
 **
 ******************************************************************
 ******************************************************************/
task oauthclientcert_ZIP (type: Zip, dependsOn: classes) { 
  dependsOn ':com.ibm.json4j:jar'

  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'oauthclientcert.zip'

  from (new File(projectDir, 'test-applications/oauthclientcert/resources')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jsp'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
    include 'com/ibm/ws/security/oauth_oidc/fat/clientcert/*.class'
    into 'WEB-INF/classes'
  }
  from (new File(project(':com.ibm.json4j').buildDir, 'com.ibm.json4j.jar')) {
    into 'WEB-INF/lib'
  }
  from (new File(projectDir, 'securitykeys/')) {
    include 'commonBasicKeyStore.jks'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** testMediator.zip
 **
 ******************************************************************
 ******************************************************************/
task testMediator_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'testMediator.zip'

  from (new File(projectDir, 'build/classes/java/main')) {
    include 'com/ibm/ws/security/oauth_oidc/TestMediator.class'
    include 'web/BaseServlet.class', 'web/FlexibleBaseServlet*.class'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** oauthtaidemo.zip
 **
 ******************************************************************
 ******************************************************************/
task oauthtaidemo_ZIP (type: Zip, dependsOn: classes) { 
  destinationDirectory = new File(appBuildDir)
  archiveFileName = 'oauthtaidemo.zip'

  from (new File(projectDir, 'test-applications/oauthtaidemo')) {
    include 'META-INF/**', 'WEB-INF/**', '*.jpg', '*.html', '*.gif', '*.jsp', '*.xml', '*.css', '*.db'
  }
  from (new File(projectDir, 'build/classes/java/main')) {
    include 'com/ibm/ws/security/web/saml/sample/SimpleTFIMIdP.class'
    include 'com/ibm/ws/security/web/saml/sample/SnoopServlet.class'
    into 'WEB-INF/classes'
  }
}

/******************************************************************
 ******************************************************************
 **
 ** oauthtaidemo.ear
 **
 ******************************************************************
 ******************************************************************/
task oauthtaidemo_EAR(type: Zip, dependsOn: oauthtaidemo_ZIP) {
  destinationDir file(appBuildDir)
  archiveName "oauthtaidemo.ear"
  
  from (new File(projectDir, 'test-applications/oauthtaidemoear')) {
    include 'META-INF/**'
  }
  from (new File(appBuildDir, 'oauthtaidemo.zip')) {
    rename 'oauthtaidemo.zip', 'OauthTaiDemoWeb.war'
  }
}


/******************************************************************
 ******************************************************************
 **
 ** Assemble all of the custom build artifacts.
 **
 ******************************************************************
 ******************************************************************/
assemble.dependsOn authzParameter_ZIP
assemble.dependsOn oauthclientcert_ZIP
assemble.dependsOn formlogin_ZIP
assemble.dependsOn formlogine2e_ZIP 
assemble.dependsOn formlogine2e2_ZIP
assemble.dependsOn helloworld_war_ZIP
assemble.dependsOn manual_complexclient_ZIP
assemble.dependsOn oauthclient_EAR
assemble.dependsOn oauthclientcert_ZIP
assemble.dependsOn testMediator_ZIP
assemble.dependsOn oauthtaidemo_EAR


/******************************************************************
 ******************************************************************
 **
 ** Assemble all of the custom build artifacts.
 **
 ******************************************************************
 ******************************************************************/
assemble { 
  /* 
   * Collect all the required jars and put them in one uniform place
   * so that we don't need to keep adding them in each external
   * project.
   */
  copy { 
    from configurations.collectedDeps
    into "${buildDir}/collectedJars"
  }
}
