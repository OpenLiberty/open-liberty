<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2008, v.4002-->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN"
 "../dtd/ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="cxtp_channelframeworkoverview" xml:lang="en-us">
<title>Channel framework and TCP channel overview</title>
<shortdesc>Channelfw provides a framework for connecting various types
of channels together to create protocol chains, both inbound and outbound.
Each channel type handles specific logic within that chain and allows
easy reuse of channels.</shortdesc>
<prolog>
<copyright><copyryear year="2009"/><copyrholder>IBM Corporation</copyrholder>
</copyright>
</prolog>
<conbody>
<section><p>The channelfw bundle can contain a TCP channel, which
handles all socket-level IO logic for connections. Channels such as
SSL or HTTP can be connected on top of a TCP channel to add further
protocol logic, while an application channel sits at the top of the
chain and provides the runtime logic for handling the connection.</p></section>
<section><title>Writing bundles against channelfw</title><p>Bundles
can be written to provide channels to other bundles, such as SSL,
or to provide protocol and application logic, such as the transport.http
bundle. These bundles must be built using the following techniques
so they can use the channelfw bundle.<ul>
<li>The first step is the <draft-comment>what is "DS"?</draft-comment>DS
dependency on the channel framework. This bundle provides the com.ibm.websphere.channelfw.osgi.CHFWBundle
component. Linking to that class triggers correct loading of the channelfw
bundle. The class also provides a reference to the framework itself.</li>
<li>If the bundle provides a channel to other bundles, the bundle
must implement ChannelFactoryProvider as a DS component. The provider
interface defines type definitions as strings <draft-comment>this
phrase unclear; include what in their configuration?</draft-comment>that
allow other bundles to include in their configuration. The SSL bundle
matches the SSLInboundChannel and SSLOutboundChannel types against
an internal class located in the bundle. When channels and chains
are loaded from the bundle configuration, the types are queried for
a match against currently registered factory providers.</li>
<li>The ChannelUtils class provides utility methods for loading, starting,
and stopping configuration information for bundles. The following
example from the transport.http bundle defines the channels to create
a chain:<codeblock>endpoint.HTTPDefault=[host=*, port=9080]
channel.DEFAULT_TCP=[type=TCPInboundChannel, endpoint=HTTPDefault]
channel.DEFAULT_HTTP=[type=HTTPInboundChannel]
channel.DEFAULT_DISPATCHER=[type=HTTPDispatcherChannel]
chain.HTTPInboundDefault=[channels=DEFAULT_TCP\, DEFAULT_HTTP\, DEFAULT_DISPATCHER]</codeblock>This
configuration uses three different channel types and connects them
to make an inbound listening chain on port 9080. The format is of
each line in the configuration is <varname>keytype</varname>.<varname>name</varname>=
[<varname>properties</varname>], where the valid key types include
endpoint, channel, chain, group (of chains), or factory.</li>
</ul></p></section>
<section><title>Channelfw bundle configuration</title><p>The channelfw
bundle contains configuration information for the framework, the WsByteBuffer
pooling code, and the TCP channel factory.</p><p><draft-comment>Need
some introductory content here; what is a "key" and how do the keys
relate to the configuration?</draft-comment>The <uicontrol>wsbb</uicontrol> key
is used to mark the byte buffer configuration. For example:<codeblock>wsbb.class=com.ibm.ws.bytebuffer.internal.WsByteBufferPoolManagerImpl
wsbb.poolSizes=32, 1024, 8192, 16384, 24576, 32768, 49152, 65536
wsbb.poolDepths=30, 30, 30, 20, 20, 20, 10, 10</codeblock>This configuration
specifies the internal class used by the pooling code. You can change
the configuration to specify another pool manager. <draft-comment>The
following sentence needs clarification; what is "it" and what does
"public from the providing bundle" mean?</draft-comment>However, it
must be public from the providing bundle. The pool size and depth
values define the various byte buffer pools, and how much information
they contain per thread.</p><p>The <uicontrol>chfw</uicontrol> key
specifies the channel framework specific configuration values. For
example:<codeblock>chfw.ChainStartRetryInterval=5000
chfw.ChainStartRetryAttempts=60<draft-comment>Need more explanation of these values and why the user might want to change them.</draft-comment></codeblock></p><p>The <uicontrol>factory</uicontrol> key
separates the TCP channel factory configuration, such as the TCP communication
class value (AIO or NIO).<draft-comment>Need an example with some
further explanation here.<?Pub Caret?></draft-comment></p></section>
</conbody>
</concept>
<?Pub *0000004922?>
