###############################################################################
# Copyright (c) 2011 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#CMVCPATHNAME com.ibm.ws.ssl/resources/OSGI-INF/l10n/metatype.properties
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#
ssl.default=SSL Default Repertoire
ssl.default.desc=The default repertoire for SSL services.
default.sslRef=Default SSL repertoire
default.sslRef.desc=The name of the SSL repertoire that will be used as the default.  The default SSL repertoire called defaultSSLConfig is used if none is specified.
default.outboundSSLRef=Outbound default SSL repertoire
default.outboundSSLRef.desc=The name of the SSL repertoire that will be used as the default for outbound SSL connections.  The default SSL repertoire will be used if no SSL repertoire is specified.  This attribute is ignored if the transportSecurity-1.0 feature is not specified.
default.httpHostNameVerification=Perform outbound host name verification
default.httpHostNameVerification.desc=Specifies whether SSL outbound host name verification is enabled. The default is false. If set to true, then during the outbound SSL handshake requests, the JDK will verify that the returned certificate contains a host name that matches the outbound HTTP request.

repertoire.config=SSL Repertoire
repertoire.config.desc=An SSL repertoire with an ID, a defined keystore, and an optional truststore.
keystore=Keystore
keystore.desc=A keystore containing key entries for the SSL repertoire. This attribute is required.
truststore=Truststore
truststore.desc=A keystore containing trusted certificate entries used by the SSL repertoire for signing verification. This attribute is optional. If unspecified, the same keystore is used for both key and trusted certificate entries.
repertoire.sslProtocol=SSL protocol
repertoire.sslProtocol.desc=The SSL handshake protocol. Protocol values can be found in the documentation for the underlying JRE's Java Secure Socket Extension (JSSE) provider.  When using the IBM JRE the default value is SSL_TLS and when using the Oracle JRE the default value is SSL.
repertoire.clientAuthentication=Client authentication
repertoire.clientAuthentication.desc=Specifies whether client authentication is enabled. If set to true then client authentication is required and the client must provide a certificate for the server trusts.
repertoire.clientAuthenticationSupported=Client authentication is supported
repertoire.clientAuthenticationSupported.desc=Specifies whether a client authentication is supported.  If set to true then the client authentication support means the server will check trust from a client if the client presents a certificate.
repertoire.securityLevel=Security level
repertoire.securityLevel.desc=Specifies the cipher suite group used by the SSL handshake.  HIGH are 3DES and 128 bit and higher ciphers, MEDIUM are DES and 40 bit ciphers, LOW are ciphers without encryption.  If the enabledCiphers attribute is used the securityLevel list is ignored.
repertoire.clientKeyAlias=Client key alias
repertoire.clientKeyAlias.desc=Specifies the alias of the certificate in the keystore that is used as the key to send to a server that has client authentication enabled.  This attribute is only needed if the keystore has more than one key entry.
repertoire.serverKeyAlias=Server key alias
repertoire.serverKeyAlias.desc=Specifies the alias of the certificate in the keystore used as the server's key.  This attribute is only needed if the keystore has more then one key entry. 
repertoire.enabledCiphers=Enabled ciphers
repertoire.enabledCiphers.desc=Specifies a custom list of ciphers. Separate each cipher in the list with a space. The supported cipher will depend on the underlying JRE used.  Please check the JRE for valid ciphers.
repertiore.HIGH=Cipher suites 3DES and 128 bit and higher
repertiore.MEDIUM=Cipher suites DES and 40 bit
repertiore.LOW=Cipher suites without encryption
repertiore.CUSTOM=Custom list of cipher suites
repertoire.verifyHostname=Host name verification
repertoire.verifyHostname.desc=Specifies whether host name verification for outbound connections using a specific SSL configuration is enabled. If set to true, then all outbound SSL connections that use the specified SSL configuration undergo verification of the target server host name against that server's certificate. The attribute is set to false by default.

keystore.config=Keystore
keystore.config.desc=A repository of security certificates used for SSL encryption.
location=Location
id=ID
id.desc=A unique configuration ID.
location.desc=An absolute or relative path to the keystore file. If a relative path is provided, the server will attempt to locate the file in the ${server.output.dir}/resources/security directory. Use the keystore file for a file-based keystore, the keyring name for SAF keyrings, or the device configuration file for hardware cryptography devices. In the SSL minimal configuration, the location of the file is assumed to be ${server.output.dir}/resources/security/key.jks.
type=Type
type.desc=A keystore type supported by the target SDK.
password=Password
password.desc=The password used to load the keystore file. The value can be stored in clear text or encoded form. Use the securityUtility tool to encode the password.
keystore.pollingRate=Keystore file polling rate
keystore.pollingRate.desc=Rate at which the server checks for updates to a keystore file.
keystore.readOnly=Read only keystore
keystore.readOnly.desc=Specify true if the keystore is to be used by the server for reading and false if write operations will be performed by the server on the keystore.
keystore.fileBased=File based keystore
keystore.fileBased.desc=Specify true if the keystore is file based and false if the keystore is a SAF keyring or hardware keystore type.  
keystore.trigger.name=Keystore file update trigger
keystore.trigger.desc=Keystore file update method or trigger.
keystore.trigger.timed=Server will scan for keystore file changes at the polling interval and update if the keystore file has detectable changes.
keystore.trigger.external=Server will only update the keystore when prompted by the FileNotificationMbean. The FileNotificationMbean is typically called by an external program such as an integrated development environment or a management application.
keystore.trigger.disabled=Disables all update monitoring. Changes to the keystore file will not be applied while the server is running.

keyEntry.alias=Key Entry Information
keyEntry.alias.desc=Information about a private key entry specified in the keystore.
keyEntry.name=Key entry name
keyEntry.name.desc=Name of the private key entry in the keystore.
keyEntry.password=Key entry password	
keyEntry.password.desc=Password of the private key entry in the keystore.

outboundConnection=Dynamic Outbound Connection Information
outboundConnection.desc=Dynamic outbound connection information tells the server which SSL connection to use based on host and port filters.  This element is ignored if the transportSecurity-1.0 feature is not specified.
remoteHost=Remote host name
remoteHost.desc=The server uses this SSL configuration when it accesses the specified host name.
remotePort=Remote port
remotePort.desc=The server uses this SSL configuration when it accesses the remote host name at the specified port.
clientCertificate=Client certificate alias
clientCertificate.desc=The client uses this certificate alias if you make a connection to a server that supports or requires client authentication.
