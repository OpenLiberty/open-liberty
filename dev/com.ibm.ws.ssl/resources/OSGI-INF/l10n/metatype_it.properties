###############################################################################
# Copyright (c) 2011 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#CMVCPATHNAME com.ibm.ws.ssl/resources/OSGI-INF/l10n/metatype.properties
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#
ssl.default=Repertorio predefinito SSL
ssl.default.desc=Il repertorio predefinito per i servizi SSL.
default.sslRef=Repertorio SSL predefinito
default.sslRef.desc=Il nome del repertorio SSL che verr\u00e0 utilizzato per impostazione predefinita. Se non si specifica un nome viene utilizzato il repertorio SSL predefinito chiamato defaultSSLConfig.
default.outboundSSLRef=Repertorio SSL predefinito in uscita
default.outboundSSLRef.desc=Il nome del repertorio SSL che verr\u00e0 utilizzato per impostazione predefinita per le connessioni SSL in uscita. Viene utilizzato il repertorio SSL predefinito se non viene specificato un repertorio SSL. Questo attributo viene ignorato se non \u00e8 specificata la funzione transportSecurity-1.0.
default.httpHostNameVerification=Esegui la verifica nome host in uscita
default.httpHostNameVerification.desc=Specifica se la verifica nome host in uscita SSL \u00e8 abilitata. Il valore predefinito \u00e8 false. Se impostato su true, durante le richieste di handshake SSL in uscita, il JDK verificher\u00e0 che il certificato restituito contenga un nome host che corrisponde alla richiesta HTTP in uscita.

repertoire.config=Repertorio SSL
repertoire.config.desc=Un repertorio SSL con un ID, un keystore definito e un truststore facoltativo.
keystore=Keystore
keystore.desc=Un keystore che contiene le voci di chiave per il repertorio SSL. Questo attributo \u00e8 obbligatorio.
truststore=Truststore
truststore.desc=Un keystore che contiene le voci di certificato affidabile utilizzate dal repertorio SSL per la verifica della firma. Questo attributo \u00e8 facoltativo. Se non viene specificato, lo stesso keystore viene utilizzato sia per le voci di chiave sia per le voci di certificato affidabile.
repertoire.sslProtocol=Protocollo SSL
repertoire.sslProtocol.desc=Il protocollo di handshake SSL. \u00c8 possibile trovare i valori protocollo nella documentazione per il provider JSSE (Java Secure Socket Extension) del JRE sottostante.  Quando si utilizza IBM JRE il valore predefinito \u00e8 SSL_TLS e quando si utilizza Oracle JRE \u00e8 SSL.
repertoire.clientAuthentication=Autenticazione client
repertoire.clientAuthentication.desc=Specifica se \u00e8 abilitata l'autenticazione client. Se impostato su true, \u00e8 richiesta l'autenticazione client e il client deve fornire un certificato per il server deve ritenere affidabile.
repertoire.clientAuthenticationSupported=L'autenticazione client \u00e8 supportata
repertoire.clientAuthenticationSupported.desc=Specifica se \u00e8 supportata l'autenticazione client.  Se impostato su true, il supporto dell'autenticazione client significa che il server verifica l'attendibilit\u00e0 da un client se il client presenta un certificato.
repertoire.securityLevel=Livello di sicurezza
repertoire.securityLevel.desc=Specifica il gruppo di suite di cifratura utilizzato dall'handshake SSL.  HIGH sono cifrature 3DES e 128 bit e successive, MEDIUM sono cifrature DES e 40 bit, LOW sono cifrature senza codifica.  Se \u00e8 utilizzato l'attributo enabledCiphers, l'elenco securityLevel viene ignorato.
repertoire.clientKeyAlias=Alias chiave client
repertoire.clientKeyAlias.desc=Specifica l'alias del certificato nel keystore che viene utilizzato come chiave da inviare a un server che ha l'autenticazione client abilitata.  Questo attributo \u00e8 necessario solo se il keystore ha pi\u00f9 di una voce chiave.
repertoire.serverKeyAlias=Alias chiave server
repertoire.serverKeyAlias.desc=Specifica l'alias del certificato nel keystore utilizzato come chiave del server.  Questo attributo \u00e8 necessario solo se il keystore ha pi\u00f9 di una voce chiave. 
repertoire.enabledCiphers=Cifrature abilitate
repertoire.enabledCiphers.desc=Specifica un elenco personalizzato di cifrature. Separare ciascuna cifratura nell'elenco con uno spazio. La cifratura supportata dipender\u00e0 dal JRE sottostante utilizzato.  Controllare il JRE per la cifratura valida.
repertiore.HIGH=Suite di cifratura 3DES e 128 bit e successive
repertiore.MEDIUM=Suite di cifratura DES e 40 bit
repertiore.LOW=Suite di cifratura senza codifica
repertiore.CUSTOM=Elenco personalizzato di suite di cifrature
repertoire.verifyHostname=Verifica nome host
repertoire.verifyHostname.desc=Specifica se \u00e8 abilitata la verifica del nome host per le connessioni in uscita che utilizzano una specifica configurazione SSL. Se impostato su true, tutte le connessioni SSL in uscita che utilizzano la configurazione SSL specificata sono sottoposte a verifica del nome host del server di destinazione rispetto al certificato di tale server. L'attributo \u00e8 impostato su false per impostazione predefinita.

keystore.config=Keystore
keystore.config.desc=Un repository di certificati di sicurezza utilizzato per la codifica SSL.
location=Ubicazione
id=ID
id.desc=Un ID di configurazione univoco.
location.desc=Un percorso assoluto o relativo al file keystore. Se viene fornito un percorso relativo, il server prover\u00e0 a individuare il file nella directory ${server.output.dir}/resources/security. Utilizzare il file keystore per un keystore basato sui file, il nome di keyring per i keyring SAF oppure il file di configurazione unit\u00e0 per le unit\u00e0 di codifica hardware. Nella configurazione minima SSL, si presume che l'ubicazione del file sia ${server.output.dir}/resources/security/key.jks.
type=Tipo
type.desc=Un tipo di keystore supportato dall'SDK di destinazione.
password=Password
password.desc=La password utilizzata per caricare il file keystore. Il valore pu\u00f2 essere memorizzato come testo in chiaro oppure in formato codificato. Utilizzare lo strumento securityUtility per codificare la password.
keystore.pollingRate=Frequenza di polling del file keystore
keystore.pollingRate.desc=La frequenza con la quale il server controlla se sono presenti aggiornamenti al file keystore.
keystore.readOnly=Keystore di sola lettura
keystore.readOnly.desc=Specificare true se il keystore deve essere utilizzato dal server per la lettura e false se le operazioni di scrittura verranno eseguite dal server sul keystore.
keystore.fileBased=Keystore basato sul file
keystore.fileBased.desc=Specificare true se il keystore \u00e8 basato su file e false se il keystore \u00e8 un tipo di keystore hardware o keyring SAF.  
keystore.trigger.name=Trigger di aggiornamento del file keystore
keystore.trigger.desc=Trigger o metodo di aggiornamento del file keystore.
keystore.trigger.timed=Il server eseguir\u00e0 la scansione per rilevare eventuali modifiche al file keystore durante l'intervallo di polling ed eseguir\u00e0 l'aggiornamento se il file keystore presenta modifiche rilevabili.
keystore.trigger.external=Il server aggiorner\u00e0 il keystore solo quando richiesto da FileNotificationMbean. FileNotificationMbean viene generalmente richiamato da un programma esterno come un ambiente di sviluppo integrato o un'applicazione di gestione.
keystore.trigger.disabled=Disabilita tutti i monitoraggi degli aggiornamenti. Le modifiche al file keystore non verranno applicate mentre il server \u00e8 in esecuzione.

keyEntry.alias=Informazioni voce chiave
keyEntry.alias.desc=Le informazioni su una voce chiave privata specificata nel keystore.
keyEntry.name=Nome voce chiave
keyEntry.name.desc=Il nome della voce chiave privata nel keystore.
keyEntry.password=Password voce chiave
keyEntry.password.desc=La password della voce chiave privata nel keystore.

outboundConnection=Informazioni di connessione in uscita dinamica
outboundConnection.desc=Le informazioni di connessione in uscita dinamica indicano al server quale connessione SSL utilizzare in base ai filtri host e porta.  Questo elemento viene ignorato se non \u00e8 specificata la funzione transportSecurity-1.0.
remoteHost=Nome host remoto
remoteHost.desc=Il server utilizza questa configurazione SSL quando accede al nome host specificato.
remotePort=Porta remota
remotePort.desc=Il server utilizza questa configurazione SSL quando accede al nome host remoto sulla porta specificata.
clientCertificate=Alias certificato client
clientCertificate.desc=Il client utilizza l'alias di certificato se si effettua una connessione a un server che supporta o richiede l'autenticazione client.
