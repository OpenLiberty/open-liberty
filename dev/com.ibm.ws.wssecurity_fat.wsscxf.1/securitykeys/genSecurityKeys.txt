del sslClientDefault.jks
set projectroot=.
keytool -list -v -keystore %projectroot%\key.jks -storepass Liberty -storetype jks
keytool -export -alias default   -file .\sslDefault.cer -keystore  %projectroot%\key.jks -storepass Liberty -storetype jks
@rem keytool -genkey -alias sslClientDefault -keystore sslClientDefault.jks -dname "CN=SSLClientDefault, O=IBM, C=US" -storepass LibertyClient -keypass LibertyClient -storetype jks -validity 8000 -keyalg RSA
@rem The storepass and keyspass have to be the same for JSSE to work. See the test cases
keytool -genkey -alias sslClientDefault -keystore sslClientDefault.jks -dname "CN=user1, O=IBM, C=US" -storepass LibertyClient -keypass LibertyClient -storetype jks -validity 8000 -keyalg RSA 
keytool -importcert -file sslDefault.cer -keystore sslClientDefault.jks -alias "untSslClientDefaultCert" -storepass LibertyClient -keypass LibertyClient -storetype jks  -noprompt
@rem create a server trust store
del %projectroot%\sslServerTrust.jks
keytool -genkey -alias sslServerTrust -keystore %projectroot%\sslServerTrust.jks -dname "CN=user2, O=IBM, C=US" -storepass LibertyServer -keypass LibertyServer -storetype jks -validity 8000 -keyalg RSA 
keytool -export -alias sslClientDefault   -file .\sslClientDefault.cer -keystore sslClientDefault.jks  -storepass LibertyClient -storetype jks
keytool -importcert -file sslClientDefault.cer -keystore %projectroot%\sslServerTrust.jks -alias "sslTrustClient" -storepass LibertyServer  -storetype jks -noprompt

@rem import the key.jks certificate into the default Server Trust Store to make the client-certificate requests from server to server itself work
keytool -importcert -file sslDefault.cer -keystore %projectroot%\sslServerTrust.jks -alias "sslTrustServerDefault" -storepass LibertyServer  -storetype jks -noprompt



@rem generate  X509 keystore for server and client and let then hold the trust store of each other
del  x509ClientDefault.jks
keytool -genkey -alias x509ClientDefault -keystore x509ClientDefault.jks -dname "CN=test1, O=IBM, C=US" -storepass LibertyX509Client -keypass KLibertyX509Client -storetype jks -validity 8000  -keyalg RSA 
keytool -export -alias x509ClientDefault -file .\x509ClientDefault.cer -keystore x509ClientDefault.jks  -storepass LibertyX509Client -storetype jks
del %projectroot%\x509ServerDefault.jks
keytool -genkey -alias x509ServerDefault -keystore %projectroot%\x509ServerDefault.jks -dname "CN=test2, O=IBM, C=US" -storepass LibertyX509Server -keypass KLibertyX509Server -storetype jks -validity 8000  -keyalg RSA 
keytool -export -alias x509ServerDefault -file .\x509ServerDefault.cer -keystore %projectroot%\x509ServerDefault.jks  -storepass LibertyX509Server -storetype jks

keytool -importcert -file x509ClientDefault.cer -keystore %projectroot%\x509ServerDefault.jks -alias "x509ClientDefaultCert" -storepass LibertyX509Server -storetype jks -noprompt
keytool -importcert -file x509ServerDefault.cer -keystore x509ClientDefault.jks                                                                    -alias "x509ServerDefaultCert" -storepass LibertyX509Client -storetype jks  -noprompt

@rem copy x509ClientDefault.jks %projectroot%\publish\servers\com.ibm.ws.wssecurity_fat_1.x509\security /y


@rem generate second pair X509 keystore for server and client and let then hold the trust store of each other
del  x509ClientSecond.jks
keytool -genkey -alias x509ClientSecond -keystore x509ClientSecond.jks -dname "CN=test1, O=IBM, C=US" -storepass LibertyX509Client2 -keypass KLibertyX509Client2 -storetype jks -validity 8000  -keyalg RSA 
keytool -export -alias x509ClientSecond -file .\x509ClientSecond.cer -keystore x509ClientSecond.jks  -storepass LibertyX509Client2 -storetype jks
del %projectroot%\x509ServerSecond.jks
keytool -genkey -alias x509ServerSecond -keystore %projectroot%\x509ServerSecond.jks -dname "CN=test2, O=IBM, C=US" -storepass LibertyX509Server2 -keypass KLibertyX509Server2 -storetype jks -validity 8000  -keyalg RSA 
keytool -export -alias x509ServerSecond   -file .\x509ServerSecond.cer -keystore %projectroot%\x509ServerSecond.jks  -storepass LibertyX509Server2 -storetype jks

keytool -importcert -file x509ClientSecond.cer -keystore %projectroot%\x509ServerSecond.jks -alias "x509ClientSecondCert" -storepass LibertyX509Server2 -storetype jks -noprompt
keytool -importcert -file x509ServerSecond.cer -keystore x509ClientSecond.jks                                                                    -alias "x509ServerSecondCert" -storepass LibertyX509Client2 -storetype jks  -noprompt

@rem copy x509ClientSecond.jks %projectroot%\publish\servers\com.ibm.ws.wssecurity_fat_1.x509\security /y

del .\sslDefault.cer
del .\sslClientDefault.cer
del .\x509ClientDefault.cer
del .\x509ServerDefault.cer
del .\x509ClientSecond.cer
del .\x509ServerSecond.cer

@rem generate Third pair X509 keystore for server and client and let then hold the trust store of each other
del  x509ClientThird.jks
keytool -genkey -alias x509ClientThird -keystore x509ClientThird.jks -dname "CN=test3, O=IBM, C=US" -storepass LibertyX509Client3 -keypass KLibertyX509Client3 -storetype jks -validity 8000  -keyalg RSA 
keytool -export -alias x509ClientThird -file .\x509ClientThird.cer -keystore x509ClientThird.jks  -storepass LibertyX509Client3 -storetype jks
del %projectroot%\x509ServerThird.jks
keytool -genkey -alias x509ServerThird -keystore %projectroot%\x509ServerThird.jks -dname "CN=test4, O=IBM, C=US" -storepass LibertyX509Server3 -keypass KLibertyX509Server3 -storetype jks -validity 8000  -keyalg RSA 
keytool -export -alias x509ServerThird   -file .\x509ServerThird.cer -keystore %projectroot%\x509ServerThird.jks  -storepass LibertyX509Server3 -storetype jks

keytool -importcert -file x509ClientThird.cer -keystore %projectroot%\x509ServerThird.jks -alias "x509ClientThirdCert" -storepass LibertyX509Server3 -storetype jks -noprompt
keytool -importcert -file x509ServerThird.cer -keystore x509ClientThird.jks -alias "x509ServerThirdCert" -storepass LibertyX509Client3 -storetype jks  -noprompt

del .\x509ClientThird.cer
del .\x509ServerThird.cer
