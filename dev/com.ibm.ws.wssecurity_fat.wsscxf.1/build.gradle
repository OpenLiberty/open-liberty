/*******************************************************************************
 * Copyright (c) 2020,2024 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

configurations {
  requiredLibs {
    transitive = false
  }
}

dependencies {
  requiredLibs project(':com.ibm.ws.wssecurity.fat.utils.common'),
               project(':io.openliberty.org.apache.commons.codec'),
               project(':com.ibm.ws.org.apache.wss4j.ws.security.common'),
               'org.apache.httpcomponents:httpclient:4.5.4',
               'org.apache.httpcomponents:httpcore:4.4.9',
               'org.apache.commons:commons-lang3:3.5',
               'httpunit:httpunit:1.5.4'
}

addRequiredLibraries.dependsOn addJakartaTransformer


/* Unzip webcontent.war, WSSampleSeiClient.war from com.ibm.ws.wssecurity_fat.sample/apps */
task unzip1(type: Copy) {
  def zipFile1 = file('publish/servers/com.ibm.ws.wssecurity_fat.sample/apps/webcontent.war')
  def outputDir1 = file("${autoFvtDir}/publish/servers/com.ibm.ws.wssecurity_fat.sample/apps/webcontent")
  from zipTree(zipFile1)
    into outputDir1
}

task unzip2(type: Copy) {
  def zipFile2 = file('publish/servers/com.ibm.ws.wssecurity_fat.sample/apps/WSSampleSeiClient.war')
  def outputDir2 = file("${autoFvtDir}/publish/servers/com.ibm.ws.wssecurity_fat.sample/apps/WSSampleSeiClient")
  from zipTree(zipFile2)
    into outputDir2  
}

autoFVT.dependsOn unzip1, unzip2

//Uncomment the section of building client war when it's needed to rebuild the war to replace the version in github repo
//def appBuildDir = "${buildDir}/test-application"

/******************************************************************
 ******************************************************************
 **
 ** webcontent.war
 **
 ******************************************************************
 ******************************************************************/
/*task webcontent_WAR(type: War, dependsOn: classes) {
  destinationDirectory = file(appBuildDir)
  archiveFileName = "webcontent.war"
  
  from ('test-applications/webcontentclient/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'com/ibm/was/cxfsample/client/**' 
    include 'com/ibm/was/cxfsample/sei/echo/**'
    into 'WEB-INF/classes'
  }
}
*/
/******************************************************************
 ******************************************************************
 **
 ** WSSampleSeiClient.war
 **
 ******************************************************************
 ******************************************************************/
/*task WSSampleSeiClien_WAR(type: War, dependsOn: classes) {
  destinationDirectory = file(appBuildDir)
  archiveFileName = "WSSampleSeiClient.war"
  
  from ('test-applications/WSSampleSeiClient/resources') {
    include '**'
  }
  from ('build/classes/java/main') {
    include 'com/ibm/was/wssample/client/**' 
    include 'com/ibm/was/wssample/sei/async/**'
    include 'com/ibm/was/wssample/sei/echo/**'
    include 'com/ibm/was/wssample/sei/ping/**'
    include 'com/ibm/wstest/wstf/**'
    into 'WEB-INF/classes'
  }
}
*/
/*
 * The 'assemble' task builds all these applications.
 */
/* 
assemble { 
  dependsOn webcontent_WAR
  dependsOn WSSampleSeiClien_WAR
}

task unzip1(type: Copy) {
    def zipFile1 = file("${appBuildDir}/webcontent.war")
    def outputDir1 = file("${autoFvtDir}/publish/servers/com.ibm.ws.wssecurity_fat.sample/apps/webcontent")
    from zipTree(zipFile1)
      into outputDir1
  }

  task unzip2(type: Copy) {
    def zipFile2 = file("${appBuildDir}/WSSampleSeiClient.war")
    def outputDir2 = file("${autoFvtDir}/publish/servers/com.ibm.ws.wssecurity_fat.sample/apps/WSSampleSeiClient")
    from zipTree(zipFile2)
      into outputDir2  
  }

autoFVT.dependsOn unzip1, unzip2
*/

autoFVT.doLast {

/* Copy common files to all servers */

  def servers = [
        'com.ibm.ws.wssecurity_fat',
        'com.ibm.ws.wssecurity_fat.pwdigest',
        'com.ibm.ws.wssecurity_fat.derived',
        'com.ibm.ws.wssecurity_fat.derivedcbh',
        'com.ibm.ws.wssecurity_fat.x509caller',
        'com.ibm.ws.wssecurity_fat.x509symcaller',
        'com.ibm.ws.wssecurity_fat.sample'
        
  ]

  servers.each { server ->
    copy {
      from project.file('publish/files/serversettings')
      include '*.xml'
      into new File(autoFvtDir, 'publish/servers/' + server + '/imports')
    }
  }
  
  copy {
    from new File(project(':com.ibm.ws.wssecurity.example.cbh').buildDir, 'com.ibm.ws.wssecurity.example.cbh.jar')
    into new File(autoFvtDir, 'publish/files/bundles/')
  }
  copy {
    from new File(project(':com.ibm.ws.wssecurity.example.cbh').buildDir, 'com.ibm.ws.wssecurity.example.cbh.jar')
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles/bundles/')
  }
  copy {
    from new File(project(':com.ibm.ws.wssecurity.example.cbhwss4j').buildDir, 'com.ibm.ws.wssecurity.example.cbhwss4j.jar')
    into new File(autoFvtDir, 'publish/files/bundles/')
  }
  copy {
    from new File(project(':com.ibm.ws.wssecurity.example.cbhwss4j').buildDir, 'com.ibm.ws.wssecurity.example.cbhwss4j.jar')
    into new File(autoFvtDir, 'lib/LibertyFATTestFiles/bundles/')
  }
    
/* Copy securitykeys/key.jks, and sslServerTrust.jks to these servers */

  servers = [
        'com.ibm.ws.wssecurity_fat.pwdigest',
        'com.ibm.ws.wssecurity_fat.derived',
        'com.ibm.ws.wssecurity_fat.derivedcbh',
        'com.ibm.ws.wssecurity_fat.x509caller',
        'com.ibm.ws.wssecurity_fat.x509symcaller', 
        'com.ibm.ws.wssecurity_fat.sample'
  ]

  servers.each { server ->
    copy { 
      from project.file('securitykeys')
      include "key.jks", "sslServerTrust.jks"
      into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }
  }


/* Copy jsse.jar required for this server */
  
  servers = [
    'com.ibm.ws.wssecurity_fat.pwdigest'
  ]

  servers.each { server ->
    copy { 
      from project.file('lib')
      include "jsse.jar"
      into new File(autoFvtDir, 'lib/')
    }
  }


 /* Copy securitykeys/x509*.jks to these servers */
  servers = [
    'com.ibm.ws.wssecurity_fat.derived',
    'com.ibm.ws.wssecurity_fat.derivedcbh',
    'com.ibm.ws.wssecurity_fat.x509caller',
    'com.ibm.ws.wssecurity_fat.x509symcaller', 
    'com.ibm.ws.wssecurity_fat.sample'
  ]

  servers.each { server ->
    copy { 
      from project.file('securitykeys')
      include "x509*.jks"
      into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }   
  }

 
/* Copy securitykeys/x509Client*.properties to these servers */

  servers = [
    'com.ibm.ws.wssecurity_fat.x509caller',
    'com.ibm.ws.wssecurity_fat.x509symcaller'
  ]

  servers.each { server ->
    copy { 
      from project.file('securitykeys')
      include "x509Client*.properties"
      into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }
  }


/* Copy securitykeys/enc-sender.jceks, and enc-receiver.jceks to these servers */

  servers = [        
       'com.ibm.ws.wssecurity_fat.mustunderstand'
  ]

  servers.each { server ->
    copy { 
      from project.file('securitykeys')
      include "enc-sender.jceks", "enc-receiver.jceks"
      into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }
  
    copy { 
      from project.file('override/autoFVT/cxfclient-policies')
      include '**'
      into new File(autoFvtDir, 'cxfclient-policies')
    }
  }

/* Copy securitykeys/dsig-receiver.ks, and dsig-sender.ks to these servers */

  servers = [
     'com.ibm.ws.wssecurity_fat.mustunderstand'
  ]

  servers.each { server ->
    copy { 
      from project.file('securitykeys')
      include "dsig-receiver.ks", "dsig-sender.ks"
      into new File(autoFvtDir, 'publish/servers/' + server + '/')
    }
  }

  //Uncomment when the sample client war to be retrieved
  /*
  servers = [
        'com.ibm.ws.wssecurity_fat.sample'
  ]
  
  servers.each { server ->
    copy {
    from new File(appBuildDir, 'webcontent.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/apps')
    }
  }
  
  servers.each { server ->
    copy {
    from new File(appBuildDir, 'WSSampleSeiClient.war')
    into new File(autoFvtDir, 'publish/servers/' + server + '/apps')
    }
  }
  */
}
