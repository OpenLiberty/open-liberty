//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.06.20 at 10:41:30 AM CDT 
//


package org.apache.cxf.transports.http.configuration;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import org.apache.cxf.wsdl.TExtensibilityElementImpl;


/**
 * Properties used to configure a client-side HTTP port
 * 
 * <p>Java class for HTTPClientPolicy complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="HTTPClientPolicy">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.xmlsoap.org/wsdl/}tExtensibilityElement">
 *       &lt;attribute name="ConnectionTimeout" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedUInt" default="30000" />
 *       &lt;attribute name="ReceiveTimeout" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedUInt" default="60000" />
 *       &lt;attribute name="AsyncExecuteTimeout" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedUInt" default="5000" />
 *       &lt;attribute name="AsyncExecuteTimeoutRejection" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedBoolean" default="false" />
 *       &lt;attribute name="AutoRedirect" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedBoolean" default="false" />
 *       &lt;attribute name="MaxRetransmits" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedInt" default="-1" />
 *       &lt;attribute name="AllowChunking" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedBoolean" default="true" />
 *       &lt;attribute name="ChunkingThreshold" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedInt" default="4096" />
 *       &lt;attribute name="Accept" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="AcceptLanguage" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="AcceptEncoding" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="ContentType" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="Host" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="Connection" type="{http://cxf.apache.org/transports/http/configuration}connectionType" default="Keep-Alive" />
 *       &lt;attribute name="CacheControl" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="Cookie" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="BrowserType" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="Referer" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="DecoupledEndpoint" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="ProxyServer" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="ProxyServerPort" type="{http://cxf.apache.org/configuration/parameterized-types}ParameterizedInt" />
 *       &lt;attribute name="NonProxyHosts" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="ProxyServerType" type="{http://cxf.apache.org/transports/http/configuration}proxyServerType" default="HTTP" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "HTTPClientPolicy")
public class HTTPClientPolicy
    extends TExtensibilityElementImpl
{

    @XmlAttribute(name = "ConnectionTimeout")
    protected Long connectionTimeout;
    @XmlAttribute(name = "ReceiveTimeout")
    protected Long receiveTimeout;
    @XmlAttribute(name = "AsyncExecuteTimeout")
    protected Long asyncExecuteTimeout;
    @XmlAttribute(name = "AsyncExecuteTimeoutRejection")
    protected Boolean asyncExecuteTimeoutRejection;
    @XmlAttribute(name = "AutoRedirect")
    protected Boolean autoRedirect;
    @XmlAttribute(name = "MaxRetransmits")
    protected Integer maxRetransmits;
    @XmlAttribute(name = "AllowChunking")
    protected Boolean allowChunking;
    @XmlAttribute(name = "ChunkingThreshold")
    protected Integer chunkingThreshold;
    @XmlAttribute(name="ChunkLength")
    protected Integer chunkLength;
    @XmlAttribute(name = "Accept")
    protected String accept;
    @XmlAttribute(name = "AcceptLanguage")
    protected String acceptLanguage;
    @XmlAttribute(name = "AcceptEncoding")
    protected String acceptEncoding;
    @XmlAttribute(name = "ContentType")
    protected String contentType;
    @XmlAttribute(name = "Host")
    protected String host;
    @XmlAttribute(name = "Connection")
    protected ConnectionType connection;
    @XmlAttribute(name = "CacheControl")
    protected String cacheControl;
    @XmlAttribute(name = "Cookie")
    protected String cookie;
    @XmlAttribute(name = "BrowserType")
    protected String browserType;
    @XmlAttribute(name = "Referer")
    protected String referer;
    @XmlAttribute(name = "DecoupledEndpoint")
    protected String decoupledEndpoint;
    @XmlAttribute(name = "ProxyServer")
    protected String proxyServer;
    @XmlAttribute(name = "ProxyServerPort")
    protected Integer proxyServerPort;
    @XmlAttribute(name = "NonProxyHosts")
    protected String nonProxyHosts;
    @XmlAttribute(name = "ProxyServerType")
    protected ProxyServerType proxyServerType;
    @XmlTransient
    protected PropertyChangeSupport propertyListener = new PropertyChangeSupport(this);

    /**
     * Gets the value of the accept property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccept() {
        return accept;
    }

    /**
     * Sets the value of the accept property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccept(String value) {
        propertyListener.firePropertyChange("accept", this.accept, value);
        this.accept = value;
    }

    public boolean isSetAccept() {
        return (this.accept!= null);
    }

    /**
     * Gets the value of the acceptLanguage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAcceptLanguage() {
        return acceptLanguage;
    }

    /**
     * Sets the value of the acceptLanguage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAcceptLanguage(String value) {
        propertyListener.firePropertyChange("acceptLanguage", this.acceptLanguage, value);
        this.acceptLanguage = value;
    }

    public boolean isSetAcceptLanguage() {
        return (this.acceptLanguage!= null);
    }

    /**
     * Gets the value of the acceptEncoding property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAcceptEncoding() {
        return acceptEncoding;
    }

    /**
     * Sets the value of the acceptEncoding property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAcceptEncoding(String value) {
        propertyListener.firePropertyChange("acceptEncoding", this.acceptEncoding, value);
        this.acceptEncoding = value;
    }

    public boolean isSetAcceptEncoding() {
        return (this.acceptEncoding!= null);
    }

    /**
     * Gets the value of the contentType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContentType() {
        return contentType;
    }

    /**
     * Sets the value of the contentType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setContentType(String value) {
        propertyListener.firePropertyChange("contentType", this.contentType, value);
        this.contentType = value;
    }

    public boolean isSetContentType() {
        return (this.contentType!= null);
    }

    /**
     * Gets the value of the host property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHost() {
        return host;
    }

    /**
     * Sets the value of the host property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHost(String value) {
        propertyListener.firePropertyChange("host", this.host, value);
        this.host = value;
    }

    public boolean isSetHost() {
        return (this.host!= null);
    }

    /**
     * Sets the value of the connection property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConnectionType }
     *     
     */
    public void setConnection(ConnectionType value) {
        propertyListener.firePropertyChange("connection", this.connection, value);
        this.connection = value;
    }

    public boolean isSetConnection() {
        return (this.connection!= null);
    }

    /**
     * Gets the value of the cacheControl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCacheControl() {
        return cacheControl;
    }

    /**
     * Sets the value of the cacheControl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCacheControl(String value) {
        propertyListener.firePropertyChange("cacheControl", this.cacheControl, value);
        this.cacheControl = value;
    }

    public boolean isSetCacheControl() {
        return (this.cacheControl!= null);
    }

    /**
     * Gets the value of the cookie property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCookie() {
        return cookie;
    }

    /**
     * Sets the value of the cookie property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCookie(String value) {
        propertyListener.firePropertyChange("cookie", this.cookie, value);
        this.cookie = value;
    }

    public boolean isSetCookie() {
        return (this.cookie!= null);
    }

    /**
     * Gets the value of the browserType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBrowserType() {
        return browserType;
    }

    /**
     * Sets the value of the browserType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBrowserType(String value) {
        propertyListener.firePropertyChange("browserType", this.browserType, value);
        this.browserType = value;
    }

    public boolean isSetBrowserType() {
        return (this.browserType!= null);
    }

    /**
     * Gets the value of the referer property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getReferer() {
        return referer;
    }

    /**
     * Sets the value of the referer property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReferer(String value) {
        propertyListener.firePropertyChange("referer", this.referer, value);
        this.referer = value;
    }

    public boolean isSetReferer() {
        return (this.referer!= null);
    }

    /**
     * Gets the value of the decoupledEndpoint property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDecoupledEndpoint() {
        return decoupledEndpoint;
    }

    /**
     * Sets the value of the decoupledEndpoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDecoupledEndpoint(String value) {
        propertyListener.firePropertyChange("decoupledEndpoint", this.decoupledEndpoint, value);
        this.decoupledEndpoint = value;
    }

    public boolean isSetDecoupledEndpoint() {
        return (this.decoupledEndpoint!= null);
    }

    /**
     * Gets the value of the proxyServer property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProxyServer() {
        return proxyServer;
    }

    /**
     * Sets the value of the proxyServer property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProxyServer(String value) {
        propertyListener.firePropertyChange("proxyServer", this.proxyServer, value);
        this.proxyServer = value;
    }

    public boolean isSetProxyServer() {
        return (this.proxyServer!= null);
    }

    /**
     * Gets the value of the nonProxyHosts property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNonProxyHosts() {
        return nonProxyHosts;
    }

    /**
     * Sets the value of the nonProxyHosts property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNonProxyHosts(String value) {
        propertyListener.firePropertyChange("nonProxyHosts", this.nonProxyHosts, value);
        this.nonProxyHosts = value;
    }

    public boolean isSetNonProxyHosts() {
        return (this.nonProxyHosts!= null);
    }

    /**
     * Sets the value of the proxyServerType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProxyServerType }
     *     
     */
    public void setProxyServerType(ProxyServerType value) {
        propertyListener.firePropertyChange("proxyServerType", this.proxyServerType, value);
        this.proxyServerType = value;
    }

    public boolean isSetProxyServerType() {
        return (this.proxyServerType!= null);
    }

    /**
     * Sets the value of the connectionTimeout property.
     * 
     */
    public void setConnectionTimeout(long value) {
        propertyListener.firePropertyChange("connectionTimeout", connectionTimeout, value);
        connectionTimeout = value;
    }

    public void unsetConnectionTimeout() {
        connectionTimeout = null;
    }

    public boolean isSetConnectionTimeout() {
        return (this.connectionTimeout!= null);
    }

    /**
     * Gets the value of the connectionTimeout property.
     * 
     */
    public long getConnectionTimeout() {
        if (null == connectionTimeout) {
            return  30000L;
        }
        return connectionTimeout;
    }

    /**
     * Sets the value of the receiveTimeout property.
     * 
     */
    public void setReceiveTimeout(long value) {
        propertyListener.firePropertyChange("receiveTimeout", receiveTimeout, value);
        receiveTimeout = value;
    }

    public void unsetReceiveTimeout() {
        receiveTimeout = null;
    }

    public boolean isSetReceiveTimeout() {
        return (this.receiveTimeout!= null);
    }

    /**
     * Gets the value of the receiveTimeout property.
     * 
     */
    public long getReceiveTimeout() {
        if (null == receiveTimeout) {
            return  60000L;
        }
        return receiveTimeout;
    }

    /**
     * Sets the value of the asyncExecuteTimeout property.
     * 
     */
    public void setAsyncExecuteTimeout(long value) {
        propertyListener.firePropertyChange("asyncExecuteTimeout", asyncExecuteTimeout, value);
        asyncExecuteTimeout = value;
    }

    public void unsetAsyncExecuteTimeout() {
        asyncExecuteTimeout = null;
    }

    public boolean isSetAsyncExecuteTimeout() {
        return (this.asyncExecuteTimeout!= null);
    }

    /**
     * Gets the value of the asyncExecuteTimeout property.
     * 
     */
    public long getAsyncExecuteTimeout() {
        if (null == asyncExecuteTimeout) {
            return  5000L;
        }
        return asyncExecuteTimeout;
    }

    /**
     * Sets the value of the asyncExecuteTimeoutRejection property.
     * 
     */
    public void setAsyncExecuteTimeoutRejection(boolean value) {
        propertyListener.firePropertyChange("asyncExecuteTimeoutRejection", asyncExecuteTimeoutRejection, ((Boolean) value));
        asyncExecuteTimeoutRejection = value;
    }

    public void unsetAsyncExecuteTimeoutRejection() {
        asyncExecuteTimeoutRejection = null;
    }

    public boolean isSetAsyncExecuteTimeoutRejection() {
        return (this.asyncExecuteTimeoutRejection!= null);
    }

    /**
     * Gets the value of the asyncExecuteTimeoutRejection property.
     * 
     */
    public boolean isAsyncExecuteTimeoutRejection() {
        if (null == asyncExecuteTimeoutRejection) {
            return false;
        }
        return asyncExecuteTimeoutRejection;
    }

    /**
     * Sets the value of the autoRedirect property.
     * 
     */
    public void setAutoRedirect(boolean value) {
        propertyListener.firePropertyChange("autoRedirect", autoRedirect, ((Boolean) value));
        autoRedirect = value;
    }

    public void unsetAutoRedirect() {
        autoRedirect = null;
    }

    public boolean isSetAutoRedirect() {
        return (this.autoRedirect!= null);
    }

    /**
     * Gets the value of the autoRedirect property.
     * 
     */
    public boolean isAutoRedirect() {
        if (null == autoRedirect) {
            return false;
        }
        return autoRedirect;
    }

    /**
     * Sets the value of the maxRetransmits property.
     * 
     */
    public void setMaxRetransmits(int value) {
        propertyListener.firePropertyChange("maxRetransmits", maxRetransmits, ((Integer) value));
        maxRetransmits = value;
    }

    public void unsetMaxRetransmits() {
        maxRetransmits = null;
    }

    public boolean isSetMaxRetransmits() {
        return (this.maxRetransmits!= null);
    }

    /**
     * Gets the value of the maxRetransmits property.
     * 
     */
    public int getMaxRetransmits() {
        if (null == maxRetransmits) {
            return -1;
        }
        return maxRetransmits;
    }

    /**
     * Sets the value of the allowChunking property.
     * 
     */
    public void setAllowChunking(boolean value) {
        propertyListener.firePropertyChange("allowChunking", allowChunking, ((Boolean) value));
        allowChunking = value;
    }

    public void unsetAllowChunking() {
        allowChunking = null;
    }

    public boolean isSetAllowChunking() {
        return (this.allowChunking!= null);
    }

    /**
     * Gets the value of the allowChunking property.
     * 
     */
    public boolean isAllowChunking() {
        if (null == allowChunking) {
            return true;
        }
        return allowChunking;
    }

    /**
     * Sets the value of the chunkingThreshold property.
     * 
     */
    public void setChunkingThreshold(int value) {
        propertyListener.firePropertyChange("chunkingThreshold", chunkingThreshold, ((Integer) value));
        chunkingThreshold = value;
    }

    public void unsetChunkingThreshold() {
        chunkingThreshold = null;
    }

    public boolean isSetChunkingThreshold() {
        return (this.chunkingThreshold!= null);
    }

    /**
     * Gets the value of the chunkingThreshold property.
     * 
     */
    public int getChunkingThreshold() {
        if (null == chunkingThreshold) {
            return  4096;
        }
        return chunkingThreshold;
    }

    public void setChunkLength(int value) {
      this.propertyListener.firePropertyChange("chunkLength", this.chunkLength, Integer.valueOf(value));
      this.chunkLength = Integer.valueOf(value);
    }
    
    public void unsetChunkLength() {
      this.chunkLength = null;
    }
    
    public boolean isSetChunkLength() {
      return this.chunkLength != null;
    }
    
    public int getChunkLength() {
        if (null == this.chunkLength) {
            return -1;
        }
        return this.chunkLength.intValue();
    }
    
    /**
     * Gets the value of the connection property.
     * 
     */
    public ConnectionType getConnection() {
        if (null == connection) {
            return ConnectionType.fromValue("Keep-Alive");
        }
        return connection;
    }

    /**
     * Sets the value of the proxyServerPort property.
     * 
     */
    public void setProxyServerPort(int value) {
        propertyListener.firePropertyChange("proxyServerPort", proxyServerPort, ((Integer) value));
        proxyServerPort = value;
    }

    public void unsetProxyServerPort() {
        proxyServerPort = null;
    }

    public boolean isSetProxyServerPort() {
        return (this.proxyServerPort!= null);
    }

    /**
     * Gets the value of the proxyServerPort property.
     * 
     */
    public int getProxyServerPort() {
        return proxyServerPort;
    }

    /**
     * Gets the value of the proxyServerType property.
     * 
     */
    public ProxyServerType getProxyServerType() {
        if (null == proxyServerType) {
            return ProxyServerType.fromValue("HTTP");
        }
        return proxyServerType;
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyListener.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyListener.removePropertyChangeListener(listener);
    }

}
