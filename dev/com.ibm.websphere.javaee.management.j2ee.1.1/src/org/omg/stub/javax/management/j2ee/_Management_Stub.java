// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.omg.stub.javax.management.j2ee;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.util.Set;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.IntrospectionException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.ObjectName;
import javax.management.QueryExp;
import javax.management.ReflectionException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import javax.rmi.PortableRemoteObject;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.ServantObject;

import javax.management.j2ee.*  ;

public class _Management_Stub extends Stub implements Management {
    
    private static final String[] _type_ids = {
        "RMI:javax.management.j2ee.Management:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
        public String[] _ids() { 
            return (String[]) _type_ids.clone();
        }
        
        public EJBHome getEJBHome() throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("_get_EJBHome", true);
                        in = _invoke(out);
                        return (EJBHome) PortableRemoteObject.narrow(in.read_Object(), EJBHome.class);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getEJBHome();
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_EJBHome",Management.class);
                if (so == null) {
                    return getEJBHome();
                }
                try {
                    EJBHome result = ((Management)so.servant).getEJBHome();
                    return (EJBHome)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public Object getPrimaryKey() throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("_get_primaryKey", true);
                        in = _invoke(out);
                        return Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getPrimaryKey();
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_primaryKey",Management.class);
                if (so == null) {
                    return getPrimaryKey();
                }
                try {
                    Object result = ((Management)so.servant).getPrimaryKey();
                    return (Object)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public void remove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("remove", true);
                        _invoke(out);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        if ($_id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                            throw (javax.ejb.RemoveException) in.read_value(javax.ejb.RemoveException.class);
                        }
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        remove();
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("remove",Management.class);
                if (so == null) {
                    remove();
                    return ;
                }
                try {
                    ((Management)so.servant).remove();
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof javax.ejb.RemoveException) {
                        throw (javax.ejb.RemoveException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public Handle getHandle() throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("_get_handle", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Handle) in.read_abstract_interface();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getHandle();
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_handle",Management.class);
                if (so == null) {
                    return getHandle();
                }
                try {
                    Handle result = ((Management)so.servant).getHandle();
                    return (Handle)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public boolean isIdentical(EJBObject arg0) throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("isIdentical", true);
                        Util.writeRemoteObject(out,arg0);
                        in = _invoke(out);
                        return in.read_boolean();
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return isIdentical(arg0);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("isIdentical",Management.class);
                if (so == null) {
                    return isIdentical(arg0);
                }
                try {
                    EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                    return ((Management)so.servant).isIdentical(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public Object getAttribute(ObjectName arg0, String arg1) throws javax.management.MBeanException, javax.management.AttributeNotFoundException, javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getAttribute", true);
                        out.write_value(arg0,ObjectName.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                            throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                        }
                        if ($_id.equals("IDL:javax/management/AttributeNotFoundEx:1.0")) {
                            throw (javax.management.AttributeNotFoundException) in.read_value(javax.management.AttributeNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                            throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                            throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                        }
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getAttribute(arg0,arg1);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("getAttribute",Management.class);
                if (so == null) {
                    return getAttribute(arg0, arg1);
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    ObjectName arg0Copy = (ObjectName) copies[0];
                    String arg1Copy = (String) copies[1];
                    Object result = ((Management)so.servant).getAttribute(arg0Copy, arg1Copy);
                    return (Object)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof javax.management.MBeanException) {
                        throw (javax.management.MBeanException)exCopy;
                    }
                    if (exCopy instanceof javax.management.AttributeNotFoundException) {
                        throw (javax.management.AttributeNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.InstanceNotFoundException) {
                        throw (javax.management.InstanceNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.ReflectionException) {
                        throw (javax.management.ReflectionException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public AttributeList getAttributes(ObjectName arg0, String[] arg1) throws javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getAttributes", true);
                        out.write_value(arg0,ObjectName.class);
                        out.write_value(cast_array(arg1),String[].class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (AttributeList) in.read_value(AttributeList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                            throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                            throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                        }
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getAttributes(arg0,arg1);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("getAttributes",Management.class);
                if (so == null) {
                    return getAttributes(arg0, arg1);
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    ObjectName arg0Copy = (ObjectName) copies[0];
                    String[] arg1Copy = (String[]) copies[1];
                    AttributeList result = ((Management)so.servant).getAttributes(arg0Copy, arg1Copy);
                    return (AttributeList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof javax.management.InstanceNotFoundException) {
                        throw (javax.management.InstanceNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.ReflectionException) {
                        throw (javax.management.ReflectionException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public String getDefaultDomain() throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("_get_defaultDomain", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (String) in.read_value(String.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getDefaultDomain();
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_defaultDomain",Management.class);
                if (so == null) {
                    return getDefaultDomain();
                }
                try {
                    return ((Management)so.servant).getDefaultDomain();
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public Integer getMBeanCount() throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("_get_MBeanCount", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Integer) in.read_value(Integer.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getMBeanCount();
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_MBeanCount",Management.class);
                if (so == null) {
                    return getMBeanCount();
                }
                try {
                    Integer result = ((Management)so.servant).getMBeanCount();
                    return (Integer)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public MBeanInfo getMBeanInfo(ObjectName arg0) throws javax.management.IntrospectionException, javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getMBeanInfo", true);
                        out.write_value(arg0,ObjectName.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (MBeanInfo) in.read_value(MBeanInfo.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        if ($_id.equals("IDL:javax/management/IntrospectionEx:1.0")) {
                            throw (javax.management.IntrospectionException) in.read_value(javax.management.IntrospectionException.class);
                        }
                        if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                            throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                            throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                        }
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getMBeanInfo(arg0);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("getMBeanInfo",Management.class);
                if (so == null) {
                    return getMBeanInfo(arg0);
                }
                try {
                    ObjectName arg0Copy = (ObjectName) Util.copyObject(arg0,_orb());
                    MBeanInfo result = ((Management)so.servant).getMBeanInfo(arg0Copy);
                    return (MBeanInfo)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof javax.management.IntrospectionException) {
                        throw (javax.management.IntrospectionException)exCopy;
                    }
                    if (exCopy instanceof javax.management.InstanceNotFoundException) {
                        throw (javax.management.InstanceNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.ReflectionException) {
                        throw (javax.management.ReflectionException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public Object invoke(ObjectName arg0, String arg1, Object[] arg2, String[] arg3) throws javax.management.InstanceNotFoundException, javax.management.MBeanException, javax.management.ReflectionException, java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("invoke", true);
                        out.write_value(arg0,ObjectName.class);
                        out.write_value(arg1,String.class);
                        out.write_value(cast_array(arg2),Object[].class);
                        out.write_value(cast_array(arg3),String[].class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                            throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                            throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                        }
                        if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                            throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                        }
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return invoke(arg0,arg1,arg2,arg3);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("invoke",Management.class);
                if (so == null) {
                    return invoke(arg0, arg1, arg2, arg3);
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                    ObjectName arg0Copy = (ObjectName) copies[0];
                    String arg1Copy = (String) copies[1];
                    Object[] arg2Copy = (Object[]) copies[2];
                    String[] arg3Copy = (String[]) copies[3];
                    Object result = ((Management)so.servant).invoke(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                    return (Object)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof javax.management.InstanceNotFoundException) {
                        throw (javax.management.InstanceNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.MBeanException) {
                        throw (javax.management.MBeanException)exCopy;
                    }
                    if (exCopy instanceof javax.management.ReflectionException) {
                        throw (javax.management.ReflectionException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public boolean isRegistered(ObjectName arg0) throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("isRegistered", true);
                        out.write_value(arg0,ObjectName.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_boolean();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return isRegistered(arg0);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("isRegistered",Management.class);
                if (so == null) {
                    return isRegistered(arg0);
                }
                try {
                    ObjectName arg0Copy = (ObjectName) Util.copyObject(arg0,_orb());
                    return ((Management)so.servant).isRegistered(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public Set queryNames(ObjectName arg0, QueryExp arg1) throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("queryNames", true);
                        out.write_value(arg0,ObjectName.class);
                        out.write_value((Serializable)arg1,QueryExp.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Set) in.read_value(Set.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return queryNames(arg0,arg1);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("queryNames",Management.class);
                if (so == null) {
                    return queryNames(arg0, arg1);
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    ObjectName arg0Copy = (ObjectName) copies[0];
                    QueryExp arg1Copy = (QueryExp) copies[1];
                    Set result = ((Management)so.servant).queryNames(arg0Copy, arg1Copy);
                    return (Set)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public void setAttribute(ObjectName arg0, Attribute arg1) throws javax.management.InstanceNotFoundException, javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException, java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("setAttribute", true);
                        out.write_value(arg0,ObjectName.class);
                        out.write_value(arg1,Attribute.class);
                        _invoke(out);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                            throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/AttributeNotFoundEx:1.0")) {
                            throw (javax.management.AttributeNotFoundException) in.read_value(javax.management.AttributeNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/InvalidAttributeValueEx:1.0")) {
                            throw (javax.management.InvalidAttributeValueException) in.read_value(javax.management.InvalidAttributeValueException.class);
                        }
                        if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                            throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                        }
                        if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                            throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                        }
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        setAttribute(arg0,arg1);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("setAttribute",Management.class);
                if (so == null) {
                    setAttribute(arg0, arg1);
                    return ;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    ObjectName arg0Copy = (ObjectName) copies[0];
                    Attribute arg1Copy = (Attribute) copies[1];
                    ((Management)so.servant).setAttribute(arg0Copy, arg1Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof javax.management.InstanceNotFoundException) {
                        throw (javax.management.InstanceNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.AttributeNotFoundException) {
                        throw (javax.management.AttributeNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.InvalidAttributeValueException) {
                        throw (javax.management.InvalidAttributeValueException)exCopy;
                    }
                    if (exCopy instanceof javax.management.MBeanException) {
                        throw (javax.management.MBeanException)exCopy;
                    }
                    if (exCopy instanceof javax.management.ReflectionException) {
                        throw (javax.management.ReflectionException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public AttributeList setAttributes(ObjectName arg0, AttributeList arg1) throws javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("setAttributes", true);
                        out.write_value(arg0,ObjectName.class);
                        out.write_value(arg1,AttributeList.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (AttributeList) in.read_value(AttributeList.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                            throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                        }
                        if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                            throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                        }
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return setAttributes(arg0,arg1);
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("setAttributes",Management.class);
                if (so == null) {
                    return setAttributes(arg0, arg1);
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    ObjectName arg0Copy = (ObjectName) copies[0];
                    AttributeList arg1Copy = (AttributeList) copies[1];
                    AttributeList result = ((Management)so.servant).setAttributes(arg0Copy, arg1Copy);
                    return (AttributeList)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof javax.management.InstanceNotFoundException) {
                        throw (javax.management.InstanceNotFoundException)exCopy;
                    }
                    if (exCopy instanceof javax.management.ReflectionException) {
                        throw (javax.management.ReflectionException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        public ListenerRegistration getListenerRegistry() throws java.rmi.RemoteException {
            if (!Util.isLocal(this)) {
                try {
                    org.omg.CORBA_2_3.portable.InputStream in = null;
                    try {
                        OutputStream out = _request("_get_listenerRegistry", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (ListenerRegistration) in.read_abstract_interface();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String $_id = in.read_string();
                        throw new UnexpectedException($_id);
                    } catch (RemarshalException ex) {
                        return getListenerRegistry();
                    } finally {
                        _releaseReply(in);
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_listenerRegistry",Management.class);
                if (so == null) {
                    return getListenerRegistry();
                }
                try {
                    ListenerRegistration result = ((Management)so.servant).getListenerRegistry();
                    return (ListenerRegistration)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
        
        // This method is required as a work-around for
        // a bug in the JDK 1.1.6 verifier.
        
        private Serializable cast_array(Object obj) {
            return (Serializable)obj;
        }
    }
