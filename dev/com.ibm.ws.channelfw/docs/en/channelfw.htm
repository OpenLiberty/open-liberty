<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us">
<!--
  Copyright (c) 2008 IBM Corporation and others.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
 
  Contributors:
      IBM Corporation - initial API and implementation
-->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Channel Framework and TCP channel Documentation</title>
</head>
<body>
<!-- VERY important note:  Use ONLY flat text editors (such as
Notepad or Wordpad) to edit this file. Do NOT edit this page
with MS Word or other editors that are not flat text editors.
-->
<h1 id="http">Channel Framework and TCP channel Documentation</h1>

<h2 id="http_overview">Overview</h2>
<p>
Channelfw provides a framework for connecting various types of channels together
to create protocol chains, both inbound and outbound. Each channel type handles
specific logic within that chain and allows easy re-use of channels. For example,
the bundle contains a TCP channel, which handles all socket level IO logic for
connections. Channels such as SSL or HTTP can be connected on top of TCP channel
to add further protocol logic, and an application channel caps the chain and provides
the actual runtime logic for handling the connection.</p>
<br/>
<h2 id="bundle_info">Writing bundles against channelfw</h2>
<br/>
Bundles can be written to provide either channels to other bundles, such as SSL,
or to provide protocol and/or application logic, such as the transport.http bundle.
These bundles must be built in certain ways to use the channelfw bundle.
<ul>
<li>The first step is the DS dependency on the channel framework. This bundle provides
the com.ibm.websphere.channelfw.osgi.CHFWBundle component. Linking to that class
triggers the proper load of the channelfw bundle and it provides a reference to the
framework itself.</li>
<li>If the bundle provides a channel to others, it should implement a ChannelFactoryProvider
as a DS component. This provider interface defines type definitions as strings that
allow other bundles to include in their configuration. The SSL bundle matchs the
SSLInboundChannel and SSLOutboundChannel types against an internal class of that
bundle. When channels and chains are loaded from bundle configuration, this type
is queried for a match against currently registered factory providers.</li>
<li>The ChannelUtils class provides utility methods for loading, starting, and stopping
configuration information for bundles. Here is an example from transport.http on
defining channels creating a chain:
<pre>
endpoint.HTTPDefault=[host=*, port=9080]
channel.DEFAULT_TCP=[type=TCPInboundChannel, endpoint=HTTPDefault]
channel.DEFAULT_HTTP=[type=HTTPInboundChannel]
channel.DEFAULT_DISPATCHER=[type=HTTPDispatcherChannel]
chain.HTTPInboundDefault=[channels=DEFAULT_TCP\, DEFAULT_HTTP\, DEFAULT_DISPATCHER]
</pre>
That configuration uses three different channel types and connects them to make an
inbound listening chain on *:9080. The format is &lt;keytype&gt;.&lt;name>=
[&lt;props&gt;], where the keytypes are endpoint, channel, chain, group (of chains), and factory.</li>
</ul>
<h2 id="config">channelfw bundle configuration</h2>
The channelfw bundles contains configuration for the framework itself, the WsByteBuffer
pooling code, and the TCP channel factory.
<ul>
<li>The "wsbb" key is used to mark the bytebuffer configuration, such as:
<pre>
wsbb.class=com.ibm.ws.bytebuffer.internal.WsByteBufferPoolManagerImpl
wsbb.poolSizes=32, 1024, 8192, 16384, 24576, 32768, 49152, 65536
wsbb.poolDepths=30, 30, 30, 20, 20, 20, 10, 10
</pre>
That specifies the internal class used by the pooling code. This can be changed if
another pool manager is wanted; however, it must be public from the providing bundle.
The pool sizes and depths define the various bytebuffer pools created and how much
they contain per thread.</li>
<li>The "chfw" key distinguishs the channel framework specific configuration values, such as:
<pre>
chfw.ChainStartRetryInterval=5000
chfw.ChainStartRetryAttempts=60
</pre></li>
<li>The "factory" key separates the TCP channel factory configuration, such as the
TCP communication class value (AIO or NIO).</li>
</ul>
<!-- center>
Any extra images for the doc goes under images directory<br />
<img src="images/liberty.jpg" />
</center -->
<p />

</body>
</html>