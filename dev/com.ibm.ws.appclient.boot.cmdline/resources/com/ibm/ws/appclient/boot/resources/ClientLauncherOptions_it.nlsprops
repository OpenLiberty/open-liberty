###############################################################################
# Copyright (c) 2014 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#CMVCPATHNAME com.ibm.ws.appclient.boot/resources/com/ibm/ws/appclient/boot/resources/ClientLauncherOptions.nlsprops
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
# NLS_MESSAGEFORMAT_VAR

#------------------------------\n at 72 chars -- leading tab-----------\n\#
briefUsage=Utilizzo: java [opzioni JVM] -javaagent:bin/tools/ws-javaagent.jar \\        \n\
\t-jar bin/tools/ws-client.jar clientName [azioni] [opzioni]  
scriptUsage=Utilizzo: {0} action clientName [opzioni]

use.actions=Azioni:
use.options=Opzioni:
use.options.gen.desc=\ \ \ \ Utilizzare il comando help [nomeAzione] per informazioni dettagliate sulle opzioni di ciascuna azione.
use.jvmarg=Opzioni JVM:
category-key.lifecycle=Ciclo di vita server
category-key.help=Informazioni
category-key.misc=Varie
# -------- OPTIONS ----------------------------------------------------#
# List of descriptive text for options. Use "\n\" for line continuations.
# The code provides no whitespace: begin keys with "\ \ \ \ " for leading
# whitespace, and begin descriptions with \t 
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# ClientName
processName.key=\ \ \ \ clientName
processName.desc=\tUn nome localmente univoco per il client; il nome pu\u00f2 essere creato    \n\
\tutilizzando caratteri alfanumerici Unicode (ad esempio, A-Za-z0-9), \n\
\tcarattere di sottolineatura (_), trattino (-), segno pi\u00f9 (+) e punto (.). Un nome client     \n\
\tnon pu\u00f2 iniziare con un trattino (-) o un punto (.).
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# JavaAgent 
javaAgent.key=\ \ \ \ -javaagent:bin/tools/ws-javaagent.jar
javaAgent.desc=\tOpzione JVM utilizzata per specificare un agent per la strumentazione.   \n\
\tIl runtime utilizza la strumentazione per raccogliere informazioni \n\
\tsulla traccia ed altre informazioni di debug. bootstrap-agent.jar \n\
\tdeve essere nella stessa directory del jar utilizzato per avviare il runtime.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# Actions: create, run, debug, package, help
action-key.create=\ \ \ \ --create
action-desc.create=\tCrea un nuovo client se il client specificato non esiste. L'opzione      \n\
\t--template pu\u00f2 essere utilizzata per specificare un template da utilizzare quando      \n\
\tsi crea un nuovo client.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.run=\ \ \ \ --run
action-desc.run=\tEsegue il client indicato in primo piano nella console.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.debug=\ \ \ \ --debug
action-desc.debug=\tEsegue il client indicato in primo piano nella console dopo che un programma di debug \n\
\tsi connette alla porta di debug (valore predefinito: 7778).
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.package=\ \ \ \ --package
action-desc.package=\tCrea il package di un client in un archivio. L'opzione --archive pu\u00f2 essere utilizzata.    \n\
\tL'opzione --include pu\u00f2 essere utilizzata con valori "all","usr" e        \n\
\t"minify".
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.help=\ \ \ \ --help
action-desc.help=\tStampa le informazioni della guida.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.clean=\ \ \ \ --clean
option-desc.clean=\tElimina tutte le informazioni memorizzate nella cache relative a questa istanza del client.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.archive=\ \ \ \ --archive="percorso del file di archivio di destinazione"
option-desc.archive=\tSpecifica la destinazione di archivio che deve essere generata dall'azione \n\
\tcreazione del package. La destinazione pu\u00f2 essere specificata come un percorso assoluto o come \n\
\tun percorso relativo. Se questa opzione viene omessa, l'archivio viene\n\
\tcreato nella directory di output del client. L'estensione del nome file \n\
\tdi destinazione pu\u00f2 influire sul formato dell'archivio generato. Il formato \n\
\tdell'archivio predefinito per l'azione di package \u00e8 "pax" su z/OS e "zip"\n\
\tsu tutte le altre piattaforme. Il formato archivio "jar" produce un jar \n\
\tad estrazione automatica simile all'archivio del programma di installazione originale.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.include=\ \ \ \ --include=value,value,...
option-desc.include=\tUn elenco di valori delimitati da virgole. I valori validi sono: all*, usr,   \n\
\tminify. L'opzione usr crea un package che contiene il server\n\
\te l'applicazione, ma non il runtime. L'opzione predefinita all produce\n\
\tun package client che contiene tutto.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.template=\ \ \ \ --template="templateName"
option-desc.template=\tSpecifica il nome del modello da utilizzare quando si crea un nuovo client. 
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.autoAcceptSigner=\ \ \ \ --autoAcceptSigner
option-desc.autoAcceptSigner=\tAccettare automaticamente il certificato del firmatario del server e archiviarlo nel \n\
\ttruststore client se il client non considera affidabile il server.
