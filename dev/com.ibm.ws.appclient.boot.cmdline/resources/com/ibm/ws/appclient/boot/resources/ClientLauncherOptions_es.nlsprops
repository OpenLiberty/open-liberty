###############################################################################
# Copyright (c) 2014 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#CMVCPATHNAME com.ibm.ws.appclient.boot/resources/com/ibm/ws/appclient/boot/resources/ClientLauncherOptions.nlsprops
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
# NLS_MESSAGEFORMAT_VAR

#------------------------------\n at 72 chars -- leading tab-----------\n\#
briefUsage=Uso: java [opciones de JVM] -javaagent:bin/tools/ws-javaagent.jar \\        \n\
\t-jar bin/tools/ws-client.jar clientName [acciones] [opciones]  
scriptUsage=Uso: {0} action clientName [opciones]

use.actions=Acciones:
use.options=Opciones:
use.options.gen.desc=\ \ \ \ Utilice help [nombreAcci\u00f3n] para obtener informaci\u00f3n de opciones detalladas de cada acci\u00f3n.
use.jvmarg=Opciones de JVM:
category-key.lifecycle=Ciclo de vida de servidor
category-key.help=Informaci\u00f3n
category-key.misc=Diversos
# -------- OPTIONS ----------------------------------------------------#
# List of descriptive text for options. Use "\n\" for line continuations.
# The code provides no whitespace: begin keys with "\ \ \ \ " for leading
# whitespace, and begin descriptions with \t 
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# ClientName
processName.key=\ \ \ \ clientName
processName.desc=\tUn nombre exclusivo local para el cliente; el nombre puede construirse\n\
\tutilizando caracteres alfanum\u00e9ricos de Unicode (por ejemplo, A-Za-z0-9), el \n\
\tsigno de subrayado (_), el gui\u00f3n (-), el signo m\u00e1s (+) y el punto (.). Un nombre de\n\
\t cliente no puede empezar por un gui\u00f3n (-) o un punto (.).
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# JavaAgent 
javaAgent.key=\ \ \ \ -javaagent:bin/tools/ws-javaagent.jar
javaAgent.desc=\tEsta es una opci\u00f3n de JVM utilizada para especificar un agente para la instrumentaci\u00f3n.   \n\
\tEl tiempo de ejecuci\u00f3n utiliza la instrumentaci\u00f3n para recopilar informaci\u00f3n de \n\
\trastreo y de depuraci\u00f3n. Bootstrap-agent.jar est\u00e1 en el mismo directorio que \n \tel jar utilizado para iniciar el tiempo de ejecuci\u00f3n.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# Actions: create, run, debug, package, help
action-key.create=\ \ \ \ --create
action-desc.create=\tCree un nuevo cliente si el cliente especificado no existe. La opci\u00f3n\n\
\t--template puede utilizarse para especificar la plantilla que se va a utilizar \n\
\tcuando se crea un nuevo cliente.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.run=\ \ \ \ --run
action-desc.run=\tEjecute el cliente especificado en el primer plano de la consola.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.debug=\ \ \ \ --debug
action-desc.debug=\tEjecute el cliente especificado en el primer plano de la consola despu\u00e9s de que\n\
\tun depurador se conecte al puerto de depuraci\u00f3n (valor predeterminado: 7778).
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.package=\ \ \ \ --package
action-desc.package=\tEmpaquete un cliente en un archivado. Puede utilizarse la opci\u00f3n --archive.    \n\
\tPuede utilizarse la opci\u00f3n --include con los valores "all","usr" y        \n\
\t"minify".
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.help=\ \ \ \ --help
action-desc.help=\tImprimir informaci\u00f3n de ayuda.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.clean=\ \ \ \ --clean
option-desc.clean=\tBorre toda la informaci\u00f3n almacenada en la memoria cach\u00e9 relacionada con esta instancia de cliente.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.archive=\ \ \ \ --archive="v\u00eda al archivador de destino"
option-desc.archive=\tEspecifique el destino de archivado que va a generar\n\
\tla acci\u00f3n de empaquetado. El destino puede especificarse como v\u00eda de acceso absoluta o como \n\
\tv\u00eda de acceso relativa. Si se omite esta opci\u00f3n, el archivo se crea\n\
\ten el directorio de salida de cliente. Es posible que la extensi\u00f3n de nombre de archivo de destino \n\
\tafecte al formato del archivo generado. El formato de archivo \n\
\tpredeterminado para la acci\u00f3n de paquete es "pax" en z/OS y "zip" en todas \n\
\tlas dem\u00e1s plataformas. El formato de archivo "jar" producir\u00e1 un jar de \n\
\tautoextracci\u00f3n similar al archivo de instalador original.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.include=\ \ \ \ --include=value,value,...
option-desc.include=\tLista de valores delimitados por comas. Los valores v\u00e1lidos son: all*, usr,   \n\
\tminify. La opci\u00f3n usr crea un paquete que contiene el servidor  \n\
\ty la aplicaci\u00f3n, pero no el tiempo de ejecuci\u00f3n. La opci\u00f3n all predeterminada produce\n\
\tun paquete de cliente que lo contiene todo.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.template=\ \ \ \ --template="nombrePlantilla"
option-desc.template=\tEspecifique el nombre de la plantilla que se va a utilizar cuando se cree un nuevo cliente. 
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.autoAcceptSigner=\ \ \ \ --autoAcceptSigner
option-desc.autoAcceptSigner=\tAcepte autom\u00e1ticamente el certificador de firmante del servidor y   \n\
\talmac\u00e9nelo en el almac\u00e9n de confianza de cliente si el cliente no conf\u00eda en el servidor.
