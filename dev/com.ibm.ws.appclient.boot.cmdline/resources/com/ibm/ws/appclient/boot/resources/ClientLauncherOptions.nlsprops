###############################################################################
# Copyright (c) 2014 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#CMVCPATHNAME com.ibm.ws.appclient.boot/resources/com/ibm/ws/appclient/boot/resources/ClientLauncherOptions.nlsprops
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
# NLS_MESSAGEFORMAT_VAR

#------------------------------\n at 72 chars -- leading tab-----------\n\#
briefUsage=\
Usage: java [JVM options] -javaagent:bin/tools/ws-javaagent.jar \\        \n\
\t-jar bin/tools/ws-client.jar clientName [actions] [options]  
scriptUsage=\
Usage: {0} action clientName [options]

use.actions=Actions:
use.options=Options:
use.options.gen.desc=\ \ \ \ Use help [actionName] for detailed option information of each action.
use.jvmarg=JVM options:
category-key.lifecycle=Server Lifecycle
category-key.help=Information
category-key.misc=Miscellaneous
# -------- OPTIONS ----------------------------------------------------#
# List of descriptive text for options. Use "\n\" for line continuations.
# The code provides no whitespace: begin keys with "\ \ \ \ " for leading
# whitespace, and begin descriptions with \t 
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# ClientName
processName.key=\
\ \ \ \ clientName
processName.desc=\
\tA locally unique name for the client; the name can be constructed    \n\
\tusing Unicode alphanumeric characters (for example, A-Za-z0-9), the  \n\
\tunderscore (_), dash (-), plus (+) and period (.). A client name     \n\
\tcannot begin with a dash (-) or period (.).
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# JavaAgent 
javaAgent.key=\
\ \ \ \ -javaagent:bin/tools/ws-javaagent.jar
javaAgent.desc=\
\tThis is a JVM option used to specify an agent for instrumentation.   \n\
\tThe runtime uses instrumentation for gathering trace and other debug \n\
\tinformation. The bootstrap-agent.jar is be in the same directory as  \n\
\tthe jar used to launch the runtime.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
# Actions: create, run, debug, package, help
action-key.create=\
\ \ \ \ --create
action-desc.create=\
\tCreate a new client if the specified client does not exist. The      \n\
\t--template option can be used to specify a template to use when      \n\
\tcreating a new client.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.run=\
\ \ \ \ --run
action-desc.run=\
\tRun the named client in the console foreground.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.debug=\
\ \ \ \ --debug
action-desc.debug=\
\tRun the named client in the console foreground after a debugger      \n\
\tconnects to the debug port (default: 7778).
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.package=\
\ \ \ \ --package
action-desc.package=\
\tPackage a client to an archive. The --archive option can be used.    \n\
\tThe --include option can be used with values "all", "usr", and       \n\
\t"minify".
#------------------------------\n at 72 chars -- leading tab-----------\n\#
action-key.help=\
\ \ \ \ --help
action-desc.help=\
\tPrint help information.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.clean=\
\ \ \ \ --clean
option-desc.clean=\
\tClean all cached information related to this client instance.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.archive=\
\ \ \ \ --archive="path to the target archive file"
option-desc.archive=\
\tSpecify the archive target to be generated by the package            \n\
\taction. The target can be specified either as an absolute path or    \n\
\tas a relative path. If this option is omitted, the archive is created\n\
\tin the client output directory. The target file name extension might \n\
\tinfluence the format of the generated archive. The default archive   \n\
\tformat for the package action is "pax" on z/OS and "zip" on all      \n\
\tother platforms. Archive format "jar" will produce a self-extracting \n\
\tjar similar to the original installer archive.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.include=\
\ \ \ \ --include=value,value,...
option-desc.include=\
\tA comma-delimited list of values. The valid values are: all*, usr,   \n\
\tminify. The usr option creates a package that contains the server    \n\
\tand application, but not the runtime. The default all option produces\n\
\ta client package that contains everything.
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.template=\
\ \ \ \ --template="templateName"
option-desc.template=\
\tSpecify the name of the template to use when creating a new client. 
#------------------------------\n at 72 chars -- leading tab-----------\n\#
option-key.autoAcceptSigner=\
\ \ \ \ --autoAcceptSigner
option-desc.autoAcceptSigner=\
\tAutomatically accept the server signer certificate and store it in   \n\
\tthe client truststore if the client does not trust the server.
