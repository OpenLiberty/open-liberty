/*******************************************************************************
 * Copyright (c) 2017, 2023 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

import org.apache.tools.ant.filters.ReplaceTokens
import groovy.json.*
import org.gradle.internal.os.OperatingSystem

import java.nio.charset.Charset
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

apply plugin: 'maven-publish'

def releaseVersion = "${bnd.libertyRelease}-" + rootProject.userProps.getProperty("version.qualifier")

def getBetaVersion() {
    def (year, major, minor, month) = "${bnd.libertyRelease}".tokenize('.')
    int new_month = month.toInteger() + 1
    if (new_month > 12) {
        new_month = 1
        int new_year = year.toInteger() + 1
        return "" + new_year + "." + major + "." + minor + "." + new_month
    }
    return year + "." + major + "." + minor + "." + new_month
}

def libertyBeta = rootProject.userProps.getProperty("betaVersionOverride") == null ? (getBetaVersion() + "-beta") : (rootProject.userProps.getProperty("betaVersionOverride") + "-beta")
def betaVersion = libertyBeta + "-" + rootProject.userProps.getProperty("version.qualifier")

task copyPropertiesToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp/lib/versions')
    include '*.properties'
    filter(ReplaceTokens,
           tokens: [PRODUCT_VERSION: bnd.libertyRelease, PRODUCT_EDITION: bnd.productEdition, PRODUCT_LICENSE_TYPE: bnd.productLicenseType])
}

task copyPublicKeyToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp/lib/versions/public_key')
    include 'libertyKey.asc'
}

task addServiceFingerprint() {

    // Create a File object representing the folder
    def folder = new File( "$projectDir/wlp/lib/versions" )

    if( !folder.exists() ) {
        folder.mkdirs()
    }
    new File(folder,"service.fingerprint").text = "\n${bnd.libertyRelease}"
}

task copyReadmeToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp')
    include 'README.TXT'
    filter(ReplaceTokens,
           tokens: [BUILD_ID: bnd.buildID, LIBERTY_VERSION: bnd.libertyRelease])
}

task copyLicenseToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp')
    include 'LICENSE'
    include 'NOTICES'
    filter(ReplaceTokens,
           tokens: [BUILD_ID: bnd.buildID, LIBERTY_VERSION: bnd.libertyRelease])
}

task copyBetaLicenseToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp')
    include 'BETA_NOTICES'
    filter(ReplaceTokens,
           tokens: [BUILD_ID: bnd.buildID, LIBERTY_VERSION: libertyBeta])
}

task copySwidTagToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp/lib/versions/tags')
    include 'ibm.com_Open_Liberty-*.swidtag'
    filter(ReplaceTokens,
           tokens: [ VERSION: bnd.libertyRelease ])
}

task copySwidFixpackTagToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp/lib/versions/tags')
    include 'ibm.com_Open_Liberty_release.swidtag'
    rename { filename ->
        filename.replace("_release", "-" + bnd.libertyRelease)
    }
    filter(ReplaceTokens,
           tokens: [PRODUCT_VERSION: bnd.libertyRelease])
}

task publishEmptyTemplatesFolders {
  dependsOn jar
  outputs.dirs(buildImage.file('wlp/templates/servers/defaultServer/apps'),
               buildImage.file('wlp/templates/servers/defaultServer/dropins'))
  doLast {
    buildImage.mkdir('wlp/templates/servers/defaultServer/apps')
    buildImage.mkdir('wlp/templates/servers/defaultServer/dropins')
  }
}

task publishTemplates (type:Copy) {
    dependsOn publishEmptyTemplatesFolders
    from project.file('publish/wlp/templates')
    into project.file('wlp/templates')
}

task publishExtract {
    dependsOn ':wlp.lib.extract:jar'
    doLast {
        copy {
            from(zipTree(new File(project(':wlp.lib.extract').buildDir, 'wlp.lib.extract.jar')))
            exclude 'META-INF/'
            into project.projectDir
        }
        copy {
            from(zipTree(new File(project(':wlp.lib.extract').buildDir, 'wlp.lib.extract.jar')))
            include 'META-INF/MANIFEST.MF'
            into project.file('wlp/lib/extract')
        }
    }
}

jar {
    dependsOn publishExtract
}

assemble {
    dependsOn publishTemplates
    dependsOn copyPropertiesToBuildImage
    dependsOn addServiceFingerprint
    dependsOn copyReadmeToBuildImage
    dependsOn copyBetaLicenseToBuildImage
    dependsOn copyLicenseToBuildImage
    dependsOn copySwidTagToBuildImage
    dependsOn copySwidFixpackTagToBuildImage
    dependsOn copyPublicKeyToBuildImage
}


def failOnError = false

configurations {
   updatePomClasspath
} 

dependencies {
   updatePomClasspath project(':wlp-updatePom') 
}

task updatePoms {
    dependsOn ':wlp-updatePom:jar'
    dependsOn parent.subprojects.assemble
    def updateClassName = "io.openliberty.build.update.pom.UpdatePomJars"
    def inputDir = project.file('wlp')
    def tmpDir = new File(project.buildDir, 'pomsTmp')


    doLast {      
            def myArgs = [
              inputDir, tmpDir, failOnError]                 
            javaexec {
                classpath configurations.updatePomClasspath
                mainClass = updateClassName
                args = myArgs
            }
        }
}

File packageDir = new File(project.buildDir, 'openliberty')

// Set the generated zip version to the product version and the
// version qualifier to be consistent
// with what is used for the individual Bundle-Versions
// as well as the server version output.


class PackageLibertyWithFeatures extends DefaultTask {
    @Internal
    Closure withFeatures
    @Internal
    Boolean completeFeatureList
    // packageServerConflict does not need to be set unless the list of features includes conflicting features
    //
    // It can be set to "true" to mean that the feature resolution logic will ignore singletons when there 
    // is a conflict.  A side effect of this is that if there is a conflict, the "preferred" version will 
    // be chosen (the version before the list of tolerates) which can choose the wrong private features.
    //
    // To solve the issues with the use of a value of "true", this property can be set to a comma separated
    // list of base symbolic names (the feature name without the hyphen and version number).
    @Internal
    String packageServerConflict
    // ?
    @OutputDirectory
    File outputTo
    @Internal
    Boolean isBeta

    @TaskAction
    void buildPackage() {
        // Create server in order to minify an image that only includes kind=ga features
        project.delete project.file('wlp/usr/servers/packageOpenLiberty')
        project.exec {
            workingDir project.file('wlp/bin')
            def args = ["create", "packageOpenLiberty"]
            if (OperatingSystem.current().windows) {
                commandLine = ["cmd", "/c", "server"] + args
            } else {
                commandLine = ["./server"] + args
            }
        }

        try {
            def serverXml = project.file("wlp/usr/servers/packageOpenLiberty/server.xml")
            serverXml.text = """<?xml version="1.0" encoding="UTF-8"?>
<server description="new server">
    <featureManager package.server.conflict="${packageServerConflict}">${withFeatures()}
    </featureManager>
</server>
"""

            File archive = new File(project.buildDir, 'openliberty.zip')
            project.delete archive
            project.exec {
                workingDir project.file('wlp/bin')
                def args = ["package", "packageOpenLiberty", "--archive=${archive}", "--include=minify"]
                if (completeFeatureList) { 
                    args.add("-Dinternal.minify.feature.list.complete=true") 
                }
                if (OperatingSystem.current().windows) {
                    commandLine = ["cmd", "/c", "server"] + args
                } else {
                    commandLine = ["./server"] + args
                }
            }

            // Postprocess to remove unwanted files
            project.delete outputTo
            project.copy {
                from project.zipTree(project.file(archive))
                exclude 'wlp/usr/servers/**'
                exclude 'wlp/lib/versions/package_*'
                into outputTo
            }

            //Now add the LICENSE file
            project.copy {
                from project.file('wlp')
                include 'LICENSE'
                into "$outputTo/wlp"
            }

            if(isBeta) {
                //Now add the BETA_NOTICES file
                project.copy {
                    from project.file('wlp')
                    include 'BETA_NOTICES'
                    into "$outputTo/wlp"
                }
            } else {
                //Now add the NOTICES file
                project.copy {
                    from project.file('wlp')
                    include 'NOTICES'
                    into "$outputTo/wlp"
                }
            }

        } catch (all) {
            println "-- EXCEPTION PACKAGING SERVER --"
            println all
            def messages = project.file("wlp/usr/servers/packageOpenLiberty/logs/messages.log")
            if (messages.exists()) {
                messages.eachLine { String line ->
                    println line
                }
            }
        }
    }
}

def testFeatures() {
    def testFeatures = []
    def tree = fileTree(dir: "$projectDir/wlp/lib/features", include: '*.mf')
    tree.each {
        Scanner scanner = new Scanner(it)
        String line
        while(scanner.hasNextLine()) {
            line = scanner.nextLine()
            if (line.indexOf("IBM-Test-Feature: true") != -1) {
                testFeatures.add(it.getName())
                break
            }
        }
    }
    testFeatures
}

def allFeatures() {
    String features = ""
    // Exec ./bin/productInfo featureInfo
    new ByteArrayOutputStream().withStream { os ->
        project.exec {
            workingDir project.file('wlp/bin')
            def args = ["featureInfo"]
            if (OperatingSystem.current().windows) {
                commandLine = ["cmd", "/c", "productInfo"] + args
            } else {
                commandLine = ["./productInfo"] + args
            }
            standardOutput = os
        }
        os.toString().eachLine {
            features += '<feature>' + it.substring(0, it.indexOf(' ')) + '</feature>\n'
        }
    }
    features
}

def gaPublicFeatures() {
    String features = ""
    gaFeatures(false).each {
        features += '<feature>' + it + '</feature>\n'
    }
    features
}

def gaAndBetaPublicFeatures() {
    String features = gaPublicFeatures()
    betaFeatures().each {
        features += '<feature>' + it + '</feature>\n'
    }
    features
}

def gaAndBetaAndNoShipPublicFeatures() {
    String features = gaAndBetaPublicFeatures()
    noShipFeatures().each {
        features += '<feature>' + it + '</feature>\n'
    }
    features
}

def webProfile8Features() { project.file("profiles/webProfile8/features.xml").readLines() }
def webProfile10Features() { project.file("profiles/webProfile10/features.xml").readLines() }
def javaee8Features() { project.file("profiles/javaee8/features.xml").readLines() }
def jakartaee10Features() { project.file("profiles/jakartaee10/features.xml").readLines() }
def microProfile4Features() { project.file("profiles/microProfile4/features.xml").readLines() }
def microProfile6Features() { project.file("profiles/microProfile6/features.xml").readLines() }

def getFeaturePath(feature) {
    def file = getFeaturePath(feature, "")
    file
}

def getFeaturePath(feature, suffix) {
    def file
    if (feature.endsWith(".mf")) {
        file = new File("$projectDir/wlp/lib/features/" + feature + suffix)
    } else {
        file = new File("$projectDir/wlp/lib/features/com.ibm.websphere.appserver." + feature + ".mf" + suffix)
        if(!file.exists()){
            file = new File("$projectDir/wlp/lib/features/io.openliberty." + feature + ".mf" + suffix)
        }
    }
    file
}
def removeFeature(feature) {
    def file = getFeaturePath(feature)
    def bakfile = new File(file.getPath()+".bak")
    file.renameTo(bakfile)
}

def restoreFeature(feature) {
    def bakfile = getFeaturePath(feature, ".bak")
    String path = bakfile.getPath()
    int idx = path.indexOf(".bak")
    def file = new File(path.substring(0,idx))
    bakfile.renameTo(file)
}

def excludedEE7Features = ['cdi-1.2',
                           'jsonp-1.0',
                           'jaxrs-2.0',
                           'jdbc-4.0',
                           'jdbc-4.1',
                           'jaxrsClient-2.0',
                           'servlet-3.1']

def replaceBetaVersionAndEdition(String pathname, String release, String beta) {
    Path path = Paths.get(pathname)
    Charset charset = StandardCharsets.UTF_8
    String content = new String(Files.readAllBytes(path), charset)
    content = content.replaceAll(release, beta)
    content = content.replaceAll("productEdition=Open", "productEdition=EARLY_ACCESS")
    Files.write(path, content.getBytes(charset))
}

if (isAutomatedBuild && !isIFIXBuild) {
    //NOSHIP
    task packageOpenLibertyAll(type: PackageLibertyWithFeatures) {
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&gaAndBetaAndNoShipPublicFeatures
        completeFeatureList = true
        outputTo new File(packageDir, "all")
    }

    //GA
    task packageOpenLiberty(type: PackageLibertyWithFeatures) {
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&gaPublicFeatures
        completeFeatureList = true
        outputTo new File(packageDir, "ga")
    }

    //BETA
    task packageOpenLibertyBeta(type: PackageLibertyWithFeatures) {
        enabled rootProject.userProps["ghe.build.type"] == null || !rootProject.userProps["ghe.build.type"].contains("ifix")
        dependsOn parent.subprojects.assemble
        dependsOn copyBetaLicenseToBuildImage
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&gaAndBetaPublicFeatures
        completeFeatureList = true
        outputTo new File(packageDir, "beta")
        isBeta = true
        doLast {
            ["$packageDir/beta/wlp/BETA_NOTICES","$packageDir/beta/wlp/README.TXT", "$packageDir/beta/wlp/lib/versions/openliberty.properties"].each { path ->
                replaceBetaVersionAndEdition(path, bnd.libertyRelease, libertyBeta)
            }
        }
    }

    //GA
    task packageOpenLibertyKernel(type: PackageLibertyWithFeatures) {
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures { '' }
        outputTo new File(packageDir, "kernel")
    }

    //GA
    task packageOpenLibertyWebProfile8(type: PackageLibertyWithFeatures) {
        doFirst {
            excludedEE7Features.each {
                this.&removeFeature("${it}")
            }
        }
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&webProfile8Features
        packageServerConflict = "true"
        outputTo new File(packageDir, "webProfile8")
        doLast {
            copy {
                from "$packageDir/webProfile8//wlp/templates/servers/webProfile8/server.xml"
                into "$packageDir/webProfile8/wlp/templates/servers/defaultServer"
            }
            copy {
                from "$packageDir/webProfile8/wlp/templates/clients/javaeeClient8/client.xml"
                into "$packageDir/webProfile8/wlp/templates/clients/defaultClient"
            }
            excludedEE7Features.each {
                this.&restoreFeature("${it}")
            }
        }
    }

    //GA
    task packageOpenLibertyJavaee8(type: PackageLibertyWithFeatures) {
        doFirst {
            excludedEE7Features.each {
                this.&removeFeature("${it}")
            }
        }

        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&javaee8Features
        packageServerConflict = "true"
        outputTo new File(packageDir, "javaee8")
        doLast {
            copy {
                from "$packageDir/javaee8/wlp/templates/servers/javaee8/server.xml"
                into "$packageDir/javaee8/wlp/templates/servers/defaultServer"
            }
            copy {
                from "$packageDir/javaee8/wlp/templates/clients/javaeeClient8/client.xml"
                into "$packageDir/javaee8/wlp/templates/clients/defaultClient"
            }
            excludedEE7Features.each {
                this.&restoreFeature("${it}")
            }
        }
    }
    
    //GA
    task packageOpenLibertyWebProfile10(type: PackageLibertyWithFeatures) {
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&webProfile10Features
        packageServerConflict = "com.ibm.websphere.appserver.sessionStore,com.ibm.websphere.appserver.jdbc,io.openliberty.microProfile,io.openliberty.mpConfig,io.openliberty.mpMetrics,io.openliberty.mpTelemetry,io.openliberty.org.eclipse.microprofile.config,io.openliberty.org.eclipse.microprofile.metrics,io.openliberty.mpCompatible"
        outputTo new File(packageDir, "webProfile10")
        doLast {
            copy {
                from "$packageDir/webProfile10/wlp/templates/servers/webProfile10/server.xml"
                into "$packageDir/webProfile10/wlp/templates/servers/defaultServer"
            }
            copy {
                from "$packageDir/webProfile10/wlp/templates/clients/jakartaeeClient10/client.xml"
                into "$packageDir/webProfile10/wlp/templates/clients/defaultClient"
            }
        }
    }
    
    //GA
    task packageOpenLibertyJakartaee10(type: PackageLibertyWithFeatures) {
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&jakartaee10Features
        packageServerConflict = "com.ibm.websphere.appserver.sessionStore,com.ibm.websphere.appserver.jdbc,io.openliberty.microProfile,io.openliberty.mpConfig,io.openliberty.mpMetrics,io.openliberty.mpTelemetry,io.openliberty.org.eclipse.microprofile.config,io.openliberty.org.eclipse.microprofile.metrics,io.openliberty.mpCompatible"
        outputTo new File(packageDir, "jakartaee10")
        doLast {
            copy {
                from "$packageDir/jakartaee10/wlp/templates/servers/jakartaee10/server.xml"
                into "$packageDir/jakartaee10/wlp/templates/servers/defaultServer"
            }
            copy {
                from "$packageDir/jakartaee10/wlp/templates/clients/jakartaeeClient10/client.xml"
                into "$packageDir/jakartaee10/wlp/templates/clients/defaultClient"
            }
        }
    }
    
    //GA
    task packageOpenLibertyMicroProfile4(type: PackageLibertyWithFeatures) {
        doFirst {
            excludedEE7Features.each {
                this.&removeFeature("${it}")
            }
        }
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&microProfile4Features
        packageServerConflict = "com.ibm.websphere.appserver.microProfile,com.ibm.websphere.appserver.mpHealth,com.ibm.websphere.appserver.org.eclipse.microprofile.health"
        outputTo new File(packageDir, "microProfile4")
        doLast {
            copy {
                from "$packageDir/microProfile4/wlp/templates/servers/microProfile4/server.xml"
                into "$packageDir/microProfile4/wlp/templates/servers/defaultServer"
            }
            excludedEE7Features.each {
                this.&restoreFeature("${it}")
            }
        }
    }
    
    //GA
    task packageOpenLibertyMicroProfile6(type: PackageLibertyWithFeatures) {
        dependsOn parent.subprojects.assemble
        dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
        withFeatures this.&microProfile6Features
        packageServerConflict = "io.openliberty.microProfile,io.openliberty.mpConfig,io.openliberty.mpMetrics,io.openliberty.mpTelemetry,io.openliberty.org.eclipse.microprofile.config,io.openliberty.org.eclipse.microprofile.metrics,io.openliberty.mpCompatible"
        outputTo new File(packageDir, "microProfile6")
        doLast {
            copy {
                from "$packageDir/microProfile6/wlp/templates/servers/microProfile6/server.xml"
                into "$packageDir/microProfile6/wlp/templates/servers/defaultServer"
            }
        }
    }
}

// Generate checksums
task genChecksums() {
    enabled !isIFIXBuild
    dependsOn parent.subprojects.assemble
    dependsOn updatePoms
    doLast {
        generateChecksums(ant)
        ant.calcChecksums(installRoot:'wlp') {}
    }
}

//NOSHIP: Includes all features. For use in development.
task zipOpenLibertyDev(type: Zip) {
    dependsOn parent.subprojects.assemble
    dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
    dependsOn genChecksums
    archiveBaseName = 'openliberty-dev'
    from projectDir
    include 'wlp/**'
    exclude 'wlp/usr/servers/**'
    destinationDirectory = distsDirectory
    archiveVersion = releaseVersion
}
publish.dependsOn zipOpenLibertyDev

if (isAutomatedBuild && !isIFIXBuild) {

    // NOSHIP: Includes all features except excluded features.
    task zipOpenLibertyAll(type: Zip) {
        dependsOn packageOpenLibertyAll
        dependsOn genChecksums
        archiveBaseName = 'openliberty-all'
        from(packageOpenLibertyAll)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyAllPackage(type: Delete) {
        dependsOn zipOpenLibertyAll
        delete(packageOpenLibertyAll)
    }
    publish.dependsOn cleanupOpenLibertyAllPackage

    // GA: Includes only kind=ga features.
    task zipOpenLiberty(type: Zip) {
        dependsOn packageOpenLiberty
        dependsOn genChecksums
        archiveBaseName = 'openliberty'
        from(packageOpenLiberty)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.runtime.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyPackage(type: Delete) {
        dependsOn zipOpenLiberty
        delete(packageOpenLiberty)
    }
    publish.dependsOn cleanupOpenLibertyPackage

    // GA: Includes only the kernel.
    task zipOpenLibertyKernel(type: Zip) {
        dependsOn packageOpenLibertyKernel
        dependsOn genChecksums
        archiveBaseName = 'openliberty-kernel'
        from(packageOpenLibertyKernel)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.kernel.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyKernelPackage(type: Delete) {
        dependsOn zipOpenLibertyKernel
        delete(packageOpenLibertyKernel)
    }
    publish.dependsOn cleanupOpenLibertyKernelPackage

    // GA: Includes only features listed in profiles/webProfile8/features.xml
    task zipOpenLibertyWebProfile8(type: Zip) {
        dependsOn packageOpenLibertyWebProfile8
        dependsOn genChecksums
        archiveBaseName = 'openliberty-webProfile8'
        from(packageOpenLibertyWebProfile8)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.webprofile8.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyWebProfile8Package(type: Delete) {
        dependsOn zipOpenLibertyWebProfile8
        delete(packageOpenLibertyWebProfile8)
    }
    publish.dependsOn cleanupOpenLibertyWebProfile8Package

    // GA: Includes only features listed in profiles/javaee8/features.xml
    task zipOpenLibertyJavaee8(type: Zip) {
        dependsOn packageOpenLibertyJavaee8
        dependsOn genChecksums
        archiveBaseName = 'openliberty-javaee8'
        from(packageOpenLibertyJavaee8)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.javaee8.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyJavaee8Package(type: Delete) {
        dependsOn zipOpenLibertyJavaee8
        delete(packageOpenLibertyJavaee8)
    }
    publish.dependsOn cleanupOpenLibertyJavaee8Package

    // GA: Includes only features listed in profiles/webProfile10/features.xml
    task zipOpenLibertyWebProfile10(type: Zip) {
        dependsOn packageOpenLibertyWebProfile10
        dependsOn genChecksums
        archiveBaseName = 'openliberty-webProfile10'
        from(packageOpenLibertyWebProfile10)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.webprofile10.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyWebProfile10Package(type: Delete) {
        dependsOn zipOpenLibertyWebProfile10
        delete(packageOpenLibertyWebProfile10)
    }
    publish.dependsOn cleanupOpenLibertyWebProfile10Package

    // GA: Includes only features listed in profiles/jakartaee10/features.xml
    task zipOpenLibertyJakartaee10(type: Zip) {
        dependsOn packageOpenLibertyJakartaee10
        dependsOn genChecksums
        archiveBaseName = 'openliberty-jakartaee10'
        from(packageOpenLibertyJakartaee10)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.jakartaee10.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyJakartaee10Package(type: Delete) {
        dependsOn zipOpenLibertyJakartaee10
        delete(packageOpenLibertyJakartaee10)
    }
    publish.dependsOn cleanupOpenLibertyJakartaee10Package

    // GA: Includes only features listed in profiles/microProfile4/features.xml
    task zipOpenLibertyMicroProfile4(type: Zip) {
        dependsOn packageOpenLibertyMicroProfile4
        dependsOn genChecksums
        archiveBaseName = 'openliberty-microProfile4'
        from(packageOpenLibertyMicroProfile4)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.microprofile4.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyMicroProfile4Package(type: Delete) {
        dependsOn zipOpenLibertyMicroProfile4
        delete(packageOpenLibertyMicroProfile4)
    }
    publish.dependsOn cleanupOpenLibertyMicroProfile4Package

    // GA: Includes only features listed in profiles/microProfile6/features.xml
    task zipOpenLibertyMicroProfile6(type: Zip) {
        dependsOn packageOpenLibertyMicroProfile6
        dependsOn genChecksums
        archiveBaseName = 'openliberty-microProfile6'
        from(packageOpenLibertyMicroProfile6)
        destinationDirectory = distsDirectory
        archiveVersion = releaseVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.microprofile6.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyMicroProfile6Package(type: Delete) {
        dependsOn zipOpenLibertyMicroProfile6
        delete(packageOpenLibertyMicroProfile6)
    }
    publish.dependsOn cleanupOpenLibertyMicroProfile6Package

    //BETA: Includes both kind=ga and kind=beta features.
    task zipOpenLibertyBeta(type: Zip) {
        dependsOn packageOpenLibertyBeta
        dependsOn genChecksums
        archiveBaseName = 'openliberty'
        from(packageOpenLibertyBeta)
        destinationDirectory = distsDirectory
        archiveVersion = betaVersion
        doLast {
            rootProject.userProps.setProperty('zipopenliberty.beta.archivename', archivePath.toString())
            rootProject.storeProps()
        }
    }

    task cleanupOpenLibertyBetaPackage(type: Delete) {
        dependsOn zipOpenLibertyBeta
        delete(packageOpenLibertyBeta)
    }
    publish.dependsOn cleanupOpenLibertyBetaPackage

    // Generate checksums
    task genZipChecksums() {
        dependsOn zipOpenLibertyDev
        dependsOn cleanupOpenLibertyAllPackage
        dependsOn cleanupOpenLibertyPackage
        dependsOn cleanupOpenLibertyKernelPackage
        dependsOn cleanupOpenLibertyWebProfile8Package
        dependsOn cleanupOpenLibertyJavaee8Package
        dependsOn cleanupOpenLibertyJakartaee10Package
        dependsOn cleanupOpenLibertyWebProfile10Package
        dependsOn cleanupOpenLibertyMicroProfile4Package
        dependsOn cleanupOpenLibertyMicroProfile6Package
        dependsOn cleanupOpenLibertyBetaPackage
        doLast {
          generateZipChecksums(ant)
          ant.calcZipChecksums(installRoot:"${distsDirectory}") {}
        }
    }   
    publish.dependsOn genZipChecksums

}

clean.doLast {
    file('wlp').deleteDir()
    file('build').deleteDir()
}

publishing {
    publications {
        openLibertyDev(MavenPublication) {
            artifactId 'openliberty'
            version project.version
            artifact zipOpenLibertyDev
        }
    }
}

if (isAutomatedBuild && !isIFIXBuild) {
    task zipTestReport(type: Zip) {
        archiveBaseName = 'openliberty_test_report'
        from cnf.file('generated/testReports/allUnitTests')
        destinationDirectory = cnf.file('generated/testReports')
        rootProject.userProps.setProperty('gradle.test.report.zip', archivePath.toString())
        rootProject.storeProps()
    }

    task createJSONForPublicArtifacts {
        enabled isAutomatedBuild
        dependsOn zipTestReport
        
        doLast {
            println "running createJSONForPublicArtifacts"
            delete "${buildDir}/info.json"
            File json = new File("${buildDir}/info.json")
            json.createNewFile()

            String testsPassed = "0"
            if (rootProject.userProps.getProperty("tests.total.successful") != null) {
                testsPassed = rootProject.userProps.getProperty("tests.total.successful")
                println "testsPassed is ${testsPassed}"
            }
            String testsTotal = "0"
            if ((rootProject.userProps.getProperty("tests.total.successful") != null) &&
                    (rootProject.userProps.getProperty("tests.total.failed") != null)) {
                def sum = Integer.valueOf(rootProject.userProps.getProperty("tests.total.successful")) + Integer.valueOf(rootProject.userProps.getProperty("tests.total.failed"))
                testsTotal = sum.toString()
                println "testsTotal is ${testsTotal}"
            }

            String junitPath = rootProject.userProps.getProperty("junit.report.zip")
            String testReportPath = rootProject.userProps.getProperty("gradle.test.report.zip");
            String logPath = rootProject.userProps.getProperty("published.gradle.log")
            String driverLocation = rootProject.userProps.getProperty("zipopenliberty.archivename")
            println "junitPath is ${junitPath}"
            println "testReportPath is ${testReportPath}"
            println "logPath is ${logPath}"
            println "driverLocation is ${driverLocation}"

            if (junitPath == null) {
                raise InvalidUserDataException("Could not find property named 'junit.report.zip'")
            }

            if (isPersonal && (testReportPath == null)) {
                raise InvalidUserDataException("Could not find property named 'gradle.test.report.zip'")
            }

            if (logPath == null) {
                raise InvalidUserDataException("Could not find property named 'published.gradle.log'")
            }

            if (driverLocation == null) {
                raise InvalidUserDataException("Could not find property named 'zipopenliberty.archivename'")
            }

            String testResultName = null
            if (isPersonal) {
                testResultName = new File(testReportPath).getName()
            } else {
                testResultName = new File(junitPath).getName()
            }
            println "testResultName is ${testResultName}"
            String logName = new File(logPath).getName()
            String driverLocationName = new File(driverLocation).getName()

            def object = [test_passed: "${testsPassed}",
                          total_tests: "${testsTotal}",
                          tests_log  : "${testResultName}",
                          build_log  : "${logName}"]

            if (isPersonal || isRelease || isContinuousBuild) {
                object.driver_location = "${driverLocationName}"
                object.version = "${project.version}"
            }

            json.text = JsonOutput.prettyPrint(JsonOutput.toJson(object))

            rootProject.userProps.setProperty('published.json', json.toString())
            println "json output is:"
            println json.toString()

            rootProject.storeProps()
        }
    }

    task gatherTestResults {
        dependsOn zipTestReport, createJSONForPublicArtifacts
    }

    if (isBuildOsNativePackages) {
        task copyOpenLiberty(type: Sync) {
            dependsOn zipOpenLiberty

            mkdir("packaging/tempPackagingDir")

            from zipOpenLiberty
            into 'packaging/tempPackagingDir'
        }

        task updateRulesTemplate(type: Copy) {
            from 'packaging'
            include 'rules.template'
            into 'packaging/debuild/openliberty/debian'
            filter { line -> line.replaceAll('@VERSION@', bnd.get('libertyServiceVersion', 'Unknown')) }
            rename { it.replace(".template", "") }
        }

        task buildOsNativePackages(type: Exec) {
	        description 'builds OS Native packages'

            dependsOn copyOpenLiberty
            dependsOn updateRulesTemplate

            workingDir 'packaging'
            environment "GPG_PASS", rootProject.userProps.getProperty('gpgPassphrase')
            mkdir("packaging/tempPackagingDir/tempTar")

            def rpms = file("./packaging/rpmbuild/RPMS/noarch/openliberty-" + bnd.get('libertyServiceVersion') + "-1.noarch.rpm")
            def debs = file("./packaging/debuild/openliberty_" + bnd.get('libertyServiceVersion') + "-1ubuntu1_all.deb")

            ZonedDateTime packageDate = ZonedDateTime.now();
            def formatter = java.time.format.DateTimeFormatter.ofPattern("E MMM d y", Locale.ENGLISH);
            def formattedRPMDate = packageDate.format(formatter)

            formatter = java.time.format.DateTimeFormatter.ofPattern("E, d MMM y hh:mm:ss Z", Locale.ENGLISH);
            def formattedDEBDate = packageDate.format(formatter);
	    

            inputs.dir('packaging/tempPackagingDir')
            outputs.file(rpms)
            outputs.file(debs)

            errorOutput = new ByteArrayOutputStream()

            commandLine 'sh', './buildOsNativePackages.sh', bnd.get('libertyServiceVersion'), isRelease, formattedRPMDate, formattedDEBDate

            ignoreExitValue true

            doLast {
                file('packaging/tempPackagingDir').deleteDir()
                file('packaging/rpmbuild/SPECS/openliberty.spec').delete()
                file('packaging/debuild/openliberty/debian/changelog').delete()
                file('packaging/debuild/openliberty/debian/rules').delete()
                if (executionResult.get().getExitValue() != 0) {
                    throw new GradleException("Script buildOsNativePackages.sh failed to run rpmbuild and debuild: " + errorOutput.toString())
                }
            }

        }
        publish.dependsOn buildOsNativePackages
    }
} 
