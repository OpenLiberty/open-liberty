/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

import org.apache.tools.ant.filters.ReplaceTokens

task copyPropertiesToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp/lib/versions')
    include '*.properties'
    filter(ReplaceTokens,
           tokens: [PRODUCT_VERSION: bnd.libertyRelease, PRODUCT_EDITION: bnd.productEdition, PRODUCT_LICENSE_TYPE: bnd.productLicenseType])
}

task copyReadmeToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp')
    include 'README.TXT'
    filter(ReplaceTokens,
           tokens: [BUILD_ID: bnd.buildID, LIBERTY_VERSION: bnd.libertyRelease])
}

task copyLicenseToBuildImage (type:Copy) {
    dependsOn jar
    from project.file('publish')
    into project.file('wlp')
    include 'LICENSE'
    include 'NOTICES'
    filter(ReplaceTokens,
           tokens: [BUILD_ID: bnd.buildID, LIBERTY_VERSION: bnd.libertyRelease])
}

assemble {
    dependsOn copyPropertiesToBuildImage
    dependsOn copyReadmeToBuildImage
    dependsOn copyLicenseToBuildImage
}

import groovy.json.*
import org.gradle.internal.os.OperatingSystem



File packageDir = new File(project.buildDir, 'openliberty')
def props = new Properties()
rootProject.file('generated.properties').withInputStream { props.load(it) }

// Set the generated zip version to the product version and the
// version qualifier to be consistent
// with what is used for the individual Bundle-Versions
// as well as the server version output.
def releaseVersion = "${bnd.libertyRelease}-" + props.getProperty("version.qualifier")

class PackageLibertyWithFeatures extends DefaultTask {
    Closure withFeatures
    File outputTo

    @TaskAction
    void buildPackage() {
        // Create server in order to minify an image that only includes kind=ga features
        project.delete project.file('wlp/usr/servers/packageOpenLiberty')
        project.exec {
            workingDir project.file('wlp/bin')
            def args = ["create", "packageOpenLiberty"]
            if (OperatingSystem.current().windows) {
                commandLine = ["cmd", "/c", "server"] + args
            } else {
                commandLine = ["./server"] + args
            }
        }

        try {
            def serverXml = project.file("wlp/usr/servers/packageOpenLiberty/server.xml")
            serverXml.text = """<?xml version="1.0" encoding="UTF-8"?>
<server description="new server">
    <featureManager>${withFeatures()}
    </featureManager>
</server>
"""

            File archive = new File(project.buildDir, 'openliberty.zip')
            project.delete archive
            project.exec {
                workingDir project.file('wlp/bin')
                def args = ["package", "packageOpenLiberty", "--archive=${archive}", "--include=minify"]
                if (OperatingSystem.current().windows) {
                    commandLine = ["cmd", "/c", "server"] + args
                } else {
                    commandLine = ["./server"] + args
                }
            }

            // Postprocess to remove unwanted files
            project.delete outputTo
            project.copy {
                from project.zipTree(project.file(archive))
                exclude 'wlp/usr/servers/**'
                exclude 'wlp/lib/versions/package_*'
                into outputTo
            }

            //Now add the NOTICES and LICENSE files
            project.copy {
                from project.file('publish')
                include 'LICENSE'
                include 'NOTICES'
                into "$outputTo/wlp"
            }

        } catch (all) {
            println "-- EXCEPTION PACKAGING SERVER --"
            println all
            def messages = project.file("wlp/usr/servers/packageOpenLiberty/logs/messages.log")
            if (messages.exists()) {
                messages.eachLine { String line ->
                    println line
                }
            }
        }
    }
}

def gaPublicFeatures() {
    String features = ""
    gaFeatures(true).each {
        features += '<feature>' + it + '</feature>\n'
    }
    features
}

def webProfile8Features() {
    String features = project.file('profiles/webProfile8/features.xml').readLines()
    features
}

def javaee8Features() {
    String features = project.file('profiles/javaee8/features.xml').readLines()
    features
}

task packageOpenLiberty(type: PackageLibertyWithFeatures) {
    enabled props["ghe.build.type"] == null || !props["ghe.build.type"].contains("ifix")
    dependsOn parent.subprojects.assemble
    dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
    withFeatures this.&gaPublicFeatures
    outputTo packageDir
}

task packageOpenLibertyKernel(type: PackageLibertyWithFeatures) {
    enabled props["ghe.build.type"] == null || !props["ghe.build.type"].contains("ifix")
    dependsOn parent.subprojects.assemble
    dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
    withFeatures { '' }
    outputTo packageDir
}

def removeFeature(feature) {
    def file = new File("$projectDir/wlp/lib/features/com.ibm.websphere.appserver." + feature + ".mf")
    file.renameTo(new File("$projectDir/wlp/lib/features/com.ibm.websphere.appserver." + feature + ".mf.bak"))
}

def restoreFeature(feature) {
    def file = new File("$projectDir/wlp/lib/features/com.ibm.websphere.appserver." + feature + ".mf.bak")
    file.renameTo(new File("$projectDir/wlp/lib/features/com.ibm.websphere.appserver." + feature + ".mf"))
}

def excludedFeatures = ['cdi-1.2',
                        'jsonp-1.0',
                        'jaxrs-2.0',
                        'jdbc-4.0',
                        'jdbc-4.1',
                        'jaxrsClient-2.0',
                        'servlet-3.1']

task packageOpenLibertyWebProfile8(type: PackageLibertyWithFeatures) {
    doFirst {
        excludedFeatures.each {
            this.&removeFeature("${it}")
        }
    }
    enabled props["ghe.build.type"] == null || !props["ghe.build.type"].contains("ifix")
    dependsOn parent.subprojects.assemble
    dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
    withFeatures this.&webProfile8Features
    outputTo packageDir
    doLast {
        copy {
            from "$packageDir/wlp/templates/servers/webProfile8/server.xml" 
            into "$packageDir/wlp/templates/servers/defaultServer" 
        }
        copy {
            from "$packageDir/wlp/templates/clients/javaeeClient8/client.xml"
            into "$packageDir/wlp/templates/clients/defaultClient" 
        }
        excludedFeatures.each {
            this.&restoreFeature("${it}")
        }
    }
}

task packageOpenLibertyJavaee8(type: PackageLibertyWithFeatures) {
    doFirst {
        excludedFeatures.each {
            this.&removeFeature("${it}")
        }
    }

    enabled props["ghe.build.type"] == null || !props["ghe.build.type"].contains("ifix")
    dependsOn parent.subprojects.assemble
    dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
    withFeatures this.&javaee8Features
    outputTo packageDir
    doLast {
        copy {
            from "$packageDir/wlp/templates/servers/javaee8/server.xml" 
            into "$packageDir/wlp/templates/servers/defaultServer" 
        }
        copy {
            from "$packageDir/wlp/templates/clients/javaeeClient8/client.xml"
            into "$packageDir/wlp/templates/clients/defaultClient" 
        }
        excludedFeatures.each {
            this.&restoreFeature("${it}")
        }
    }
}

// Includes only kind=ga features.
task zipOpenLiberty(type: Zip) {
    dependsOn packageOpenLiberty
    baseName 'openliberty'
    from packageDir
    destinationDir distsDir
    version releaseVersion
}
publish.dependsOn zipOpenLiberty

// Includes only kind=ga features.
task zipOpenLibertyKernel(type: Zip) {
    dependsOn packageOpenLibertyKernel
    baseName 'openliberty-kernel'
    from packageDir
    destinationDir distsDir
    version releaseVersion
}
publish.dependsOn zipOpenLibertyKernel

// Includes only kind=ga features.
task zipOpenLibertyWebProfile8(type: Zip) {
    dependsOn packageOpenLibertyWebProfile8
    baseName 'openliberty-webProfile8'
    from packageDir
    destinationDir distsDir
    version releaseVersion
}
publish.dependsOn zipOpenLibertyWebProfile8

// Includes only kind=ga features.
task zipOpenLibertyJavaee8(type: Zip) {
    dependsOn packageOpenLibertyJavaee8
    baseName 'openliberty-javaee8'
    from packageDir
    destinationDir distsDir
    version releaseVersion
}
publish.dependsOn zipOpenLibertyJavaee8

// Includes all features.
task zipOpenLibertyAll(type: Zip) {
    dependsOn parent.subprojects.assemble
    dependsOn ':com.ibm.websphere.appserver.features:publishFeatureResources'
    baseName 'openliberty-all'
    from projectDir
    include 'wlp/**'
    destinationDir distsDir
    version releaseVersion
    doLast {
        props.setProperty('zipopenliberty.archivename', archivePath.toString())
        File propsFile = rootProject.file('generated.properties')
        props.store(propsFile.newWriter(), null)
    }
}

clean.doLast {
    file('wlp').deleteDir()
    file('build').deleteDir()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'openliberty'
            version project.version
            artifact zipOpenLibertyAll
        }
    }
}

task createJSONForPublicArtifacts {
    enabled isAutomatedBuild

    doLast {
        delete "${buildDir}/info.json"
        File json = new File("${buildDir}/info.json")
        json.createNewFile()

        String testsPassed = "0"
        if (props.getProperty("tests.total.successful") != null) {
            testsPassed = props.getProperty("tests.total.successful")
        }
        String testsTotal = "0"
        if ((props.getProperty("tests.total.successful") != null) &&
                (props.getProperty("tests.total.failed") != null)) {
            def sum = Integer.valueOf(props.getProperty("tests.total.successful")) + Integer.valueOf(props.getProperty("tests.total.failed"))
            testsTotal = sum.toString()
        }

        String junitPath = props.getProperty("junit.report.zip")
        String logPath = props.getProperty("published.gradle.log")
        String driverLocation = props.getProperty("zipopenliberty.archivename")

        if (junitPath == null) {
            raise InvalidUserDataException("Could not find property named 'junit.report.zip'")
        }

        if (logPath == null) {
            raise InvalidUserDataException("Could not find property named 'published.gradle.log'")
        }

        if (driverLocation == null) {
            raise InvalidUserDataException("Could not find property named 'zipopenliberty.archivename'")
        }

        String testResultName = new File(junitPath).getName()
        String logName = new File(logPath).getName()
        String driverLocationName = new File(driverLocation).getName()

        def object = [test_passed: "${testsPassed}",
                      total_tests: "${testsTotal}",
                      tests_log: "${testResultName}",
                      build_log: "${logName}"]

        if (isRelease || isContinuousBuild) {
            object.driver_location = "${driverLocationName}"
            object.version = "${project.version}"
        }

        json.text = JsonOutput.prettyPrint(JsonOutput.toJson(object))

        props.setProperty('published.json', json.toString())

        File propsFile = new File('generated.properties')
        props.store(propsFile.newWriter(), null)
    }
}

buildscript {
    repositories {
        def properties = new Properties()
        rootProject.file('generated.properties').withInputStream { properties.load(it) }
        if (usrHomeProps.exists() && !properties.getProperty('artifactory.force.external.repo')) {
            maven {
                credentials {
                    username properties.getProperty("artifactory.download.user")
                    password properties.getProperty("artifactory.download.token")
                }
                url ("https://" + properties.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
            }
        } else {
            jcenter()
        }
    }

    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
        classpath 'org.hidetake:groovy-ssh:2.9.0'
        classpath 'com.jcraft:jsch:0.1.54'
    }
}

apply plugin: 'org.hidetake.ssh'

remotes {
    dhe {
        host = props.getProperty("dhe.server")
        user = props.getProperty("dhe.user")
        password = props.getProperty("dhe.password")
        knownHosts = allowAnyHosts
    }
}

ssh.settings {
    jschLog = true
    fileTransfer = "scp"
}

task publishPublicArtifactsOnDhe {
    dependsOn createJSONForPublicArtifacts
    enabled isAutomatedBuild && isPublicPublishing

    doLast {
        // Re-arrange buildLabel, ex: 201708101600 to 2017-08-10_1600
        def (yr, mo, d, t) = [bnd.buildLabel.substring(0,4), bnd.buildLabel.substring(4,6), bnd.buildLabel.substring(6,8), bnd.buildLabel.substring(8)]
        String version = "${yr}-${mo}-${d}_${t}"
        String packageName = null
        if (isRelease) {
            packageName = props.getProperty("published.package.nightly")
        } else {
            packageName = props.getProperty("published.package.personal")
            version = props.getProperty("buildResultUUID")
        }

        String userAtHost = props.getProperty("dhe.user") + "@" + props.getProperty("dhe.server")
        String dir = "/www/stage/export/pub/software/openliberty/runtime"
        String publicDHEUrl = "http://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime"
        String dest = userAtHost + ":" + dir

        def artifactList = [props.getProperty("published.json"),
                            props.getProperty("published.gradle.log"),
                            props.getProperty("junit.report.zip")]

        if (isContinuousBuild || isRelease) {
            artifactList.add(props.getProperty("zipopenliberty.archivename"))
        }

        mkdir("${buildDir}/${version}")
        artifactList.each { filePath ->
            copy {
                from filePath
                into "${buildDir}/${version}"
            }
        }

        // Upload build artifacts
        ssh.run {
            session(remotes.dhe) {
                put from: "${buildDir}/${version}", into: "${dir}/${packageName}/"
            }
        }

        delete "${buildDir}/${version}"
        delete "${buildDir}/info.json"

        if (isContinuousBuild || isRelease) {
            // Update build listing json with the newly uploaded build
            exec {
                commandLine "curl", "-o", "${buildDir}/info.json", "${publicDHEUrl}/${packageName}/info.json"
            }

            File json = new File("${buildDir}/info.json")
            if (json.getText().contains("404 Not Found")) {
                json.text = ""
            }

            def object = [:]
            if (json.getText() != "") {
                object = new JsonSlurper().parseText(json.getText())
            }

            List versionsList = object['versions']
            if (versionsList != null) {
                versionsList.add("${version}")
            } else {
                versionsList = ["${version}"]
            }
            object['versions'] = versionsList
            json.text = JsonOutput.toJson(object)

            ssh.run {
                session(remotes.dhe) {
                    put from: "${buildDir}/info.json", into: "${dir}/${packageName}/"
                }
            }
        }
    }
}
