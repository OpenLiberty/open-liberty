/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
/* Generated By:JavaCC: Do not edit this line. JSParserTokenManager.java */
package com.ibm.ws.sib.mfp.jmf.parser;

public class JSParserTokenManager implements JSParserConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffe400L) != 0L)
         {
            jjmatchedKind = 66;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x38000000000L) != 0L)
            return 1;
         if ((active0 & 0xffffc7fffffe400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1100000000000L) != 0L)
            return 1;
         if ((active0 & 0xffeef7fffffe400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0xc04802002380000L) != 0L)
            return 1;
         if ((active0 & 0x3fa7f5ffdc7e400L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 3;
            }
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0xbf87c5dbd0ee400L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x402030240c10000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x3f8781d984cc400L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 5;
            }
            return 1;
         }
         if ((active0 & 0x800064025022000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x3f86805994c0000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return 1;
         }
         if ((active0 & 0x10180000c400L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x3f8600119400000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x814800c0000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x3f8600110400000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x9000000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x3f8600110000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x400000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x3d8600110000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 10;
            return 1;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 1;
         return -1;
      case 11:
         if ((active0 & 0x348600100000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 11;
            return 1;
         }
         if ((active0 & 0x90000010000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x240000000000000L) != 0L)
            return 1;
         if ((active0 & 0x108600100000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x108600100000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x100400000000000L) != 0L)
            return 1;
         if ((active0 & 0x8200100000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x100000000L) != 0L)
            return 1;
         if ((active0 & 0x8200000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x8200000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 42:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 44:
         return jjStopAtPos(0, 1);
      case 58:
         return jjStopAtPos(0, 2);
      case 60:
         return jjStopAtPos(0, 11);
      case 62:
         return jjStopAtPos(0, 12);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x38000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x7880000000L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 91:
         return jjStopAtPos(0, 8);
      case 93:
         return jjStopAtPos(0, 9);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000020000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc04000010004000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2e8000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x7c00000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1100000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800400000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8600100000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000002000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200100000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xf0000000000000L);
      case 123:
         return jjStopAtPos(0, 5);
      case 124:
         return jjStopAtPos(0, 6);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 68:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30002000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x1805000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0040000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2410280000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400008008000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2f1100020000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x108a00300024000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0xc04000000000400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0xc1880000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x42000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000100000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8a00400000400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000005014000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x100042000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1f0000010000000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc04100000280000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000020000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x404000c50400L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 1);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc00100210080000L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1f000000000a000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L);
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 56:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 1);
         break;
      case 70:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 75:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0080080000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000004000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0xf0100000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000008000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000008400L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x100400005040000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 1);
         break;
      case 52:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000L);
      case 73:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80080000000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 83:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 1);
         break;
      case 89:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000c000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 103:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 104:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1004000000c0400L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0xf0000008000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 78:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000008000000L);
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0xf0000000000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200100000000L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x440000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 1);
         break;
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x100400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         break;
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 1);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0xf0000000000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x100400000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8200000000000L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x120400000000000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000100000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8200000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 27, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x120400000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x8200000000000L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8200000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 53, 1);
         return jjMoveStringLiteralDfa11_0(active0, 0x180400000000000L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x8200000000000L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 55, 1);
         return jjMoveStringLiteralDfa12_0(active0, 0x100400000000000L);
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 52, 1);
         break;
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 28, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 57, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x100400000000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x8200000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 54, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x100400000000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x8200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x8200000000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 46, 1);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 56, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(15, 32, 1);
         return jjMoveStringLiteralDfa16_0(active0, 0x8200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x8200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 45, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 51, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 3:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 4:
                  if (curChar == 47)
                     jjCheckNAddStates(2, 4);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 7:
                  if (curChar == 10 && kind > 64)
                     kind = 64;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 42)
                     jjCheckNAddStates(5, 7);
                  break;
               case 12:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 13:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 14:
                  if (curChar == 47 && kind > 65)
                     kind = 65;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  jjAddStates(2, 4);
                  break;
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  jjCheckNAddTwoStates(13, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 4);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 9, 5, 6, 8, 11, 12, 14, 
};
public static final String[] jjstrLiteralImages = {
"", "\54", "\72", "\52\50", "\51\52", "\173", "\174", "\175", "\133", "\135", 
"\104\171\156\141\155\151\143", "\74", "\76", "\163\164\162\151\156\147", "\142\157\157\154\145\141\156", 
"\144\145\143\151\155\141\154", "\146\154\157\141\164", "\144\157\165\142\154\145", 
"\144\165\162\141\164\151\157\156", "\144\141\164\145\124\151\155\145", "\164\151\155\145", "\144\141\164\145", 
"\147\131\145\141\162\115\157\156\164\150", "\147\131\145\141\162", "\147\115\157\156\164\150\104\141\171", 
"\147\104\141\171", "\147\115\157\156\164\150", "\150\145\170\102\151\156\141\162\171", 
"\142\141\163\145\66\64\102\151\156\141\162\171", "\141\156\171\125\122\111", "\121\116\141\155\145", 
"\116\117\124\101\124\111\117\116", "\156\157\162\155\141\154\151\172\145\144\123\164\162\151\156\147", 
"\164\157\153\145\156", "\154\141\156\147\165\141\147\145", "\116\115\124\117\113\105\116", 
"\116\115\124\117\113\105\116\123", "\116\141\155\145", "\116\103\116\141\155\145", "\111\104", 
"\111\104\122\105\106", "\111\104\122\105\106\123", "\105\116\124\111\124\131", 
"\105\116\124\111\124\111\105\123", "\151\156\164\145\147\145\162", 
"\156\157\156\120\157\163\151\164\151\166\145\111\156\164\145\147\145\162", "\156\145\147\141\164\151\166\145\111\156\164\145\147\145\162", 
"\154\157\156\147", "\151\156\164", "\163\150\157\162\164", "\142\171\164\145", 
"\156\157\156\116\145\147\141\164\151\166\145\111\156\164\145\147\145\162", "\165\156\163\151\147\156\145\144\114\157\156\147", 
"\165\156\163\151\147\156\145\144\111\156\164", "\165\156\163\151\147\156\145\144\123\150\157\162\164", 
"\165\156\163\151\147\156\145\144\102\171\164\145", "\160\157\163\151\164\151\166\145\111\156\164\145\147\145\162", 
"\141\156\171\123\151\155\160\154\145\124\171\160\145", "\142\171\164\145\70", "\142\171\164\145\61\62", null, null, null, null, null, 
null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffffL, 0x14L, 
};
static final long[] jjtoSkip = {
   0xf000000000000000L, 0x3L, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[15];
private final int[] jjstateSet = new int[30];
protected char curChar;
public JSParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JSParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
