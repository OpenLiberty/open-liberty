<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c)  2015, 2016 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 -->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
<h:head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <title>JSF20 EL Operator test.</title>
</h:head>
<f:view>
<h:body>
    <h:form id="form1" prependId="false">
        <h:outputScript name="jsf.js" library="javax.faces" target="head" />

        <br>
        	<!-- Get all the elements greater or  equal than 3 -->
        	Map: <h:outputText id="out1" value="#{mapbean.map.stream().filter(e -> e >= 3).toList()}" />
        </br>
        				
        <br>
            <!-- Flat the list -->
        	FlatMap: <h:outputText id="out2" value="#{[[1, 4], [3], [2], [5, 3, 1]].stream().flatMap(e -> e.stream()).toList()}" />
         </br>
    
         <br>
        	<!-- Get distinct values from the list -->
        	Distinct: <h:outputText id="out3" value="#{mapbean.map.stream().distinct().toList()}" />
         </br>
         
         <br>
         	<!-- Sort the list in decreasing order -->
        	Sorted in Decreasing: <h:outputText id="out4" value="#{mapbean.map.stream().sorted((i, j) -> j-i).toList()}" />
         </br>     

        <br>
        	<!-- Get the first 3 elements in the list -->
        	Limit: <h:outputText id="out5" value="#{mapbean.map.stream().limit(3).toList()}" />
        </br>
 
         <br>
         	<!-- Get a sub list out of the entire list -->
        	Substream: <h:outputText id="out6" value="#{mapbean.map.stream().substream(2, 4).toList()}" />
         </br>
    
         <br>
         	<!-- Get a list containing the elements of the source stream-->
        	ToList: <h:outputText id="out7" value="#{mapbean.map.stream().toList()}" />
         </br>
         
         <br>
         	<!-- Find the largest number in the list -->
        	Reduce: <h:outputText id="out8" value="#{mapbean.map.stream().reduce((p, q) -> p > q ? p:q).get()}" />
         </br>
         
         <br>
         	<!-- Find the maximum number in the list -->
        	Max: <h:outputText id="out9" value="#{mapbean.map.stream().max().get()}" />
         </br> 
         
        <br>
       		<!-- Find the minimum number in the list -->
        	Min: <h:outputText id="out10" value="#{mapbean.map.stream().min().get()}" />
        </br>
 
         <br>
        	<!-- Find the average value of the list -->
        	Average: <h:outputText id="out11" value="#{mapbean.map.stream().average().get()}" />
         </br> 
         
        <br>
       		<!-- Find the sum of the list -->
        	Sum: <h:outputText id="out12" value="#{mapbean.map.stream().sum()}" />
        </br>
        
       
        <br>
        	<!-- Find the amount of element in the list -->
        	Count: <h:outputText id="out13" value="#{mapbean.map.stream().count()}" />
        </br> 
         
        <br>
        	<!-- Check if the list contains any element smaller than 2 -->
        	AnyMatch: <h:outputText id="out14" value="#{mapbean.map.stream().anyMatch(e -> e &lt; 2).orElse(false)}" /> 
        </br>

        <br>
        	<!-- Check if the all the elements in the list are smaller than 4  -->
	        AllMatch: <h:outputText id="out15" value="#{mapbean.map.stream().noneMatch(e -> e &lt; 4).orElse(false)}" /> 
         </br> 
         
        <br>
        	<!-- Check if the none of the elements are greater than 5 -->
        	NoneMatch: <h:outputText id="out16" value="#{mapbean.map.stream().noneMatch(e -> e > 5).orElse(false)}" />
        </br>
        
        <br>
        	<!-- Get the first element of the list -->
        	FindFirst: <h:outputText id="out17" value="#{mapbean.map.stream().findFirst().get()}" />
         </br> 

               
    </h:form>
</h:body>
</f:view>
</html>




