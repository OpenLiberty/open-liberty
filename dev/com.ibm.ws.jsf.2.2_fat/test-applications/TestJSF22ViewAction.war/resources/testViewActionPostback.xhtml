<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c) 2015, 2019 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- 
Test the viewAction attribute onPostback.  This test will first reset the counter in the first viewAction call to a value of zero.
The second viewAction will increment a counter on both an initial page load and also on a postback.  Therefore, when the page loads 
for the first time, the counter will be set to zero (0), but then also incremented to one (1) at the initial rendering.  By clicking the
command button on the page will result in a postback call, and we should see the counter increment to two (2) because the bean's incrementCounter method 
was called (because of the postback attribute), but the resetCounter method was not called (because by default viewActions are not called on postbacks.</p>
-->         
  <html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
    <h:head>
        <title>ViewAction postback test</title>
    </h:head>
	<f:metadata>
		<f:viewAction action="#{numberBean.resetCounter}"/>
		<f:viewAction action="#{numberBean.incrementCounter}" onPostback="true"/>	
	</f:metadata>	
    
    <h:body>
        <h:form id="form1">
			<p>Postback: <h:outputText id="postBackCheck" value="#{numberBean.postback}" /></p>
			<p>Count: <h:outputText id="countDislay" value="#{numberBean.count}"/></p>
			<p><h:commandButton id="countButton" value="Increment Counter"/></p>			
        </h:form>
    </h:body>
</html>