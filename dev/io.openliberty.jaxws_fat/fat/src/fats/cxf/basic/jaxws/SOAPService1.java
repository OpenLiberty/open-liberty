/*******************************************************************************
 * Copyright (c) 2024 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 *******************************************************************************/
package fats.cxf.basic.jaxws;

//import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.2
 * 2012-09-12T14:31:54.917-05:00
 * Generated source version: 2.6.2
 *
 */
@WebServiceClient(name = "SOAPService1",
                  wsdlLocation = "SimpleWebSvc.wsdl",
                  targetNamespace = "http://jaxws.basic.cxf.fats")
public class SOAPService1 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://jaxws.basic.cxf.fats", "SOAPService1");
    public final static QName SoapPort1 = new QName("http://jaxws.basic.cxf.fats", "SoapPort1");
    static {
        URL url = SOAPService1.class.getResource("SimpleWebSvc.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(SOAPService1.class.getName()).log(java.util.logging.Level.INFO,
                                                                                 "Can not initialize the default wsdl from {0}", "SimpleWebSvc.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SOAPService1(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SOAPService1(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SOAPService1() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     *
     * @return
     *         returns SimpleService
     */
    @WebEndpoint(name = "SoapPort1")
    public SimpleService getSoapPort1() {
        return super.getPort(SoapPort1, SimpleService.class);
    }

    /**
     *
     * @param features
     *            A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in the <code>features</code> parameter will have their default
     *            values.
     * @return
     *         returns SimpleService
     */
    @WebEndpoint(name = "SoapPort1")
    public SimpleService getSoapPort1(WebServiceFeature... features) {
        return super.getPort(SoapPort1, SimpleService.class, features);
    }

}
