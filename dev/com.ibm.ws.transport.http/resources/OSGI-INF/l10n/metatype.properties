###############################################################################
# Copyright (c) 2011, 2018 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
#CMVCPATHNAME com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties
#ISMESSAGEFILE FALSE
#NLS_ENCODING=UNICODE
#NLS_MESSAGEFORMAT_NONE
#

onError.name=On error
onError.desc=Action to take after a failure to start an endpoint. 
onError.warn=The server will issue warning and error messages if it fails to start an endpoint. 
onError.fail=The server will issue warning and error messages if it fails to start an endpoint and then will stop.
onError.ignore=The server will not issue any warning or error messages when an endpoint fails to start.

virtualHost.name=Virtual Host
virtualHost.desc=A virtual host provides a logical grouping for configuring web applications to a particular host name. The default virtual host (default_host) is suitable for most simple configurations.

virtualHost.enabled=Enabled
virtualHost.enabled.desc=Enable this virtual host.

virtualHost.hostAlias=Virtual host alias
virtualHost.hostAlias.desc=Associate a host and port with this virtual host, using the host:port syntax. \
 The specified host can be an IP address, domain name server (DNS) hostname with a domain name suffix, the DNS hostname, \
 or * for a wildcard match on all hostnames. Note that IPv6 addresses must be enclosed in [].

virtualHost.allowFromEndpoint=Allow From Endpoints
virtualHost.allowFromEndpoint$Ref=Allow from endpoints
virtualHost.allowFromEndpoint.desc=Specify the identifier of one or more HTTP endpoints to restrict inbound traffic for \
 this virtual host to the specified endpoints.

http.endpoint=HTTP Endpoint
http.endpoint.desc=Configuration properties for an HTTP endpoint.

endpoint.host=Host
endpoint.host.desc=IP address, domain name server (DNS) host name with domain name suffix, or just the DNS host name, used by a client to request a resource. Use '*' for all available network interfaces.

endpoint.enabled=Enabled
endpoint.enabled.desc=Toggle the availability of an endpoint. When true, this endpoint will be activated by the dispatcher to handle HTTP requests.

endpoint.httpPort=Port
endpoint.httpPort.desc=The port used for client HTTP requests. Use -1 to disable this port.

endpoint.httpsPort=Secure port
endpoint.httpsPort.desc=The port used for client HTTP requests secured with SSL (https). Use -1 to disable this port.

endpoint.virtualHost=Virtual host
endpoint.virtualHost.desc=ID of a configured virtual host. All endpoints are associated with the 'default_host' virtual host by default. 

endpoint.tcpOptions=TCP Options
endpoint.tcpOptions$Ref=TCP options reference
endpoint.tcpOptions.desc=TCP protocol options for the endpoint. 

endpoint.sslOptions=SSL Options 
endpoint.sslOptions$Ref=SSL options reference
endpoint.sslOptions.desc=SSL protocol options for the endpoint.

endpoint.httpOptions=HTTP Options
endpoint.httpOptions$Ref=HTTP options reference
endpoint.httpOptions.desc=HTTP protocol options for the endpoint.

endpoint.remoteIp=Remote IP Options
endpoint.remoteIp$Ref=Remote IP options reference
endpoint.remoteIp.desc=Remote IP options for the endpoint.

endpoint.accessLog=HTTP Access Logging
endpoint.accessLog$Ref=HTTP access logging reference
endpoint.accessLog.desc=HTTP access logging configuration for the endpoint.

http.remoteip=Remote IP Options
http.remoteip.desc=An element configured within the httpEndpoint element so that the associated HTTP channel is enabled to consider X-Forwarded-* or Forwarded request headers.

http.remoteip.proxies=Proxies regex
http.remoteip.proxies.desc=A regular expression that defines trusted proxies.

http.remoteip.useRemoteIpInAccessLog=Use remote IP in access log
http.remoteip.useRemoteIpInAccessLog.desc=If this property is set to true and the remote client information was verified by the HTTP Channel, the NCSA access log reflects the Forwarded or X-Forwarded-* headers. These headers are reflected when one or more of the following items are recorded: the remote client IP, the host, or the request protocol.

http.options=HTTP Options
http.options.desc=HTTP protocol configuration.

http.keepAlive=Enable persistent connections
http.keepAlive.desc=Enables persistent connections (HTTP keepalive). If true, connections are kept alive for reuse by multiple sequential requests and responses. If false, connections are closed after the response is sent.    

http.maxKeepAliveRequests=Maximum persistent requests per connection
http.maxKeepAliveRequests.desc=Maximum number of persistent requests that are allowed on a single HTTP connection if persistent connections are enabled. A value of -1 means unlimited.  

http.noCacheCookiesControl=No cache cookies control
http.noCacheCookiesControl.desc=Allows the user to control whether or not the presence of a Set-Cookie header should update the Cache-Control header with a matching no-cache value. This also adds the Expires header.

http.persistTimeout=Persistent connection timeout
http.persistTimeout.desc=Amount of time that a socket will be allowed to remain idle between requests. This setting only applies if persistent connections are enabled. 

http.readTimeout=Read timeout
http.readTimeout.desc=Amount of time to wait for a read request to complete on a socket after the first read occurs. 

http.writeTimeout=Write timeout
http.writeTimeout.desc=Amount of time to wait on a socket for each portion of the response data to be transmitted. 

http.removeServerHeader=Remove server header
http.removeServerHeader.desc=Removes server implementation information from HTTP headers and also disables the default Liberty profile welcome page.

http.limitNumHeaders=Limit number of headers
http.limitNumHeaders.desc=Limits the number of HTTP headers that can exist in an incoming message. When this limit is exceeded, an error is returned to the remote client.

http.limitFieldSize=Limit header field size
http.limitFieldSize.desc=Enforces the size limits on various HTTP fields, such as request URLs, or individual header names or values. Enforcing the size limits of these fields guards against possible Denial of Service attacks. An error is returned to the remote client, if a field exceeds the allowed size.

http.doNotAllowDuplicateSetCookies=Do not allow duplicate set cookies
http.doNotAllowDuplicateSetCookies.desc=Prevents the HTTP Channel from sending multiple Set-Cookie headers with the same name.

http.messageSizeLimit=Message size limit
http.messageSizeLimit.desc= Limits the acceptable size of an incoming message. If a message arrives with a size larger than this value, then an error is returned to the remote client.

http.incomingBodyBufferSize=Incoming body buffer size
http.incomingBodyBufferSize.desc=Specifies the size of each buffer used when reading the body of an incoming HTTP message.

http2.connectionIdleTimeout=HTTP/2 connection idle timeout
http2.connectionIdleTimeout.desc=Specifies the amount of time, in seconds, that an HTTP/2 connection will be allowed to remain idle between socket IO operations. If not specified, or set to a value of 0, there is no connection timeout set.

http2.maxConcurrentStreams=Max concurrent streams
http2.maxConcurrentStreams.desc=Specifies the maximum number of streams that an HTTP/2 connection can have active at any given point. Opening streams over the limit, will result on a REFUSED_STREAM (0x7). If not specified, the default value of concurrent streams will be set to 200.

http2.maxFrameSize=Max frame size
http2.maxFrameSize.desc=Specifies the maximum allowed size of a frame payload the server will advertise in the SETTINGS_MAS_FRAME_SIZE HTTP/2 settings frame. This can be configured to any size within the range of 16,384 to 16,777,215 bytes, inclusive. If not specified, the default is set to 57,344 bytes.

log.access=HTTP Access Logging
log.access.desc=HTTP access logs contain a record of all inbound HTTP client requests.

log.access.enabled=Enabled
log.access.enabled.desc=Enable access logging.

log.access.filePath=Log file path
log.access.filePath.desc=Directory path and name of the access log file. Standard variable substitutions, such as ${server.output.dir}, can be used when specifying the directory path.

log.access.logFormat=Format
log.access.logFormat.desc=Specifies the log format that is used when logging client access information.

log.access.max.file.size=Maximum log file size
log.access.max.file.size.desc=Maximum size of a log file, in megabytes, before being rolled over; a value of 0 means no limit.

log.access.max.files=Maximum log files
log.access.max.files.desc=Maximum number of log files that will be kept, before the oldest file is removed; a value of 0 means no limit.

http.dispatcher=HTTP Dispatcher
http.dispatcher.desc=HTTP Dispatcher configuration.

dispatcher.trustedHeaderOrigin=Trusted private header origin
dispatcher.trustedHeaderOrigin.desc=Private headers are used by the web server plug-in to provide information about the original \
 request. These headers take precedence over the http Host header, and are used to select a virtual host to service a request. The \
 default value is '*', which will trust incoming private headers from any source. Specify 'none' to disable private headers and rely \
 only on the http Host header, or specify a list of IP addresses to restrict private header processing to specific trusted sources.

dispatcher.trustedSensitiveHeaderOrigin=Trusted sensitive private header origin
dispatcher.trustedSensitiveHeaderOrigin.desc=Private headers are used by the web server plug-in to provide information about the original \
request. A subset of these headers are considered sensitive. By default, the value for this property is 'none'. Incoming, sensitive private \
headers are not trusted from any source. Specify a comma-separated list of IP addresses, such as {1.1.2.2, F:FF:FFF:FFFF:1:11:111:1111} to allow \
sensitive private header processing for specific trusted sources, or specify '*' to trust incoming sensitive private headers from any source.

appOrContextRootMissingMessage=Message when application can not be found
appOrContextRootMissingMessage.desc=Message to return to the client when the application in the requested URI can not be found.

padAppOrContextRootMissingMessage=When an application cannot be found, pad the message output to 512 bytes.
padAppOrContextRootMissingMessage.desc=If the message that returns to the client when the application in the requested URI cannot \
be found is less the 512 bytes, a comment is added to the end of the message to make it at least 512 bytes.

enableWelcomePage=Enable welcome page
enableWelcomePage.desc=Enables the default Liberty profile welcome page when no application is bound to a context root of "/".  The default value is true.
#HttpProxyRedirect
http.proxyredirect=HTTP Proxy Redirect
http.proxyredirect.desc=Configures port redirection. HTTP Proxy Redirect is used when redirecting HTTP requests from a non-secure port (for example, 80) to an SSL-enabled secured port (for example, 443).

http.proxyredirect.enabled=Enabled
http.proxyredirect.enabled.desc=This attribute determines whether or not the server should redirect ports that are specified in this configuration element. The default is true.

http.proxyredirect.host=Host
http.proxyredirect.host.desc=The host name used for this proxy redirect. The server redirects HTTP requests only if the incoming request specifies a host name that matches this value. The default is * (all hosts).

http.proxyredirect.httpPort=HTTP port
http.proxyredirect.httpPort.desc=The (non-secure) port to redirect from. Incoming HTTP requests on this port are redirected to the specified HTTPS port.

http.proxyredirect.httpsPort=HTTPS port
http.proxyredirect.httpsPort.desc=The (secure) port to redirect to. Incoming HTTP requests that use the HTTP port are redirected to this port.

http.autoDecompression=Auto decompression
http.autoDecompression.desc=Specifies whether the HTTP Channel automatically decompresses incoming request body data.
