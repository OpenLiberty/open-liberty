 <flow xmlns="http://www.springframework.org/schema/webflow"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
       parent="intercept.abstract">

    <!-- Rudimentary impediment to direct execution of subflow. -->
    <input name="calledAsSubflow" type="boolean" required="true" />

    <action-state id="TermsOfUseSetup">
        <evaluate expression="InitializeConsentContext" />
        <evaluate expression="PopulateConsentContext" />
        <evaluate expression="PopulatePreConsentAuditContext" />
        <evaluate expression="ReadConsentFromStorage" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="IsConsentRequired" />
    </action-state>
    
   <decision-state id="IsConsentRequired">
        <if test="IsConsentRequiredPredicate.apply(opensamlProfileRequestContext)" then="DisplayTermsOfUsePage" else="proceed" />
    </decision-state>

    <view-state id="DisplayTermsOfUsePage" view="#{flowRequestContext.activeFlow.id}">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext), true).getSubcontext(T(net.shibboleth.idp.ui.context.RelyingPartyUIContext))" result="viewScope.rpUIContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.consent.context.impl.ConsentContext)).getCurrentConsents().keySet().iterator().next()" result="viewScope.termsOfUseId" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom" />
        </on-render>
        <transition on="TermsRejected" to="AuditTermsRejected" />
        <transition on="proceed" to="TestForCheckbox" />
    </view-state>
    
    <decision-state id="TestForCheckbox">
        <if test="requestParameters._shib_idp_consentIds != null" then="ExtractConsent" else="RequireCheckbox" />
    </decision-state>
    
    <action-state id="RequireCheckbox">
        <evaluate expression="true" result="flowScope.requireCheckbox" />
        <transition to="DisplayTermsOfUsePage" />
    </action-state>
    
    <action-state id="ExtractConsent">
        <evaluate expression="ExtractConsent" />
        <evaluate expression="CreateResult" />
        <!-- Set the event ID to 'TermsAccepted' for auditing. -->
        <evaluate expression="'TermsAccepted'" />
        
        <transition on="TermsAccepted" to="TermsAccepted" />
    </action-state>

    <action-state id="TermsAccepted">
        <evaluate expression="PopulateConsentAuditContext" />
        <evaluate expression="WriteConsentAuditLog" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="proceed" />
    </action-state>

    <action-state id="AuditTermsRejected">
        <evaluate expression="PopulateConsentAuditContext" />
        <evaluate expression="WriteConsentAuditLog" />
        <!-- Next state will be 'TermsRejected' since that is the event ID. -->
    </action-state>

    <end-state id="proceed" />

    <bean-import resource="../../../system/flows/intercept/terms-of-use-beans.xml" />

</flow>
