<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      abstract="true" parent="saml.abstract">

    <!-- Bootstrap action has to be at the "top" of the flow after this flow prepends itself to parent. -->
    
    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <!--
    This flow pulls double duty handling LogoutRequest and LogoutResponse.
    Response handling is just translating the status of the LogoutResponse into a JSON
    result compatible with the logout propagation flow contract.
    -->
    
    <!--
    We splice into the parent flow by checking for a LogoutResponse or an Async LogoutRequest
    after the inbound message subflow runs, to bypass the rest of the parent flow. Anything else
    passes control back to the next parent state. 
    -->
    <subflow-state id="DoInboundInterceptSubflow">
        <transition on="proceed" to="CheckLogoutResponse" />
    </subflow-state>
    
    <decision-state id="CheckLogoutResponse">
        <if test="opensamlProfileRequestContext.getInboundMessageContext().getMessage() instanceof T(org.opensaml.saml.saml2.core.LogoutResponse)"
            then="LogoutResponseView" else="CheckAsync1"/>
    </decision-state>

    <decision-state id="CheckAsync1">
        <!-- If parent DoInboundInterceptSubflow transition changes on 'proceed', the else clause needs to also change. -->
        <if test="opensamlProfileRequestContext.getInboundMessageContext().getMessage() instanceof T(org.opensaml.saml.saml2.core.LogoutRequest) and opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions() != null and !opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions().getUnknownXMLObjects(T(org.opensaml.saml.ext.saml2aslo.Asynchronous).DEFAULT_ELEMENT_NAME).isEmpty()"
            then="AsyncDecryptionParameters" else="OutboundContextsAndSecurityParameters" />
    </decision-state>
    
    <!-- This is the one action inside "OutboundContextsAndSecurityParameters" that we can't skip. -->
    <action-state id="AsyncDecryptionParameters">
        <evaluate expression="PopulateDecryptionParameters" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ExtractSubject" />
    </action-state>
    

    <!-- LogoutRequest handling starts by loading client storage if needed. -->
        
    <action-state id="DoProfileWork">
        <evaluate expression="PopulateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageLoad" />
        <transition on="NoLoadNeeded" to="DoLogoutRequest" />
    </action-state>
    
    <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="DoLogoutRequest"/>
    </subflow-state>

    <action-state id="DoLogoutRequest">
        <evaluate expression="ProcessLogoutRequest" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateClientStorageSaveContext" />
    </action-state>

    <!-- We may need to save client storage. -->
    
    <action-state id="PopulateClientStorageSaveContext">
        <evaluate expression="PopulateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageSave" />
        <transition on="NoSaveNeeded" to="CompleteLogout" />
    </action-state>
    
    <subflow-state id="ClientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CompleteLogout"/>
    </subflow-state>

    <!-- Continue the logout process. -->

    <action-state id="CompleteLogout">
        <evaluate expression="LogoutPopulateAuditContext" />
        <evaluate expression="PopulateMultiRPContextFromLogoutContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="NextRelyingPartyContext" />
    </action-state>

    <decision-state id="NextRelyingPartyContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext), true).getRelyingPartyContextIterator().hasNext()"
            then="SetRPUIInformation" else="LogoutView" />
    </decision-state>
    
    <action-state id="SetRPUIInformation">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext)).getRelyingPartyContextIterator().next()" />
        </on-entry>
        <evaluate expression="SetRPUIInformation" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="NextRelyingPartyContext" />
    </action-state>

    <view-state id="LogoutView" view="logout">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext))" result="viewScope.logoutContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext))" result="viewScope.multiRPContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom" />
        </on-render>
        
        <transition on="proceed" to="CheckAsync2" />
        <transition on="propagate" to="LogoutPropagateView" />
        <transition on="end" to="LogoutCompleteView" />
    </view-state>
    
    <view-state id="LogoutPropagateView" view="logout-propagate">
        <on-render>
            <evaluate expression="SaveLogoutContext" />
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext))" result="viewScope.logoutContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext))" result="viewScope.multiRPContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.htmlEncoder" />
            <evaluate expression="T(java.net.URLEncoder)" result="viewScope.urlEncoder" />
            <evaluate expression="T(org.cryptacular.util.CodecUtil)" result="viewScope.codecUtil" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LogoutPropagationFlowSelector')" result="viewScope.flowSelector" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom" />
        </on-render>
        
        <transition on="proceed" to="CheckAsync2" />
    </view-state>

    <view-state id="LogoutCompleteView" view="logout-complete">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext))" result="viewScope.logoutContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.MultiRelyingPartyContext))" result="viewScope.multiRPContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom" />
        </on-render>

        <transition on="proceed" to="CheckAsync2" />
    </view-state>
    
    <decision-state id="CheckAsync2">
        <if test="opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions() == null or opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions().getUnknownXMLObjects(T(org.opensaml.saml.ext.saml2aslo.Asynchronous).DEFAULT_ELEMENT_NAME).isEmpty()"
            then="BuildResponse" else="AsyncLogoutView" />
    </decision-state>
    
    <action-state id="BuildResponse">
        <evaluate expression="AddLogoutResponse" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="PostResponsePopulateAuditContext" />
        
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
    </action-state>
    
    <!-- Error Response Generation -->

    <decision-state id="HandleError">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.SpringRequestContext), true).setRequestContext(flowRequestContext)" />
            <evaluate expression="LogEvent" />
        </on-entry>
        <if test="LocalErrorPredicate.apply(opensamlProfileRequestContext)"
            then="HandleErrorWithView" else="HandleErrorWithResponse" />
    </decision-state>

    <!-- We need to trap non-proceed transitions in these actions to avoid an infinite loop. -->

    <action-state id="HandleErrorWithResponse">
        <evaluate expression="AddLogoutResponse" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="AddStatusToResponse" />
        <evaluate expression="PostResponsePopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <!-- Special view machinery, and writes audit log unconditionally. -->
    
    <end-state id="AsyncLogoutView" view="logout/saml-async">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
    </end-state>

    <end-state id="LogoutResponseView" view="logout/saml-result">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.UserAgentContext))" result="requestScope.userAgentContext" />
            <evaluate expression="userAgentContext.isInstance(T(eu.bitwalker.useragentutils.Browser).IE)
                ? externalContext.nativeResponse.setContentType('text/plain')
                : externalContext.nativeResponse.setContentType('application/json')" />
        </on-entry>
    </end-state>

    <bean-import resource="slo-front-abstract-beans.xml" />

</flow>
