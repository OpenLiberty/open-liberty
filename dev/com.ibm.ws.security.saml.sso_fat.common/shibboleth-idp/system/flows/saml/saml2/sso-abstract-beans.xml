<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />
    
    <!-- Note: Don't define DecodeMessage action here, that is defined in beans definition for concrete flow. -->
    
    <import resource="common-beans.xml" />
    
    <util:constant id="shibboleth.EndpointType"
        static-field="org.opensaml.saml.saml2.metadata.AssertionConsumerService.DEFAULT_ELEMENT_NAME" />
    
    <bean id="InitializeMessageChannelSecurityContext"
        class="org.opensaml.profile.action.impl.StaticMessageChannelSecurity" scope="prototype"
        p:confidentialityActive="false" p:integrityActive="false" />
        
    <bean id="VerifyChannelBindings"
        class="org.opensaml.saml.common.profile.impl.VerifyChannelBindings" scope="prototype" />
    
    <bean id="PopulateECPContext"
            class="org.opensaml.saml.saml2.profile.impl.PopulateECPContext" scope="prototype">
        <property name="activationCondition">
            <bean class="org.opensaml.profile.logic.ProfileIdPredicate">
                <constructor-arg>
                    <util:constant
                        static-field="net.shibboleth.idp.saml.saml2.profile.config.ECPProfileConfiguration.PROFILE_ID"/>
                </constructor-arg>
            </bean>
        </property>
        <property name="encryptionContextLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookup.EncryptionParameters"
                c:f-ref="shibboleth.ChildLookup.RelyingParty" />
        </property>
    </bean>
    
    <!-- Default list of context classes or declarations to ignore if an SP requests them. -->
    <util:list id="shibboleth.DefaultIgnoredContexts">
        <value>urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified</value>
    </util:list>
    
    <bean id="ProcessRequestedAuthnContext"
        class="net.shibboleth.idp.saml.saml2.profile.impl.ProcessRequestedAuthnContext" scope="prototype"
        p:ignoredContexts-ref="#{getObject('shibboleth.IgnoredContexts') != null ? 'shibboleth.IgnoredContexts' : 'shibboleth.DefaultIgnoredContexts'}" />
        
    <bean id="ResolveAttributesPredicate"
        class="net.shibboleth.idp.saml.profile.config.logic.ResolveAttributesProfileConfigPredicate" />

    <bean id="AddNameIDToSubjects"
            class="org.opensaml.saml.saml2.profile.impl.AddNameIDToSubjects" scope="prototype">
        <property name="formatLookupStrategy">
            <bean class="net.shibboleth.idp.saml.profile.logic.DefaultNameIdentifierFormatStrategy"
                p:defaultFormat="%{idp.nameid.saml2.default:urn:oasis:names:tc:SAML:2.0:nameid-format:transient}" />
        </property>
        <property name="nameIDGenerator">
            <bean class="net.shibboleth.idp.saml.nameid.impl.ProxySAML2NameIDGenerator"
                c:service-ref="shibboleth.NameIdentifierGenerationService" />
        </property>
        <property name="nameIDPolicyPredicate">
            <bean class="org.opensaml.saml.common.profile.logic.AffiliationNameIDPolicyPredicate"
                    p:metadataResolver-ref="shibboleth.MetadataResolver"
                    p:responderIdLookupStrategy-ref="shibboleth.ResponderIdLookup.Simple"
                    p:requesterIdLookupStrategy-ref="shibboleth.RelyingPartyIdLookup.Simple">
                <property name="objectLookupStrategy">
                    <bean class="org.opensaml.saml.saml2.profile.impl.AddNameIDToSubjects.NameIDPolicyLookupFunction" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="AddSubjectConfirmationToSubjects"
        class="org.opensaml.saml.saml2.profile.impl.AddSubjectConfirmationToSubjects" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"
        p:method="urn:oasis:names:tc:SAML:2.0:cm:bearer" />

    <bean id="AddProxyRestrictionToAssertions"
            class="org.opensaml.saml.saml2.profile.impl.AddProxyRestrictionToAssertions" scope="prototype">
        <property name="proxyAudiencesLookupStrategy">
            <bean class="net.shibboleth.idp.saml.profile.config.navigate.ProxyAudienceRestrictionsLookupFunction" />
        </property>
        <property name="proxyCountLookupStrategy">
            <bean class="net.shibboleth.idp.saml.profile.config.navigate.ProxyCountLookupFunction" />
        </property>
    </bean>
    
    <bean id="DecorateDelegatedAssertion"
            class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.DecorateDelegatedAssertion" scope="prototype"
            p:httpServletRequest-ref="shibboleth.HttpServletRequest"
            p:libertySSOSEndpointURL="%{idp.delegation.saml2.libertySSOSEndpointURL:#{null}}">
        <property name="keyInfoGeneratorManager">
            <bean factory-method="buildBasicKeyInfoGeneratorManager" class="org.opensaml.xmlsec.config.DefaultSecurityConfigurationBootstrap" />
        </property>
    </bean>

    <bean id="AddChannelBindingsToAssertions"
        class="org.opensaml.saml.saml2.profile.impl.AddChannelBindingsToAssertions" scope="prototype" />

    <bean id="AddGeneratedKeyToAssertions"
        class="org.opensaml.saml.saml2.profile.impl.AddGeneratedKeyToAssertions" scope="prototype" />

    <bean id="UpdateSessionWithSPSession"
            class="net.shibboleth.idp.session.impl.UpdateSessionWithSPSession" scope="prototype"
            p:activationCondition="%{idp.session.trackSPSessions:false}"
            p:sessionManager-ref="shibboleth.SessionManager">
        <property name="SPSessionCreationStrategy">
            <bean class="net.shibboleth.idp.saml.session.impl.SAML2SPSessionCreationStrategy"
                c:lifetime="%{idp.session.defaultSPlifetime:PT2H}"/>
        </property>
    </bean>

    <bean id="shibboleth.PreEncodeMessageHandler"
            class="org.opensaml.messaging.handler.impl.BasicMessageHandlerChain" scope="prototype">
        <property name="handlers">
            <list>
                <bean class="org.opensaml.saml.common.binding.impl.SAMLOutboundDestinationHandler" scope="prototype"/>
                <bean class="org.opensaml.saml.common.binding.security.impl.EndpointURLSchemeSecurityHandler" scope="prototype"/>
                <bean class="org.opensaml.saml.common.binding.security.impl.SAMLOutboundProtocolMessageSigningHandler" scope="prototype"
                        p:signErrorResponses="%{idp.errors.signed:true}">
                    <property name="activationCondition">
                        <bean parent="shibboleth.Conditions.NOT">
                            <constructor-arg>
                                <bean class="org.opensaml.saml.common.messaging.logic.SignatureCapableBindingPredicate" />
                            </constructor-arg>
                        </bean>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    
    <!-- These are used for ECP error handling. -->

    <bean id="SOAPErrorPredicate"
            class="net.shibboleth.idp.saml.saml2.profile.config.logic.SOAPErrorPredicate">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
    </bean>
    
    <bean id="AddSOAPFault"
            class="org.opensaml.soap.soap11.profile.impl.AddSOAPFault" scope="prototype"
            p:faultString="An error occurred.">
        <property name="detailedErrorsCondition">
            <bean class="net.shibboleth.idp.profile.config.logic.DetailedErrorsPredicate" />
        </property>
        <property name="faultCode">
            <util:list>
                <util:constant static-field="org.opensaml.soap.soap11.FaultCode.SERVER" />
            </util:list>
        </property>
        <property name="faultCodeLookupStrategy">
            <bean class="org.opensaml.soap.soap11.profile.impl.AddSOAPFault.FaultCodeMappingFunction"
                    c:mappings-ref="shibboleth.SOAPFaultCodeMappings" />
        </property>
        <property name="faultStringLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.SpringStatusMessageLookupFunction" />
        </property>
    </bean>

    <bean id="InitializeOutboundMessageContextForSOAPFault"
        class="net.shibboleth.idp.saml.profile.impl.InitializeOutboundMessageContextForError" scope="prototype"
        p:outboundBinding="urn:oasis:names:tc:SAML:2.0:bindings:PAOS" />
        
    <bean id="AddAuthnStatementToAssertionFromInboundAssertionToken"
        class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.AddAuthnStatementToAssertionFromInboundAssertionToken"
        scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest">
        <property name="identifierGeneratorLookupStrategy">
            <bean class="net.shibboleth.idp.profile.config.navigate.IdentifierGenerationStrategyLookupFunction"
                p:defaultIdentifierGenerationStrategy-ref="shibboleth.DefaultIdentifierGenerationStrategy" />
        </property>
        <property name="activationCondition">
            <bean parent="shibboleth.Conditions.Expression">
                <constructor-arg>
                    <value>
                        #profileContext.getProfileId().equals('http://shibboleth.net/ns/profiles/liberty/ssos')
                    </value>
                </constructor-arg>
            </bean>
        </property>
    </bean>
    
    <bean id="AddDelegationRestrictionToAssertions"
        class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.AddDelegationRestrictionToAssertions"
        scope="prototype">
        <property name="activationCondition">
            <bean parent="shibboleth.Conditions.Expression">
                <constructor-arg>
                    <value>
                        #profileContext.getProfileId().equals('http://shibboleth.net/ns/profiles/liberty/ssos')
                    </value>
                </constructor-arg>
            </bean>
        </property>
    </bean>
    
    <bean id="AddDelegationPolicyToAssertion"
        class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.AddDelegationPolicyToAssertion"
        scope="prototype"
        p:activationCondition-ref="shibboleth.Conditions.IssuingDelegatedAssertion">
    </bean>
        
</beans>