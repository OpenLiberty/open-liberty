<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="saml.abstract">

    <!-- Bootstrap action has to be at the "top" of the flow after this flow prepends itself to parent. -->
    
    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <action-state id="DoProfileWork">
        <evaluate expression="ProcessLogoutRequest" />
        <evaluate expression="LogoutPopulateAuditContext" />
        <!--
        TODO: will be used when logout propagation is enabled
        <evaluate expression="PopulateMultiRPContextFromLogoutContext" />
        -->

        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckAsync" />
    </action-state>

    <decision-state id="CheckAsync">
        <if test="opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions() == null or opensamlProfileRequestContext.getInboundMessageContext().getMessage().getExtensions().getUnknownXMLObjects(T(org.opensaml.saml.ext.saml2aslo.Asynchronous).DEFAULT_ELEMENT_NAME).isEmpty()"
            then="BuildResponse" else="DoAsync" />
    </decision-state>
    
    <action-state id="DoAsync">
        <evaluate expression="'AsyncLogout'" />
        <transition to="HandleSuccessWithView" />
    </action-state>
    
    <end-state id="HandleSuccessWithView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
    </end-state>
    
    <action-state id="BuildResponse">
        <evaluate expression="AddLogoutResponse" />
        <evaluate expression="AddInResponseToToResponse" />
        
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckForPartialLogout" />
    </action-state>
    
    <!-- TODO: this partial logout machinery will change once propagation exists -->
    
    <decision-state id="CheckForPartialLogout">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.LogoutContext), true).getSessionMap().isEmpty()"
            then="CompleteResponse" else="PartialLogout" />
    </decision-state>
    
    <action-state id="PartialLogout">
        <evaluate expression="AddPartialLogoutStatusToResponse" />
        
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CompleteResponse" />
    </action-state>

    <action-state id="CompleteResponse">
        <evaluate expression="PostResponsePopulateAuditContext" />
        
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="ReturnToParentFlow" />
    </action-state>

    <!-- Error Response Generation -->

    <!-- We need to trap non-proceed transitions in these actions to avoid an infinite loop. -->

    <action-state id="HandleError">
        <on-entry>
            <evaluate expression="LogEvent" />
        </on-entry>
        <evaluate expression="InitializeOutboundMessageContextForError" />
        <evaluate expression="AddLogoutResponse" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="AddStatusToResponse" />
        
        <evaluate expression="PostResponsePopulateAuditContext" />
        
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <bean-import resource="slo-back-beans.xml" />

</flow>
