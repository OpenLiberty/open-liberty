<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract">

    <!--
    This is the Authentication subflow. It handles retrieval of an existing session,
    set up and eventual selection of an subflow or active AuthenticationResult, and
    finalization of the processing such as updating a session, before returning control
    to the calling flow.
    -->
    
    <action-state id="AuthenticationSetup">
        <evaluate expression="PopulateAuthenticationContext" />
        <evaluate expression="PopulateSessionContext" />
        <evaluate expression="SetRPUIInformation" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="TestForSession" />
    </action-state>
   
    <!-- Check for an existing session, and do additional steps in that case. -->
    <decision-state id="TestForSession">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.SessionContext)) != null and opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.SessionContext)).getIdPSession() != null"
            then="SessionExists"
            else="FilterFlows" />
    </decision-state>
   
    <action-state id="SessionExists">
        <evaluate expression="ExtractActiveAuthenticationResults" />
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterFlowsByAttribute" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="FilterFlows" />
        <!-- Suppress resolution failure. -->
        <transition on="UnableToResolveAttributes" to="FilterFlows" />
    </action-state>
   
    <action-state id="FilterFlows">
        <evaluate expression="InitializeRequestedPrincipalContext" />
        <evaluate expression="FilterFlowsByForcedAuthn" />
        <evaluate expression="FilterFlowsByNonBrowserSupport" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="SelectAuthenticationFlow" />
    </action-state>
    
    <!--
    The Select action is the "dispatching" step. Proceed here routes around
    calling a new subflow, and goes directly to the Finalize step. Anything
    starting with "authn/" is a flow descriptor that we send
    control to to attempt a login.
    -->
    <action-state id="SelectAuthenticationFlow">
        <evaluate expression="SelectAuthenticationFlow" />
        <evaluate expression="'proceed'" />
        
        <!-- proceed indicates SSO (reuse of active result) -->
        <transition on="proceed" to="FinalizeAuthentication" />

        <!-- Call a subflow with the same ID as the event. -->
        <transition on="#{currentEvent.id.startsWith('authn/')}" to="CallAuthenticationFlow" />
    </action-state>

    <!--
    This invokes an authentication flow to attempt a login. Anything but proceed
    is an error, otherwise control passes to the wrap-up actions, except for a
    ReselectFlow signal to loop back up and try another.
    -->
    <subflow-state id="CallAuthenticationFlow" subflow="#{currentEvent.id}">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckSubjectCanonicalization" />
        <transition on="ReselectFlow" to="SelectAuthenticationFlow" />
    </subflow-state>

    <!-- Checks if authentication flow already completed c14n. -->
    <decision-state id="CheckSubjectCanonicalization">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.SubjectCanonicalizationContext)).getPrincipalName() == null"
            then="PopulateSubjectCanonicalizationContext"
            else="DetectIdentitySwitch" />
    </decision-state>

    <!-- This sets up the proper set of candidate c14n flows to run. -->
    <action-state id="PopulateSubjectCanonicalizationContext">
        <evaluate expression="PopulateSubjectCanonicalizationContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CallSubjectCanonicalization" />
    </action-state>

    <!-- This runs a c14n step on the result of the authentication. -->
    <subflow-state id="CallSubjectCanonicalization" subflow="c14n">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="DetectIdentitySwitch" />
    </subflow-state>

    <!-- Handles an identity switch by dumping the old session. -->
    <action-state id="DetectIdentitySwitch">
        <evaluate expression="DetectIdentitySwitch" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="FinalizeAuthentication" />
        <transition on="IdentitySwitch" to="HandleIdentitySwitch" />
        <!-- Ignore any session layer errors at this stage. -->
        <transition on="InputOutputError" to="HandleIdentitySwitch" />
    </action-state>
    
    <!-- Whether the identity switch should fail the request. -->
    <decision-state id="HandleIdentitySwitch">
        <if test="IdentitySwitchIsError" then="IdentitySwitch" else="FinalizeAuthentication" />
    </decision-state>
    
    <!--
    Wraps up the subflow or result reuse by producing a SubjectContext. If a mismatch
    exists between an existing SubjectContext and the result here, an error occurs.
    -->
    <action-state id="FinalizeAuthentication">
        <evaluate expression="FinalizeAuthentication" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="UpdateSessionWithAuthenticationResult" />
    </action-state>
    
    <!-- Finally, create/update the client session. -->
    <action-state id="UpdateSessionWithAuthenticationResult">
        <evaluate expression="UpdateSessionWithAuthenticationResult" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="proceed" />
        
        <!-- Ignore any session layer errors at this stage. -->
        <transition on="InputOutputError" to="proceed" />
    </action-state>

    <bean-import resource="authn-beans.xml" />

</flow>
