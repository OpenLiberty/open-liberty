<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!-- Bean templates for defining generators that produce custom formats based on attributes. -->

    <bean id="shibboleth.SAML2AttributeSourcedGenerator" abstract="true"
        class="net.shibboleth.idp.saml.nameid.impl.AttributeSourcedSAML2NameIDGenerator" />
    <bean id="shibboleth.SAML1AttributeSourcedGenerator" abstract="true"
        class="net.shibboleth.idp.saml.nameid.impl.AttributeSourcedSAML1NameIdentifierGenerator" />

    <!-- The actual plugins for generating transient and persistent identifiers. -->

    <bean id="shibboleth.SAML2TransientGenerator"
        class="net.shibboleth.idp.saml.nameid.impl.TransientSAML2NameIDGenerator"
        p:transientIdGenerator-ref="#{'%{idp.transientId.generator:shibboleth.CryptoTransientIdGenerator}'.trim()}" />

    <bean id="shibboleth.SAML2PersistentGenerator" lazy-init="true"
            class="net.shibboleth.idp.saml.nameid.impl.PersistentSAML2NameIDGenerator"
            p:useUnfilteredAttributes="%{idp.persistentId.useUnfilteredAttributes:true}"
            p:persistentIdGenerator-ref="#{'%{idp.persistentId.generator:shibboleth.ComputedPersistentIdGenerator}'.trim()}">
        <property name="attributeSourceIds">
            <bean parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.persistentId.sourceAttribute:}'.trim()}" />
        </property>
    </bean>

    <bean id="shibboleth.SAML1TransientGenerator"
        class="net.shibboleth.idp.saml.nameid.impl.TransientSAML1NameIdentifierGenerator"
        p:transientIdGenerator-ref="#{'%{idp.transientId.generator:shibboleth.CryptoTransientIdGenerator}'.trim()}" />

    <!--
    These are strategy implementations for generating transient and persistent identifiers.
    They're configured using properties, and usually selected for injection into the actual
    generation plugins by other properties, so they aren't all in use in a given system,
    but are all defined to simplify configuration.
    
    The Stored generator is a special case in that it requires a storage object, usually
    a JDBC-based implementation. By marking it lazy-init, we avoid loading it unless it's
    actually selected for use.
    -->
    
    <bean id="shibboleth.StoredTransientIdGenerator" lazy-init="true"
        class="net.shibboleth.idp.saml.nameid.impl.StoredTransientIdGenerationStrategy"
        p:idStore-ref="shibboleth.StorageService" />

    <bean id="shibboleth.CryptoTransientIdGenerator" lazy-init="true"
        class="net.shibboleth.idp.saml.nameid.impl.CryptoTransientIdGenerationStrategy"
        p:dataSealer-ref="shibboleth.DataSealer" />

    <bean id="shibboleth.ComputedPersistentIdGenerator" lazy-init="true"
        class="net.shibboleth.idp.saml.nameid.impl.ComputedPersistentIdGenerationStrategy"
        p:salt="%{idp.persistentId.salt:}"
        p:encodedSalt="%{idp.persistentId.encodedSalt:}"
        p:algorithm="%{idp.persistentId.algorithm:SHA}" />

    <bean id="shibboleth.StoredPersistentIdGenerator" lazy-init="true"
        class="net.shibboleth.idp.saml.nameid.impl.StoredPersistentIdGenerationStrategy"
        p:computedIdStrategy="#{getObject('%{idp.persistentId.computed:shibboleth.ComputedPersistentIdGenerator}'.trim())}"
        p:IDStore="#{getObject('%{idp.persistentId.store:undefined}'.trim())}"
        p:dataSource="#{getObject('%{idp.persistentId.dataSource:undefined}'.trim())}" />
    
    <!-- Parent bean for users to configure a custom ID store rather than a data source only. -->
    <bean id="shibboleth.JDBCPersistentIdStore" abstract="true"
        class="net.shibboleth.idp.saml.nameid.impl.JDBCPersistentIdStoreEx" />
    
    <!-- These two beans handle legacy support for NameID generation in the Attribute Resolver. -->
    <bean id="shibboleth.LegacySAML1NameIdentifierGenerator"
        class="net.shibboleth.idp.saml.nameid.impl.LegacySAML1NameIdentifierGenerator" />
    <bean id="shibboleth.LegacySAML2NameIDGenerator"
        class="net.shibboleth.idp.saml.nameid.impl.LegacySAML2NameIDGenerator" />
    
    <!--
    This is the actual service being exposed, and it takes a pair of generators that are
    actually wrappers around generator lists defined by the deployer.
    -->
    
    <bean class="net.shibboleth.idp.saml.nameid.impl.NameIdentifierGenerationServiceImpl">
        <property name="SAML1NameIdentifierGenerator">
            <bean class="org.opensaml.saml.saml1.profile.impl.ChainingSAML1NameIdentifierGenerator"
                p:generators-ref="shibboleth.SAML1NameIdentifierGenerators"
                p:defaultGenerator="#{getObject('%{idp.nameid.saml1.legacyGenerator:}'.trim())}" />    
        </property>
        <property name="SAML2NameIDGenerator">
            <bean class="org.opensaml.saml.saml2.profile.impl.ChainingSAML2NameIDGenerator"
                p:generators-ref="shibboleth.SAML2NameIDGenerators"
                p:defaultGenerator="#{getObject('%{idp.nameid.saml2.legacyGenerator:}'.trim())}" />    
        </property>
    </bean>
        
</beans>
