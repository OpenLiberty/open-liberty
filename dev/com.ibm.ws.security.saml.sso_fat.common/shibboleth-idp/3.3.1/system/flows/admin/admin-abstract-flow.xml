<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
    abstract="true">

    <!-- Abstract base for administrative flows. -->
    
    <on-start>
        <evaluate expression="'ErrorView'"  result="flowScope.ErrorState"/>
        <evaluate expression="'AuditedErrorView'"  result="flowScope.AuditedErrorState"/>
    </on-start>
    
    <action-state id="DoAdminPreamble">
        <evaluate expression="PopulateMetricContext" />
        <evaluate expression="InitializeAdministrativeProfileContextTree" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckIfAuthenticationNeeded" />
        
        <on-exit>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.RelyingPartyContext))" result="flowScope.relyingPartyContext" />
        </on-exit>
    </action-state>

    <!-- Conditional check for user authentication. -->
    <decision-state id="CheckIfAuthenticationNeeded">
        <if test="relyingPartyContext.getProfileConfig().isAuthenticated()"
            then="PopulateClientStorageLoadContext" else="DoProfileWork" />
    </decision-state>

    <!-- Authentication sequence includes load/save of client storage. -->
    
    <action-state id="PopulateClientStorageLoadContext">
        <evaluate expression="PopulateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageLoad" />
        <transition on="NoLoadNeeded" to="CheckInitialAuthentication" />
    </action-state>
    
    <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckInitialAuthentication"/>
    </subflow-state>
    
    <decision-state id="CheckInitialAuthentication">
        <if test="InitialAuthenticationFlag" then="PreInitialSetup" else="PostInitialSetup" />
    </decision-state>

    <action-state id="PreInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoInitialAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoInitialAuthenticationSubflow" subflow="authn-initial">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="PostInitialSetup" />
    </subflow-state>
    
    <action-state id="PostInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="InitializeRequestedPrincipalContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ResolveAttributes" />
        <transition on="RestartAuthentication" to="PostInitialSetup" />
    </subflow-state>
    
    <decision-state id="ResolveAttributes">
        <if test="relyingPartyContext.getProfileConfig().resolveAttributes()"
            then="AttributeResolution"
            else="PopulateClientStorageSaveContext" />
    </decision-state>
    
    <action-state id="AttributeResolution">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateClientStorageSaveContext" />
    </action-state>

    <action-state id="PopulateClientStorageSaveContext">
        <evaluate expression="PopulateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageSave" />
        <transition on="NoSaveNeeded" to="DoProfileWork" />
    </action-state>
    
    <subflow-state id="ClientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="DoProfileWork"/>
    </subflow-state>

    <!-- DoProfileWork in the child flow performs all the subsequent work of the flow. -->

    <!-- Passthrough state if an exception is thrown. -->

    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.profile').error('Uncaught runtime exception', flowExecutionException.getCause() ?: flowExecutionException)" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        <transition to="HandleError" />
    </action-state>

    <!-- Unsuccessful terminal states. -->
    
    <decision-state id="HandleError">
        <on-entry>
            <evaluate expression="LogEvent" />
        </on-entry>
        <if test="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').containsKey(currentEvent.id) and flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').get(currentEvent.id)"
            then="#{AuditedErrorState}" else="#{ErrorState}" />
    </decision-state>

    <end-state id="AuditedErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <end-state id="ErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <!-- Default is to turn non-proceed events into an error. -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleError" />
    </global-transitions>

    <bean-import resource="admin-abstract-beans.xml" />

</flow>
