<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

    default-init-method="initialize" default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />
    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />

    <import resource="../../conf/audit-system.xml" />
    <import resource="../../../conf/intercept/consent-intercept-config.xml" />

    <bean id="TermsOfUseConsentFunction"
        class="net.shibboleth.idp.consent.logic.impl.MessageSourceConsentFunction"
        p:consentKeyLookupStrategy-ref="shibboleth.consent.terms-of-use.Key" />

    <bean id="IsConsentRequiredPredicate"
        class="net.shibboleth.idp.consent.logic.impl.IsConsentRequiredPredicate" />

    <!-- Functions to return part of the storage key consisting of the user identifier. -->
    
    <bean id="shibboleth.consent.PrincipalConsentStorageKey"
        class="com.google.common.base.Functions" factory-method="compose"
        c:g-ref="shibboleth.PrincipalNameLookup.Subject"
        c:f-ref="shibboleth.ChildLookup.SubjectContext" />
        
    <bean id="shibboleth.consent.AttributeConsentStorageKey"
        class="net.shibboleth.idp.consent.logic.impl.AttributeValueLookupFunction"
        c:userAttributeId="%{idp.consent.userStorageKeyAttribute:uid}" />
        
    <alias name="%{idp.consent.userStorageKey:shibboleth.consent.PrincipalConsentStorageKey}"
        alias="shibboleth.consent.UserStorageKey" />

    <!--
    Function to return the full storage key combining the user identifier and a consent key
    joined by a delimiter.
    -->
    <bean id="shibboleth.consent.UserAndTermsStorageKey"
        class="net.shibboleth.idp.consent.logic.impl.JoinFunction"
        c:functionA-ref="shibboleth.consent.UserStorageKey"
        c:functionB-ref="shibboleth.consent.terms-of-use.Key" />

    <!--
    Function to return the storage key of the index record containing all storage keys
    of the storage context.
    -->
    <bean id="shibboleth.consent.UserStorageIndexKey"
        class="net.shibboleth.idp.consent.logic.impl.JoinFunction"
        c:functionA-ref="shibboleth.consent.UserStorageKey">
        <constructor-arg name="functionB">
            <bean class="com.google.common.base.Functions" factory-method="constant">
                <constructor-arg>
                    <util:constant
                        static-field="net.shibboleth.idp.consent.flow.storage.impl.AbstractConsentIndexedStorageAction.DEFAULT_STORAGE_INDEX_KEY" />
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Action beans -->
    
    <bean id="InitializeConsentContext"
        class="net.shibboleth.idp.consent.flow.impl.InitializeConsentContext" scope="prototype" />

    <bean id="PopulateConsentContext"
        class="net.shibboleth.idp.consent.flow.impl.PopulateConsentContext" scope="prototype"
        c:currentConsentsFunction-ref="TermsOfUseConsentFunction"  />
        
    <bean id="PopulatePreConsentAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:auditContextCreationStrategy-ref="shibboleth.consent.ChildLookup.ConsentAuditContext"
        p:fieldExtractors-ref="shibboleth.consent.PreConsentAuditExtractors"
        p:formattingMap-ref="shibboleth.consent.terms-of-use.AuditFormattingMap" />

    <bean id="ReadConsentFromStorage"
        class="net.shibboleth.idp.consent.flow.storage.impl.ReadConsentFromStorage" scope="prototype"
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserAndTermsStorageKey" />

    <bean id="ExtractConsent"
        class="net.shibboleth.idp.consent.flow.impl.ExtractConsent" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />

    <bean id="CreateResult"
        class="net.shibboleth.idp.consent.flow.storage.impl.CreateResult" scope="prototype"
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserAndTermsStorageKey"
        p:storageIndexKeyLookupStrategy-ref="shibboleth.consent.UserStorageIndexKey" />

    <bean id="PopulateConsentAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:auditContextCreationStrategy-ref="shibboleth.consent.ChildLookup.ConsentAuditContext"
        p:fieldExtractors-ref="shibboleth.consent.ConsentAuditExtractors"
        p:formattingMap-ref="shibboleth.consent.terms-of-use.AuditFormattingMap" />

    <bean id="WriteConsentAuditLog" class="net.shibboleth.idp.profile.audit.impl.WriteAuditLog" scope="prototype"
        p:auditContextLookupStrategy-ref="shibboleth.consent.ChildLookup.ConsentAuditContext"
        p:formattingMap-ref="shibboleth.consent.terms-of-use.AuditFormattingMap"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />

</beans>
