<flow xmlns="http://www.springframework.org/schema/webflow"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd">

    <!-- Master flow to propagate a logout of an SPSession by determining a subflow to run based on the type. -->

    <action-state id="PropagateLogout">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="PopulateMetricContext" />
        <evaluate expression="PopulateLogoutPropagationContext" />
        <evaluate expression="PopulateUserAgentContext" />
        <evaluate expression="SelectPropagationFlow" />
        
        <!-- Call a subflow with the same ID as the event. -->
        <transition on="#{currentEvent.id.startsWith('logoutprop/')}" to="CallPropagationFlow" />
        
        <transition to="LogoutFailed" />
    </action-state>

    <!--
    This invokes a propagation flow. Anything but proceed is an error, otherwise we signal success.
    -->
    <subflow-state id="CallPropagationFlow" subflow="#{currentEvent.id}">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="RenderResult" />
        <transition on="LogoutPending" to="LogoutPending" />
    </subflow-state>

    <end-state id="RenderResult" view="logout/result">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.UserAgentContext))" result="requestScope.userAgentContext" />
            <evaluate expression="userAgentContext.isInstance(T(eu.bitwalker.useragentutils.Browser).IE)
                ? externalContext.nativeResponse.setContentType('text/plain')
                : externalContext.nativeResponse.setContentType('application/json')" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="WriteAuditLog" />
        </on-entry>
    </end-state>

    <!-- End in limbo, assumes the propagation subflow will send the client somewhere else. -->

    <end-state id="LogoutPending" />

    <!-- End with a failure. -->

    <end-state id="LogoutFailed">
        <on-entry>
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="RecordResponseComplete" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <!-- Passthrough state if an exception is thrown. -->

    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.profile').error('Uncaught runtime exception', flowExecutionException.getCause() ?: flowExecutionException)" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        <transition to="LogoutFailed" />
    </action-state>

    <!-- Default is to turn non-proceed events into an error. -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="LogoutFailed" />
    </global-transitions>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="logout-propagation-beans.xml" />

</flow>
