<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-init-method="initialize"
       default-destroy-method="destroy">

    <bean id="InitializeProfileRequestContext"
        class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext" scope="prototype"
        p:profileId="#{T(net.shibboleth.idp.saml.idwsf.profile.config.SSOSProfileConfiguration).PROFILE_ID}"
        p:loggingId="%{idp.service.logging.saml2sso:SSO}"
        p:browserProfile="false" />

    <bean id="DecodeMessage" class="org.opensaml.profile.action.impl.DecodeMessage" scope="prototype">
        <constructor-arg>
            <bean class="net.shibboleth.idp.saml.saml2.profile.delegation.messaging.impl.LibertyHTTPSOAP11Decoder" scope="prototype"
                p:parserPool-ref="shibboleth.ParserPool"
                p:httpServletRequest-ref="shibboleth.HttpServletRequest"
                p:bindingDescriptor-ref="shibboleth.Binding.LibertySOAP" />
        </constructor-arg>
    </bean>
    
    <alias name="shibboleth.OutgoingIDWSFSSOSBindings" alias="shibboleth.OutgoingBindings"/>
    
    <bean id="shibboleth.BindingSpecificMessageHandler"
            class="org.opensaml.messaging.handler.impl.BasicMessageHandlerChain" scope="prototype">
        <property name="handlers">
            <util:list>
                <!-- Liberty SOAP binding-specific handlers. -->
                <bean class="net.shibboleth.idp.saml.saml2.profile.delegation.messaging.impl.AddFrameworkHandler" scope="prototype" />
                <bean class="net.shibboleth.idp.saml.saml2.profile.delegation.messaging.impl.AddSenderHandler" scope="prototype" />
                
                <!-- Standard WS-Addressing and WS-Security handlers. -->
                <bean class="org.opensaml.soap.wssecurity.messaging.impl.AddTimestampHandler" scope="prototype" />
                <bean class="org.opensaml.soap.wsaddressing.messaging.impl.AddMessageIDHandler" scope="prototype" />
                <bean class="org.opensaml.soap.wsaddressing.messaging.impl.AddRelatesToHandler" scope="prototype" />
                <bean class="org.opensaml.soap.wsaddressing.messaging.impl.AddActionHandler" scope="prototype">
                    <property name="actionURI">
                        <util:constant static-field="net.shibboleth.idp.saml.saml2.profile.delegation.impl.LibertyConstants.SSOS_RESPONSE_WSA_ACTION_URI" />
                    </property>
                </bean>
                
                <!-- ECP-specific handlers. -->
                <bean class="org.opensaml.saml.saml2.binding.impl.AddECPResponseHeaderHandler" scope="prototype" />
                <!-- TODO Since this is really sub-profile of ECP, should we include the standard ECP stuff below?.
                     Some of this is new since the original delegation work. -->
                <!--
                <bean class="org.opensaml.saml.saml2.binding.impl.AddRelayStateHeaderHandler" scope="prototype" />
                <bean class="org.opensaml.saml.saml2.binding.impl.AddRequestAuthenticatedHeaderHandler" scope="prototype" />
                <bean class="org.opensaml.saml.saml2.binding.impl.AddGeneratedKeyHeaderHandler" scope="prototype" />
                <bean class="org.opensaml.saml.common.binding.impl.AddChannelBindingsHeaderHandler" scope="prototype" />
                -->
            </util:list>
        </property>
    </bean>
    
    <util:constant id="shibboleth.Delegation.MetadataLookup.Protocol"
        static-field="org.opensaml.saml.common.xml.SAMLConstants.SAML20P_NS" />

    <util:constant id="shibboleth.Delegation.MetadataLookup.Role"
        static-field="org.opensaml.saml.saml2.metadata.SPSSODescriptor.DEFAULT_ELEMENT_NAME" />
    
    <bean id="PopulateInboundMessageContextWithSAMLSelf" 
        class="net.shibboleth.idp.saml.profile.impl.PopulateInboundMessageContextWithSAMLSelf" scope="prototype" />
    
    <bean id="ProcessFrameworkHandler"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="net.shibboleth.idp.saml.saml2.profile.delegation.messaging.impl.ProcessFrameworkHandler" />
        </constructor-arg>
        <property name="activationCondition">
            <bean class="com.google.common.base.Predicates" factory-method="not"
                c:predicate-ref="shibboleth.Conditions.BrowserProfile" />
        </property>
        <property name="errorEvent">
            <util:constant static-field="org.opensaml.profile.action.EventIds.INVALID_MESSAGE" />
        </property>
    </bean>
    
    <bean id="ProcessSenderHandler"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="net.shibboleth.idp.saml.saml2.profile.delegation.messaging.impl.ProcessSenderHandler" />
        </constructor-arg>
        <property name="activationCondition">
            <bean class="com.google.common.base.Predicates" factory-method="not"
                c:predicate-ref="shibboleth.Conditions.BrowserProfile" />
        </property>
        <property name="errorEvent">
            <util:constant static-field="org.opensaml.profile.action.EventIds.INVALID_MESSAGE" />
        </property>
    </bean>
    
    <bean id="ExtractMessageIDHandler"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.soap.wsaddressing.messaging.impl.ExtractMessageIDHandler" />
        </constructor-arg>
        <property name="activationCondition">
            <bean class="com.google.common.base.Predicates" factory-method="not"
                c:predicate-ref="shibboleth.Conditions.BrowserProfile" />
        </property>
        <property name="errorEvent">
            <util:constant static-field="org.opensaml.profile.action.EventIds.INVALID_MESSAGE" />
        </property>
    </bean>
    
    <bean id="ValidateActionHandler"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.soap.wsaddressing.messaging.impl.ValidateActionHandler">
                <property name="expectedActionURI">
                    <util:constant static-field="net.shibboleth.idp.saml.saml2.profile.delegation.impl.LibertyConstants.SSOS_AUTHN_REQUEST_WSA_ACTION_URI" />
                </property>
            </bean>
        </constructor-arg>
        <property name="activationCondition">
            <bean class="com.google.common.base.Predicates" factory-method="not"
                c:predicate-ref="shibboleth.Conditions.BrowserProfile" />
        </property>
        <property name="errorEvent">
            <util:constant static-field="org.opensaml.profile.action.EventIds.INVALID_MESSAGE" />
        </property>
    </bean>
    
    <bean id="SAMLProtocolAndRoleForPresenter"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLProtocolAndRoleHandler" scope="prototype"
                p:entityContextClass="org.opensaml.saml.common.messaging.context.SAMLPresenterEntityContext"
                p:protocol-ref="shibboleth.Delegation.MetadataLookup.Protocol"
                p:role-ref="shibboleth.Delegation.MetadataLookup.Role" />
        </constructor-arg>
    </bean>
    
    <bean id="SAMLMetadataLookupForPresenter"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLMetadataLookupHandler" scope="prototype"
                p:entityContextClass="org.opensaml.saml.common.messaging.context.SAMLPresenterEntityContext">
                <property name="roleDescriptorResolver">
                    <bean class="org.opensaml.saml.metadata.resolver.impl.PredicateRoleDescriptorResolver"
                        c:mdResolver-ref="shibboleth.MetadataResolver" />
                </property>
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="LibertyOutboundContexts" class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.PopulateOutboundMessageContext" scope="prototype" />
    
    <bean id="PopulateLibertyContext" class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.PopulateLibertyContext" scope="prototype" />
    
    <bean id="EvaluateDelegationPolicy" class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.EvaluateDelegationPolicy" scope="prototype" />
    
    <bean id="DecryptDelegatedAssertionNameID" class="org.opensaml.saml.saml2.profile.impl.DecryptNameIDs" scope="prototype">
        <property name="messageLookupStrategy">
            <bean class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.DelegatedAssertionLookupStrategy" />
        </property>
    </bean>
    
    <bean id="ProcessDelegatedAssertion" class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.ProcessDelegatedAssertion" scope="prototype" />
    
    <bean id="FinalizeSAMLTokenProcessing" class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.FinalizeSAMLTokenProcessing" scope="prototype" />

</beans>
