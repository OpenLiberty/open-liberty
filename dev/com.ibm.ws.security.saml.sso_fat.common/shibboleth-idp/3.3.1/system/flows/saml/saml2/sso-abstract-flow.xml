<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      abstract="true" parent="saml.abstract">

    <!-- Bootstrap action has to be at the "top" of the flow after this flow prepends itself to parent. -->
    
    <action-state id="InitializeProfileRequestContext">
        <evaluate expression="InitializeProfileRequestContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DecodeMessage" />
    </action-state>

    <action-state id="DoProfileWork">
        <evaluate expression="VerifyChannelBindings" />
        <evaluate expression="PopulateECPContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateClientStorageLoadContext" />
    </action-state>
    
    <action-state id="PopulateClientStorageLoadContext">
        <evaluate expression="PopulateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageLoad" />
        <transition on="NoLoadNeeded" to="CheckInitialAuthentication" />
    </action-state>
    
    <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckInitialAuthentication"/>
    </subflow-state>
    
    <decision-state id="CheckInitialAuthentication">
        <if test="InitialAuthenticationFlag" then="PreInitialSetup" else="PostInitialSetup" />
    </decision-state>

    <action-state id="PreInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoInitialAuthenticationSubflow" />
    </action-state>

    <subflow-state id="DoInitialAuthenticationSubflow" subflow="authn-initial">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="PostInitialSetup" />
    </subflow-state>
    
    <action-state id="PostInitialSetup">
        <evaluate expression="InitializeAuthenticationContext" />
        <evaluate expression="ProcessRequestedAuthnContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DoAuthenticationSubflow" />
    </action-state>
    
    <subflow-state id="DoAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ResolveAttributes" />
        <transition on="RestartAuthentication" to="PostInitialSetup" />
    </subflow-state>
    
    <decision-state id="ResolveAttributes">
        <if test="ResolveAttributesPredicate.apply(opensamlProfileRequestContext)"
            then="AttributeResolution"
            else="BuildResponse" />
    </decision-state>
    
    <action-state id="AttributeResolution">
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="PopulatePostAuthnInterceptContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CheckPostAuthnInterceptContext" />
    </action-state>

    <decision-state id="CheckPostAuthnInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="BuildResponse" else="DoPostAuthnInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="BuildResponse" />
        <transition on="RestartAuthentication" to="PostInitialSetup" />
    </subflow-state>

    <action-state id="BuildResponse">
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />

        <evaluate expression="AddAuthnStatementToAssertion" />
        <evaluate expression="AddAuthnStatementToAssertionFromInboundAssertionToken" />
        
        <evaluate expression="AddAttributeStatementToAssertion" />
        <evaluate expression="AddNameIDToSubjects" />
        <evaluate expression="AddSubjectConfirmationToSubjects" />
        <evaluate expression="AddNotBeforeConditionToAssertions" />
        <evaluate expression="AddNotOnOrAfterConditionToAssertions" />
        <evaluate expression="AddAudienceRestrictionToAssertions" />
        <evaluate expression="AddDelegationRestrictionToAssertions" />
        <evaluate expression="AddProxyRestrictionToAssertions" />
        <evaluate expression="AddChannelBindingsToAssertions" />
        <evaluate expression="AddGeneratedKeyToAssertions" />
        <evaluate expression="DecorateDelegatedAssertion" />
        <evaluate expression="AddDelegationPolicyToAssertion" />

        <!-- Need access to unencrypted NameID and Assertion. -->
        <evaluate expression="PostAssertionPopulateAuditContext" />
        <evaluate expression="UpdateSessionWithSPSession" />

        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="EncryptAndSign" />
        <!-- Mask storage failure. -->
        <transition on="InputOutputError" to="EncryptAndSign" />
    </action-state>

    <action-state id="EncryptAndSign">
        <evaluate expression="EncryptNameIDs" />
        <evaluate expression="EncryptAttributes" />
        <evaluate expression="SignAssertions" />
        <evaluate expression="EncryptAssertions" />

        <evaluate expression="PostResponsePopulateAuditContext" />

        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="PopulateClientStorageSaveContext" />
    </action-state>
    
    <!-- We may need to save client storage. -->
    
    <action-state id="PopulateClientStorageSaveContext">
        <evaluate expression="PopulateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="ClientStorageSave" />
        <transition on="NoSaveNeeded" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
    </action-state>
    
    <subflow-state id="ClientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ReturnToParentFlow"/>
        <transition to="HandleErrorWithView" />
    </subflow-state>
    
    <!-- Outbound message handling completes in the parent flow. -->

    <!-- Error Response Generation -->

    <decision-state id="HandleError">
        <on-entry>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.SpringRequestContext), true).setRequestContext(flowRequestContext)" />
            <evaluate expression="LogEvent" />
        </on-entry>
        <if test="LocalErrorPredicate.apply(opensamlProfileRequestContext)"
            then="HandleErrorLocally" else="HandleErrorWithResponse" />
    </decision-state>

    <!-- For ECP, local errors mean SOAP faults. -->
    
    <decision-state id="HandleErrorLocally">
        <if test="opensamlProfileRequestContext.isBrowserProfile() or !SOAPErrorPredicate.apply(opensamlProfileRequestContext)"
            then="HandleErrorWithView" else="SOAPFault" />
    </decision-state>

    <!-- We need to trap non-proceed transitions in these actions to avoid an infinite loop. -->

    <action-state id="HandleErrorWithResponse">
        <evaluate expression="AddResponseShell" />
        <evaluate expression="AddInResponseToToResponse" />
        <evaluate expression="AddStatusToResponse" />
        <evaluate expression="PostResponsePopulateAuditContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ReturnToParentFlow" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <action-state id="SOAPFault">
        <evaluate expression="InitializeOutboundMessageContextForSOAPFault" />
        <evaluate expression="AddSOAPFault" />
        <evaluate expression="EncodeMessage" />
        <evaluate expression="RecordResponseComplete" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="end" />
        <transition to="HandleErrorWithView" />
        
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </action-state>

    <!-- Splice in an additional step to write out the F-TICKS log entry on a successful completion. -->

    <end-state id="end">
        <on-entry>
            <evaluate expression="WriteFTICKSLog" />
        </on-entry>
    </end-state>

    <bean-import resource="sso-abstract-beans.xml" />

</flow>
