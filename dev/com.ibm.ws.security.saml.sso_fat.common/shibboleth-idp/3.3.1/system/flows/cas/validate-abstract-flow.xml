<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
          http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"
      abstract="true"
      parent="cas.abstract">

    <!-- Base flow for all CAS protocol ticket validation operations -->

    <on-start>
        <set name="flowScope.casProtocolErrorView" value="'validateFailure'" />
    </on-start>

    <action-state id="InitializeRelyingParty">
        <evaluate expression="PublishProtocolRequest" />
        <evaluate expression="BuildRelyingPartyContext" />
        <evaluate expression="BuildSAMLMetadataContext" />
        <evaluate expression="SelectRelyingPartyConfiguration" />
        <evaluate expression="SelectProfileConfiguration" />
        <evaluate expression="PopulateInboundInterceptContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckInboundInterceptContext" />
    </action-state>

    <decision-state id="CheckInboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="ValidateTicket"
            else="DoInboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoInboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ValidateTicket" />
    </subflow-state>

    <action-state id="ValidateTicket">
        <evaluate expression="ValidateTicket" />
        <transition on="InvalidTicketFormat" to="ProtocolErrorView" />
        <transition on="ServiceMismatch" to="ProtocolErrorView" />
        <transition on="TicketExpired" to="ProtocolErrorView" />
        <transition on="TicketRetrievalError" to="ProtocolErrorView" />
        <transition on="ServiceTicketValidated" to="ValidateRenew" />
        <transition on="ProxyTicketValidated" to="HandleValidProxyTicket" />
    </action-state>

    <action-state id="ValidateRenew">
        <evaluate expression="ValidateRenew" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckForProxy" />
    </action-state>

    <decision-state id="CheckForProxy">
        <if test="flowScope.ticketValidationRequest.pgtUrl != null"
            then="ValidateProxyCallback"
            else="CheckResolveAttributes"/>
    </decision-state>

    <action-state id="ValidateProxyCallback">
        <evaluate expression="CheckProxyAuthorization" />
        <evaluate expression="ValidateProxyCallback" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckResolveAttributes" />
    </action-state>

    <decision-state id="CheckResolveAttributes">
        <if test="ValidateConfigLookup.apply(opensamlProfileRequestContext).isResolveAttributes()"
            then="ResolveAttributes"
            else="UpdateIdPSessionWithSPSession" />
    </decision-state>

    <action-state id="ResolveAttributes">
        <evaluate expression="PopulateSubjectContext" />
        <evaluate expression="ResolveAttributes" />
        <evaluate expression="FilterAttributes" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="UpdateIdPSessionWithSPSession" />
    </action-state>

    <action-state id="UpdateIdPSessionWithSPSession">
        <evaluate expression="UpdateIdPSessionWithSPSession" />
        <evaluate expression="PopulateOutboundInterceptContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="CheckOutboundInterceptContext" />
    </action-state>

    <decision-state id="CheckOutboundInterceptContext">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()"
            then="ValidateSuccess"
            else="DoOutboundInterceptSubflow" />
    </decision-state>

    <subflow-state id="DoOutboundInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="ValidateSuccess" />
        <transition to="HandleError" />
    </subflow-state>

    <!-- View end states -->
    <end-state id="ValidateSuccess" view="cas/validateSuccess">
        <on-entry>
            <evaluate expression="PrepareTicketValidationResponse" />
            <evaluate expression="PopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="PublishProtocolResponse" />
            <set name="flashScope.escapeUtils" value="T(org.apache.commons.lang.StringEscapeUtils)" />
        </on-entry>
    </end-state>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="../validate-abstract-beans.xml" />
</flow>