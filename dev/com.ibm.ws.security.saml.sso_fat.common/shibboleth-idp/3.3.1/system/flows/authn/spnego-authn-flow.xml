<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract">

    <!-- This is a login flow for SPNEGO authentication implemented via external authentication. -->

    <!-- Store current autologin state to a flow variable. -->
    <on-start>
        <evaluate expression="SPNEGOAutoLoginManager.isEnabled()"
            result="flowScope.enableAutoLoginOnSuccess" />
    </on-start>

    <!-- If running SPNEGO is enforced for all users, run SPNEGO without further checks. -->
    <decision-state id="CheckEnforceRun">
        <if test="enforceRun"
            then="DisableAutoLoginBeforeRunSPNEGO"
            else="CheckCalledAsExtendedFlow" />
    </decision-state>

    <!-- If called as extended flow from another login flow, the flow always runs. -->
    <decision-state id="CheckCalledAsExtendedFlow">
      <if test="calledAsExtendedFlow"
          then="CheckEnableAutoLoginRequested"
          else="CheckAutoLoginEnabled" />
    </decision-state>

    <!--  If called directly, the flow exits unless autologin is enabled. -->
    <decision-state id="CheckAutoLoginEnabled">
        <if test="SPNEGOAutoLoginManager.isEnabled()"
            then="DisableAutoLoginBeforeRunSPNEGO"
            else="ReselectFlow" />
    </decision-state>

    <!-- If called as extended flow, check if interflow state contains autologin-enabling parameter. -->
    <decision-state id="CheckEnableAutoLoginRequested">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).getAuthenticationStateMap().get(T(net.shibboleth.idp.authn.spnego.impl.SPNEGOAutoLoginManager).AUTOLOGIN_PARAMETER_NAME)"
            then="MarkEnableAutoLoginOnSuccess"
            else="DisableAutoLoginBeforeRunSPNEGO" />
    </decision-state>

    <action-state id="MarkEnableAutoLoginOnSuccess">
        <evaluate expression="true" result="flowScope.enableAutoLoginOnSuccess" />
        
        <transition to="DisableAutoLoginBeforeRunSPNEGO" />
    </action-state>

    <action-state id="DisableAutoLoginBeforeRunSPNEGO">
        <evaluate expression="SPNEGOAutoLoginManager.disable()" />

        <transition to="RunSPNEGO" />
    </action-state>

    <view-state id="RunSPNEGO" view="externalRedirect:#{flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.authn.SPNEGO.externalAuthnPathStrategy').apply(opensamlProfileRequestContext)}/#{flowExecutionContext.getKey().toString()}?conversation=#{flowExecutionContext.getKey().toString()}">
        <on-render>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).addSubcontext(new net.shibboleth.idp.authn.spnego.impl.SPNEGOContext(), true).setKerberosSettings(flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.authn.SPNEGO.Krb5.Settings'))" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).addSubcontext(new net.shibboleth.idp.authn.context.ExternalAuthenticationContext(), true).setFlowExecutionUrl(flowExecutionUrl + '&amp;_eventId_proceed=1')" />
            <evaluate expression="externalContext.getNativeRequest().getSession().setAttribute('conversation' + flowExecutionContext.getKey().toString(), new net.shibboleth.idp.authn.impl.ExternalAuthenticationImpl(opensamlProfileRequestContext))" />
        </on-render>

        <transition on="proceed" to="ValidateExternalAuthentication" />
    </view-state>

    <action-state id="ValidateExternalAuthentication">
        <evaluate expression="ValidateExternalAuthentication" />
        <evaluate expression="PopulateSubjectCanonicalizationContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="CallSubjectCanonicalization" />
        
        <!--
        If not mapped otherwise in the ClassifiedMessages map, remap some
        relevant events to (possibly) fall through to a different login flow.
        This preserves the error event captured in the context tree for later
        use by a UI in a different flow.  
        -->
        <transition on="NoCredentials" to="ReselectFlow" />
        <transition on="InvalidCredentials" to="ReselectFlow" />
        <transition on="SPNEGONotAvailable" to="ReselectFlow" />
        <transition on="NTLMUnsupported" to="ReselectFlow" />
    </action-state>

    <!-- This runs a c14n step on the result of the authentication. -->
    <subflow-state id="CallSubjectCanonicalization" subflow="c14n">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckWhetherToEnableAutoLogin" />
        
        <!-- This shouldn't generally happen, but if c14n fails, it's allowable to fall through. -->
        <transition on="SubjectCanonicalizationError" to="ReselectFlow" />
    </subflow-state>

    <decision-state id="CheckWhetherToEnableAutoLogin">
        <if test="flowScope.enableAutoLoginOnSuccess"
            then="EnableAutoLoginOnSuccess"
            else="proceed" />
    </decision-state>

    <action-state id="EnableAutoLoginOnSuccess">
        <evaluate expression="SPNEGOAutoLoginManager.enable()" />

        <transition to="proceed" />
    </action-state>

    <bean-import resource="spnego-authn-beans.xml" />
</flow>
