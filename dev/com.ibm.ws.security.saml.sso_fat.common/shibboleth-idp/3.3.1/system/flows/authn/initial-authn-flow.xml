<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract">

    <!--
    This is the Initial Authentication subflow. It checks for an existing session, and if none exists,
    selects a flow preconfigured as "initial", which means it runs independently of whether it meets the
    requirements of a requester and is designed to establish a session so that the full Authentication subflow
    will be able to operate with additional context based on the subject's identity.
    -->
    
    <action-state id="AuthenticationSetup">
        <evaluate expression="PopulateSessionContext" />
        <evaluate expression="SetRPUIInformation" />
         <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="TestForSession" />
    </action-state>
   
    <!-- Check for an existing session, and just exit the flow successfully. -->
    <decision-state id="TestForSession">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.SessionContext)) != null and opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.session.context.SessionContext)).getIdPSession() != null"
            then="proceed"
            else="FilterFlows" />
    </decision-state>
   
    <action-state id="FilterFlows">
        <evaluate expression="PopulateAuthenticationContextWithInitialFlow" />
        <evaluate expression="FilterFlowsByForcedAuthn" />
        <evaluate expression="FilterFlowsByNonBrowserSupport" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="SelectAuthenticationFlow" />
    </action-state>
    
    <!--
    The Select action is the "dispatching" step. Anything starting with "authn/"
    is a flow descriptor that we send control to to attempt a login. Anything else
    is an error, and "proceed" isn't an expected outcome here since no session
    existed, making result reuse impossible.
    -->
    <action-state id="SelectAuthenticationFlow">
        <evaluate expression="SelectAuthenticationFlow" />
        
        <!-- Call a subflow with the same ID as the event. -->
        <transition on="#{currentEvent.id.startsWith('authn/')}" to="CallAuthenticationFlow" />
    </action-state>

    <!--
    This invokes an authentication flow to attempt a login. Anything but proceed
    is an error, otherwise control passes to the wrap-up actions, except for a
    ReselectFlow signal to loop back up and try another.
    -->
    <subflow-state id="CallAuthenticationFlow" subflow="#{currentEvent.id}">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="CheckSubjectCanonicalization" />
        <transition on="ReselectFlow" to="SelectAuthenticationFlow" />
    </subflow-state>

    <!-- Checks if authentication flow already completed c14n. -->
    <decision-state id="CheckSubjectCanonicalization">
        <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.SubjectCanonicalizationContext)).getPrincipalName() == null"
            then="PopulateSubjectCanonicalizationContext"
            else="FinalizeAuthentication" />
    </decision-state>

    <!-- This sets up the proper set of candidate c14n flows to run. -->
    <action-state id="PopulateSubjectCanonicalizationContext">
        <evaluate expression="PopulateSubjectCanonicalizationContext" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="CallSubjectCanonicalization" />
    </action-state>

    <!-- This runs a c14n step on the result of the authentication. -->
    <subflow-state id="CallSubjectCanonicalization" subflow="c14n">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="FinalizeAuthentication" />
    </subflow-state>

    <!--
    Wraps up the subflow by producing a SubjectContext. If a mismatch exists between an existing
    SubjectContext and the result here, an error occurs.
    -->
    <action-state id="FinalizeAuthentication">
        <evaluate expression="FinalizeAuthentication" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="UpdateSessionWithAuthenticationResult" />
    </action-state>
    
    <!-- Finally, create/update the client session. -->
    <action-state id="UpdateSessionWithAuthenticationResult">
        <evaluate expression="UpdateSessionWithAuthenticationResult" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="proceed" />
        
        <!-- Ignore any session layer errors at this stage. -->
        <transition on="InputOutputError" to="proceed" />
    </action-state>

    <bean-import resource="authn-beans.xml" />

</flow>
