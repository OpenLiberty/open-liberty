<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <import resource="../../conf/admin/general-admin.xml" />
    <import resource="../../conf/admin/metrics.xml" />

    <!-- A parent bean to default some of the flow boilerplate. -->

    <bean id="shibboleth.AdminFlow" abstract="true"
            class="net.shibboleth.idp.admin.BasicAdministrativeFlowDescriptor"
            p:servletRequest-ref="shibboleth.HttpServletRequest"
            p:nonBrowserSupported="false" />

    <!-- Function for returning custom access control policies for access to metrics. -->

    <bean id="shibboleth.metrics.AccessPolicyStrategy" parent="shibboleth.ContextFunctions.Expression"
        c:expression="#custom.get('policyMap').get(#input.getSubcontext(T(net.shibboleth.idp.profile.context.SpringRequestContext)).getRequestContext().getFlowScope().get('metricId')) ?: #custom.get('defaultPolicy')"
        c:outputType="#{T(java.lang.String)}">
        <property name="customObject">
            <map>
                <entry key="policyMap" value-ref="shibboleth.metrics.AccessPolicyMap" />
                <entry key="defaultPolicy" value-ref="shibboleth.metrics.DefaultAccessPolicy" />
            </map>
        </property>
    </bean>
    
    <!-- MetricRegistry we can control with logging categories. -->
    <bean id="shibboleth.metrics.MetricRegistry"
        class="org.opensaml.core.metrics.FilteredMetricRegistry"
        p:metricFilter-ref="shibboleth.metrics.LoggerDrivenMetricFilter" />
        
    <bean id="shibboleth.metrics.LoggerDrivenMetricFilter"
        class="org.opensaml.core.metrics.LoggerDrivenMetricFilter"
        c:_0="metrics."
        c:_1="#{getObject('shibboleth.metrics.MetricLevelMap')}" />
        
    <!-- Parent beans for registering MetricSets and Metrics. -->
    
    <bean id="shibboleth.metrics.RegisterMetricSets" abstract="true"
        class="org.springframework.beans.factory.config.MethodInvokingBean"
        p:targetObject-ref="shibboleth.metrics.MetricRegistry"
        p:targetMethod="registerMultiple" />

    <bean id="shibboleth.metrics.RegisterMetric" abstract="true"
        class="org.springframework.beans.factory.config.MethodInvokingBean"
        p:targetObject-ref="shibboleth.metrics.MetricRegistry"
        p:targetMethod="register" />
        
    <bean id="shibboleth.metrics.HTTPReporter" abstract="true" destroy-method="stop"
        class="net.shibboleth.idp.metrics.impl.HTTPReporter"
        c:registry-ref="shibboleth.metrics.MetricRegistry"
        c:filter="#{null}"
        p:httpClient-ref="shibboleth.NonCachingHttpClient" />
    
    <!-- Some predefined metric sets, only created if installed by user. -->
    
    <bean id="shibboleth.metrics.CoreGaugeSet" class="net.shibboleth.idp.metrics.impl.CoreGaugeSet" lazy-init="true" />
    
    <bean id="shibboleth.metrics.IdPGaugeSet" class="net.shibboleth.idp.metrics.impl.IdPGaugeSet" lazy-init="true" />
    
    <bean id="shibboleth.metrics.LoggingGaugeSet"
        class="net.shibboleth.idp.metrics.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="logging"
        p:service-ref="shibboleth.LoggingService" />
    
    <bean id="shibboleth.metrics.AccessControlGaugeSet"
        class="net.shibboleth.idp.metrics.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="accesscontrol"
        p:service-ref="shibboleth.ReloadableAccessControlService" />

    <bean id="shibboleth.metrics.MetadataGaugeSet"
        class="net.shibboleth.idp.saml.metadata.impl.MetadataResolverServiceGaugeSet" lazy-init="true"
        c:metricName="metadata"
        p:service-ref="shibboleth.MetadataResolverService" />

    <bean id="shibboleth.metrics.RelyingPartyGaugeSet"
        class="net.shibboleth.idp.metrics.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="relyingparty"
        p:service-ref="shibboleth.RelyingPartyResolverService" />

    <bean id="shibboleth.metrics.NameIdentifierGaugeSet"
        class="net.shibboleth.idp.metrics.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="nameid"
        p:service-ref="shibboleth.NameIdentifierGenerationService" />

    <bean id="shibboleth.metrics.AttributeResolverGaugeSet"
        class="net.shibboleth.idp.attribute.resolver.impl.AttributeResolverServiceGaugeSet" lazy-init="true"
        c:metricName="attribute.resolver"
        p:service-ref="shibboleth.AttributeResolverService" />

    <bean id="shibboleth.metrics.AttributeFilterGaugeSet"
        class="net.shibboleth.idp.metrics.ReloadableServiceGaugeSet" lazy-init="true"
        c:metricName="attribute.filter"
        p:service-ref="shibboleth.AttributeFilterService" />
        
</beans>
