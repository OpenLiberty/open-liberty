<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
    default-init-method="initialize"
    default-destroy-method="destroy">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />
    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />

    <!-- These are beans that are common to most or all SAML profile flows, regardless of version. -->

    <bean id="PopulateMetricContext"
        class="org.opensaml.profile.action.impl.PopulateMetricContext" scope="prototype"
        p:metricStrategy="#{getObject('shibboleth.metrics.MetricStrategy')}" />

    <!-- Declares audit field extractor functions injected into beans that populate the audit context. -->
    <import resource="../../conf/audit-system.xml" />

    <bean id="PostDecodePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.PostDecodeAuditExtractors') ?: getObject('shibboleth.DefaultPostDecodeAuditExtractors')}" />

    <bean id="CheckMessageVersion"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.CheckMessageVersionHandler" scope="prototype"
                p:ignoreMissingOrUnrecognized="true" />
        </constructor-arg>
        <property name="errorEvent">
            <util:constant static-field="org.opensaml.profile.action.EventIds.INVALID_MESSAGE_VERSION" />
        </property>
    </bean>

    <bean id="SAML1ArtifactRequestIssuer"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.saml1.binding.impl.SAML1ArtifactRequestIssuerHandler" scope="prototype"
                p:artifactMap-ref="shibboleth.SAMLArtifactMap" />
        </constructor-arg>
    </bean>

    <bean id="SAMLProtocolAndRole"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLProtocolAndRoleHandler" scope="prototype"
                p:protocol-ref="shibboleth.MetadataLookup.Protocol"
                p:role-ref="shibboleth.MetadataLookup.Role" />
        </constructor-arg>
    </bean>
    
    <bean id="SAMLMetadataLookup"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLMetadataLookupHandler" scope="prototype">
                <property name="roleDescriptorResolver">
                    <bean class="org.opensaml.saml.metadata.resolver.impl.PredicateRoleDescriptorResolver"
                        c:mdResolver-ref="shibboleth.MetadataResolver" />
                </property>
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="SAMLPopulateAttributeConsumingService"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:executionDirection="INBOUND">
        <constructor-arg name="messageHandler">
            <bean class="org.opensaml.saml.common.binding.impl.SAMLAddAttributeConsumingServiceHandler" scope="prototype" />
        </constructor-arg>
    </bean>

    <bean id="InitializeRelyingPartyContexFromSAMLPeer"
        class="net.shibboleth.idp.saml.profile.impl.InitializeRelyingPartyContextFromSAMLPeer" scope="prototype" />

    <bean id="SelectRelyingPartyConfiguration"
        class="net.shibboleth.idp.profile.impl.SelectRelyingPartyConfiguration" scope="prototype"
        p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyConfigurationResolver" />
    
    <bean id="PostLookupPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.PostLookupAuditExtractors') ?: getObject('shibboleth.DefaultPostLookupAuditExtractors')}" />

    <bean id="SelectProfileConfiguration"
        class="net.shibboleth.idp.profile.impl.SelectProfileConfiguration" scope="prototype" />
        
    <bean id="PopulateSignatureValidationParameters"
        class="org.opensaml.profile.action.impl.PopulateSignatureValidationParameters" scope="prototype"
        p:configurationLookupStrategy-ref="shibboleth.SignatureValidationConfigurationLookup"
        p:signatureValidationParametersResolver-ref="shibboleth.SignatureValidationParametersResolver" />

    <bean id="PopulateClientTLSValidationParameters"
        class="org.opensaml.profile.action.impl.PopulateClientTLSValidationParameters" scope="prototype"
        p:configurationLookupStrategy-ref="shibboleth.ClientTLSValidationConfigurationLookup"
        p:clientTLSValidationParametersResolver-ref="shibboleth.ClientTLSValidationParametersResolver" />

    <bean id="PopulateInboundInterceptContext"
            class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
            p:availableFlows-ref="shibboleth.AvailableInterceptFlows">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.profile.config.navigate.InboundFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="InitializeOutboundMessageContext"
        class="net.shibboleth.idp.saml.profile.impl.InitializeOutboundMessageContext" scope="prototype" />

    <bean id="PopulateBindingAndEndpointContexts"
        class="net.shibboleth.idp.saml.profile.impl.PopulateBindingAndEndpointContexts" scope="prototype"
        p:endpointResolver-ref="shibboleth.EndpointResolver"
        p:endpointType="#{getObject('shibboleth.EndpointType')}"
        p:bindings-ref="shibboleth.OutgoingBindings"
        p:artifactImpliesSecureChannel="%{idp.artifact.secureChannel:true}" />
        
    <bean id="PopulateDelegationContext"
            class="net.shibboleth.idp.saml.saml2.profile.delegation.impl.PopulateDelegationContext" scope="prototype">
        <property name="credentialResolver" ref="shibboleth.MetadataCredentialResolver" />
    </bean>

    <bean id="PopulateResponseSignatureSigningParameters"
            class="org.opensaml.saml.common.profile.impl.PopulateSignatureSigningParameters" scope="prototype"
            p:configurationLookupStrategy-ref="shibboleth.SignatureSigningConfigurationLookup"
            p:signatureSigningParametersResolver-ref="shibboleth.SignatureSigningParametersResolver">
        <property name="activationCondition">
            <bean class="net.shibboleth.idp.saml.profile.config.logic.SignResponsesPredicate" />
        </property>
    </bean>

    <bean id="PopulateRequestSignatureSigningParameters"
            class="org.opensaml.saml.common.profile.impl.PopulateSignatureSigningParameters" scope="prototype"
            p:configurationLookupStrategy-ref="shibboleth.SignatureSigningConfigurationLookup"
            p:signatureSigningParametersResolver-ref="shibboleth.SignatureSigningParametersResolver">
        <property name="activationCondition">
            <bean class="net.shibboleth.idp.saml.profile.config.logic.SignRequestsPredicate" />
        </property>
    </bean>

    <bean id="PopulateAssertionSignatureSigningParameters"
            class="org.opensaml.saml.common.profile.impl.PopulateSignatureSigningParameters" scope="prototype"
            p:configurationLookupStrategy-ref="shibboleth.SignatureSigningConfigurationLookup"
            p:signatureSigningParametersResolver-ref="shibboleth.SignatureSigningParametersResolver">
        <property name="activationCondition">
            <bean parent="shibboleth.Conditions.OR">
                <constructor-arg>
                    <bean class="net.shibboleth.idp.saml.profile.config.logic.SignAssertionsPredicate"
                        p:honorMetadata="%{idp.signing.honorWantAssertionsSigned:true}" />
                </constructor-arg>
                <constructor-arg ref="shibboleth.Conditions.IssuingDelegatedAssertion" />
            </bean>
        </property>
        <property name="securityParametersContextLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookupOrCreate.SecurityParameters"
                c:f-ref="shibboleth.ChildLookup.RelyingParty" />
        </property>
        <property name="existingParametersContextLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookup.SecurityParameters"
                c:f-ref="shibboleth.MessageContextLookup.Outbound" />
        </property>
    </bean>
    
    <bean id="PopulateEncryptionParameters"
            class="net.shibboleth.idp.saml.saml2.profile.impl.PopulateEncryptionParameters" scope="prototype"
            p:configurationLookupStrategy-ref="shibboleth.EncryptionConfigurationLookup"
            p:encryptionParametersResolver-ref="shibboleth.EncryptionParametersResolver"
            p:protocol-ref="shibboleth.MetadataLookup.Protocol"
            p:role-ref="shibboleth.MetadataLookup.Role" />

    <bean id="PopulateDecryptionParameters"
        class="org.opensaml.profile.action.impl.PopulateDecryptionParameters" scope="prototype"
        p:configurationLookupStrategy-ref="shibboleth.DecryptionConfigurationLookup"
        p:decryptionParametersResolver-ref="shibboleth.DecryptionParametersResolver" />
        
    <bean id="DecryptNameIDs" class="org.opensaml.saml.saml2.profile.impl.DecryptNameIDs" scope="prototype" />

    <bean id="ExtractSubjectFromRequest"
            class="net.shibboleth.idp.saml.profile.impl.ExtractSubjectFromRequest" scope="prototype">
        <property name="nameIDPolicyPredicate">
            <bean class="org.opensaml.saml.common.profile.logic.AffiliationNameIDPolicyPredicate"
                    p:metadataResolver-ref="shibboleth.MetadataResolver"
                    p:responderIdLookupStrategy-ref="shibboleth.ResponderIdLookup.Simple"
                    p:requesterIdLookupStrategy-ref="shibboleth.RelyingPartyIdLookup.Simple">
                <property name="objectLookupStrategy">
                    <bean class="net.shibboleth.idp.saml.profile.impl.ExtractSubjectFromRequest.SubjectNameLookupFunction" />
                </property>
                <property name="formats">
                    <util:list>
                        <value>urn:mace:shibboleth:1.0:nameIdentifier</value>
                        <value>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</value>
                        <value>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</value>
                    </util:list>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="PopulateSubjectCanonicalizationContext"
        class="net.shibboleth.idp.authn.impl.PopulateSubjectCanonicalizationContext" scope="prototype"
        p:availableFlows-ref="shibboleth.SAMLSubjectCanonicalizationFlows" />

    <bean id="FinalizeSAMLSubjectCanonicalization"
        class="net.shibboleth.idp.saml.profile.impl.FinalizeSAMLSubjectCanonicalization" scope="prototype" />

    <bean id="PopulateClientStorageLoadContext"
        class="org.opensaml.storage.impl.client.PopulateClientStorageLoadContext" scope="prototype"
        p:storageServices="#{ getObject('shibboleth.ClientStorageServices') ?: getObject('shibboleth.DefaultClientStorageServices') }" />

    <bean id="InitializeAuthenticationContext"
        class="net.shibboleth.idp.saml.profile.impl.InitializeAuthenticationContext" scope="prototype" />

    <bean id="InitialAuthenticationFlag" class="java.lang.Boolean">
        <constructor-arg value="#{ '%{idp.authn.flows.initial:}'.trim().length() gt 0 }" type="boolean" />
    </bean>

    <bean id="ResolveAttributes" class="net.shibboleth.idp.profile.impl.ResolveAttributes" scope="prototype"
        c:resolverService-ref="shibboleth.AttributeResolverService"
        p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}" />

    <bean id="FilterAttributes" class="net.shibboleth.idp.profile.impl.FilterAttributes" scope="prototype"
        c:filterService-ref="shibboleth.AttributeFilterService"
        p:maskFailures="%{idp.service.attribute.filter.maskFailures:true}" />

    <bean id="FilterByQueriedAttributeDesignators"
        class="net.shibboleth.idp.saml.saml1.profile.impl.FilterByQueriedAttributeDesignators" scope="prototype"
        c:mapper-ref="shibboleth.SAML1AttributeDesignatorsMapperService" />

    <bean id="FilterByQueriedAttributes"
        class="net.shibboleth.idp.saml.saml2.profile.impl.FilterByQueriedAttributes" scope="prototype"
        c:mapper-ref="shibboleth.SAML2AttributesMapperService" />

    <bean id="PopulatePostAuthnInterceptContext"
            class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
            p:availableFlows-ref="shibboleth.AvailableInterceptFlows">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.authn.config.navigate.PostAuthenticationFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="AddInResponseToToResponse"
            class="org.opensaml.saml.common.profile.impl.AddInResponseToToResponse" scope="prototype">
        <property name="requestIdLookupStrategy">
            <bean class="org.opensaml.saml.common.profile.impl.AddInResponseToToResponse.DefaultRequestIdLookupStrategy"
                p:suppressForBindings="#{ {'urn:mace:shibboleth:1.0:profiles:AuthnRequest', 'urn:mace:shibboleth:2.0:profiles:AuthnRequest'} }"/>
        </property>
    </bean>

    <bean id="AddNotBeforeConditionToAssertions"
            class="org.opensaml.saml.common.profile.impl.AddNotBeforeConditionToAssertions" scope="prototype">
        <property name="activationCondition">
            <bean class="net.shibboleth.idp.saml.profile.config.logic.NotBeforeProfileConfigPredicate" />
        </property>
    </bean>

    <bean id="AddNotOnOrAfterConditionToAssertions"
            class="org.opensaml.saml.common.profile.impl.AddNotOnOrAfterConditionToAssertions" scope="prototype"
            p:defaultAssertionLifetime="PT5M">
        <property name="assertionLifetimeStrategy">
            <bean class="net.shibboleth.idp.saml.profile.config.navigate.AssertionLifetimeLookupFunction" />
        </property>
    </bean>

    <bean id="AddAudienceRestrictionToAssertions"
            class="org.opensaml.saml.common.profile.impl.AddAudienceRestrictionToAssertions" scope="prototype">
        <property name="audienceRestrictionsLookupStrategy">
            <bean class="net.shibboleth.idp.saml.profile.config.navigate.AudienceRestrictionsLookupFunction" />
        </property>
    </bean>

    <bean id="SignAssertions" class="org.opensaml.saml.common.profile.impl.SignAssertions" scope="prototype">
        <property name="securityParametersLookupStrategy">
            <bean class="com.google.common.base.Functions" factory-method="compose"
                c:g-ref="shibboleth.ChildLookup.SecurityParameters"
                c:f-ref="shibboleth.ChildLookup.RelyingParty" />
        </property>
    </bean>

    <bean id="PostAssertionPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.PostAssertionAuditExtractors') ?: getObject('shibboleth.DefaultPostAssertionAuditExtractors')}" />

    <bean id="PostResponsePopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.PostResponseAuditExtractors') ?: getObject('shibboleth.DefaultPostResponseAuditExtractors')}" />

    <bean id="PopulateClientStorageSaveContext"
        class="org.opensaml.storage.impl.client.PopulateClientStorageSaveContext" scope="prototype"
        p:storageServices="#{ getObject('shibboleth.ClientStorageServices') ?: getObject('shibboleth.DefaultClientStorageServices') }" />

    <bean id="PopulateOutboundInterceptContext"
            class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" scope="prototype"
            p:availableFlows-ref="shibboleth.AvailableInterceptFlows">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.profile.config.navigate.OutboundFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="HandleOutboundMessage"
            class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" scope="prototype"
            c:messageHandler-ref="shibboleth.PreEncodeMessageHandler"
            c:executionDirection="OUTBOUND">
        <property name="errorEvent">
            <util:constant static-field="org.opensaml.profile.action.EventIds.MESSAGE_PROC_ERROR" />
        </property>
    </bean>

    <bean id="messageEncoderFactory" class="net.shibboleth.idp.saml.profile.impl.SpringAwareMessageEncoderFactory"
        p:bindings-ref="shibboleth.OutgoingBindings" />

    <bean id="EncodeMessage" class="org.opensaml.profile.action.impl.EncodeMessage" scope="prototype"
        p:messageEncoderFactory-ref="messageEncoderFactory"
        p:messageHandler="#{getObject('shibboleth.BindingSpecificMessageHandler')}" />

    <bean id="RecordResponseComplete" class="net.shibboleth.idp.profile.impl.RecordResponseComplete" scope="prototype" />

    <bean id="WriteAuditLog" class="net.shibboleth.idp.profile.audit.impl.WriteAuditLog" scope="prototype"
        p:formattingMap-ref="shibboleth.AuditFormattingMap"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />
        
    <bean id="WriteFTICKSLog" class="net.shibboleth.idp.saml.audit.impl.WriteFTICKSLog" scope="prototype"
        p:activationCondition="#{'%{idp.fticks.federation:null}' != 'null'}"
        p:federationId="#{'%{idp.fticks.federation:Undefined}'.trim()}"
        p:digestAlgorithm="#{'%{idp.fticks.algorithm:SHA-256}'.trim()}" p:salt="%{idp.fticks.salt:}" />

    <bean id="LocalErrorPredicate"
            class="org.opensaml.saml.common.profile.logic.DefaultLocalErrorPredicate"
            p:localEvents="#{getObject('shibboleth.LocalEventMap').keySet()}">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
    </bean>

    <bean id="LogEvent" class="org.opensaml.profile.action.impl.LogEvent" scope="prototype"
            p:suppressedEvents="#{getObject('shibboleth.SuppressedEvents') ?: getObject('shibboleth.DefaultSuppressedEvents')}">
        <property name="eventContextLookupStrategy">
            <bean class="net.shibboleth.idp.profile.context.navigate.WebFlowCurrentEventLookupFunction" />
        </property>
    </bean>
    
    <bean id="MapEventToView"
        class="net.shibboleth.idp.profile.context.navigate.SpringEventToViewLookupFunction"
        p:defaultView-ref="shibboleth.DefaultErrorView"
        p:eventMap="#{getObject('shibboleth.EventViewMap')}" />
    
    <bean id="ErrorViewPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext"
        p:fieldExtractors="#{getObject('shibboleth.ErrorViewAuditExtractors') ?: getObject('shibboleth.DefaultErrorViewAuditExtractors')}" />

    <bean id="PopulateUserAgentContext"
        class="net.shibboleth.idp.profile.impl.PopulateUserAgentContext" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />

</beans>
