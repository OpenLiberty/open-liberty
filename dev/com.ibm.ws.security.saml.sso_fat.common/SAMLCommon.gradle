/*******************************************************************************
 * Copyright (c) 2021 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
  
task copyShibbolethServer (dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble']) {
  doLast {
    println 'in copyShibbolethServer'
    def serverName = "com.ibm.ws.security.saml.sso-2.0_fat.shibboleth"

    // updateShibbolethServerFiles -->
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, "publish/servers/${serverName}/configs")
      into new File(autoFvtDir, "publish/servers/${serverName}/configs")
    }
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, "publish/servers/${serverName}/bootstrap.properties")
    into new File(autoFvtDir, "publish/servers/${serverName}")
    }
    // copyTestMarker
    copy {
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }
    // enable ldap trace
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/envVars/jvm.options')
      into new File(autoFvtDir, "publish/servers/${serverName}")
    }
//
// The restricted policy files have been standard for a while now. They shouldn't be needed.
//
//  copy { 
//    from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/policyFiles')
//    into new File(autoFvtDir, "publish/servers/${serverName}/policyFiles")
//  }
    // copyShibbolethTestAppFilesToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/idp.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
    }
    // copySecurityKeysToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include "*.jks", "*.arm"
    }
    copy {
      from new File(projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include "*.jks", "*.arm"
    }
  }
  
}

task copyShibKeys () {
   doLast {
     copy {
      from project(':com.ibm.ws.security.saml.sso_fat.common').projectDir
      into autoFvtDir
      include 'securitykeys/**'
     }
   }
}

task copyApache (dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble', 'copyShibKeys']) {
  doLast {
    /*
     * Copy the local ApacheDS LDAP instances. 
     */
    copy {
      from project(':com.ibm.ws.org.apache.directory.server').projectDir
      into autoFvtDir
      include 'apacheds-2.0.0-M15/**'
    }
    copy {
      from project(':com.ibm.ws.security.saml.sso_fat.common').buildDir
      into autoFvtDir
      include 'shibboleth-idp/**'
    }
  }
}

task copyResolver (dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble']) {
  doLast {
    copy { 
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'com.ibm.ws.security.saml.resolver.sample.jar')
      into new File(autoFvtDir, 'publish/bundles')
      rename 'com.ibm.ws.security.saml.resolver.sample.jar', 'com.ibm.ws.security.saml.resolver.sample_1.0.jar'
    }

    copy { 
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/features/samlUserResolver-1.0.mf')
      into new File(autoFvtDir, 'publish/features')
    }
  }
}

task copyCommonLogoutServers() {
  doLast {
    if (project.findProperty('shareLogoutServers')) {
      println "copy all logout server files"
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/servers')
        into new File(autoFvtDir, "publish/servers")
        include '**/**'
      }  
    } 
  }
}

/**************************************************************************************************************
 *
 *        N   N    OO    TTTTT  EEEEE
 *        NN  N   O  O     T    E
 *        N N N  O    O    T    EEE
 *        N  NN   O  O     T    E
 *        N   N    OO      T    EEEEE
 *
 **************************************************************************************************************/
/**************************************************************************************************************
 *  Please read:                                                                                              *
 *     The next 3 tasks are basically clones of each other - each of our SAML FAT projects                    *
 *     creates 1 -3 servers that are created by copying the same content from common projects.  I haven't     *
 *     figured out a clever way to a) pass the servers name into a common method that I b) call multiple      *
 *     times.  The gradle.properties file in each of the test projects defines which servers to create and    *
 *     gives each server an name.  In addition a property can be set to indicate if the apps should be        *
 *     applied:  Sample gradle.properties                                                                     *
 *     serverName1=com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.rs                                              *
 *     serverName2=com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.sp                                              *
 *     serverName3=com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.merged_sp_rs                                    *
 *     helloworldWar=true                                                                                     *
 *     jaxrsclientWar=true                                                                                    *
 *     task copySamlFatServer1 uses serverName1 and checks if helloworldWar is set, task copySamlFatServer2   *
 *     uses serverName2, ...                                                                                  *
 **************************************************************************************************************/
task copySamlFatServer1(dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble', 'copyCommonLogoutServers']) {
  doLast {
    /*****************************************************************
     * Server: com.ibm.ws.security.saml.sso-2.0_fat
     *****************************************************************/
    println "in copySamlFatServer1"
    if (project.findProperty('serverName1')) {
    def serverName = project.findProperty('serverName1')
    println "serverName1: ${serverName}"
    if (project.findProperty('shareLogoutServers')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**.**'
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '*/*.xml.orig'
      }
    } 
    copy {  
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
    }
    // copyTestMarker
    copy {
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }
    // copySecurityKeysToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*.jks', '*.arm'
    }
    copy {
      from new File(projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*.jks', '.arm'
    }
    // copySecurityDefaultFilesToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
    }
    // copyCommonServerXmlFeatures
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**features*.xml'
    }
    // copyCommonServerXmlMisc
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**misc.xml'
    }
    copy {
      from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include "**fatTestCommon.xml"
    }
    // copyCommonServerXmlRegistry
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**egistry*.xml'
    }
    // copyCommonServerXmlSSL
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**ssl*.xml', '**SSL*.xml'
    }
    // copyCommonServerXmlProvider
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**rovider*.xml', '**.base'
    }
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**/**'
    }
    // copyCommonServerXmlApplications
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**Application*.xml'
    }
    // copyServerXmlParts
    copy {
      from new File(projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**.xml'
      include '**.base'
    }
    copy {
      from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**/**'
    }
  
    // Copy files to LibertyFATTestFiles. This occurred in WS-CD-Open automatically b/c the files
    // were compiled in the source directories instead of the build directories.
    copy {
      from new File(autoFvtDir, "publish/servers/${serverName}/imports")
      into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
      include '**/*.orig'
    }
    if (project.findProperty('helloworldWar')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/helloworld.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
    }
    if (project.findProperty('httpServletReuqestAppWar')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/httpServletRequestApp.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
    }
  } else {
    println "We do not need server1"
  }
  }
}  

/** PLEASE read note above copySamlFatServer1 task method before updating this task **/
task copySamlFatServer2(dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble']) {
  doLast {
    /*****************************************************************
     * Server: com.ibm.ws.security.saml.sso-2.0_fat
     *****************************************************************/
    println "in copySamlFatServer2"
    if (project.findProperty('serverName2')) {
    def serverName = project.findProperty('serverName2')
    if (project.findProperty('shareLogoutServers')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**.**'
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '*/*.xml.orig'
      }
    } 
    println "serverName2: ${serverName}"
    copy {  
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
    }
    // copyTestMarker
    copy {
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }
    // copySecurityKeysToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*.jks', '*.arm'
    }
    copy {
      from new File(projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*.jks', '.arm'
    }
    // copySecurityDefaultFilesToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
    }
    // copyCommonServerXmlFeatures
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**features*.xml'
    }
    // copyCommonServerXmlMisc
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**misc.xml'
    }
    copy {
      from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include "**fatTestCommon.xml"
    }
    // copyCommonServerXmlRegistry
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**egistry*.xml'
    }
    // copyCommonServerXmlSSL
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**ssl*.xml', '**SSL*.xml'
    }
    // copyCommonServerXmlProvider
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**rovider*.xml', '**.base'
    }
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**/**'
    }
    // copyCommonServerXmlApplications
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**Application*.xml'
    }
    // copyServerXmlParts
    copy {
      from new File(projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**.xml'
      include '**.base'
    }
    copy {
      from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**/**'
    }
  
    // Copy files to LibertyFATTestFiles. This occurred in WS-CD-Open automatically b/c the files
    // were compiled in the source directories instead of the build directories.
    copy {
      from new File(autoFvtDir, "publish/servers/${serverName}/imports")
      into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
      include '**/*.orig'
    }
    if (project.findProperty('jaxrsclientWar')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/jaxrsclient.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
    }
    if (project.findProperty('httpServletReuqestAppWar')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/httpServletRequestApp.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
    }
  } else {
    println "We do not need server2"
  }
  }
}  

/** PLEASE read note above copySamlFatServer1 task method before updating this task **/
task copySamlFatServer3(dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble']) {
  doLast {
    /*****************************************************************
     * Server: com.ibm.ws.security.saml.sso-2.0_fat
     *****************************************************************/
    println "in copySamlFatServer3"
    if (project.findProperty('serverName3')) {
    def serverName = project.findProperty('serverName3')
    println "serverName3: ${serverName}"
    if (project.findProperty('shareLogoutServers')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**.**'
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '*/*.xml.orig'
      }
    } 
    copy {  
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
    }
    // copyTestMarker
    copy {
      from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
      into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
    }
    // copySecurityKeysToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*.jks', '*.arm'
    }
    copy {
      from new File(projectDir, 'securitykeys')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*.jks', '.arm'
    }
    // copySecurityDefaultFilesToServer
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}")
      include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
    }
    // copyCommonServerXmlFeatures
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**features*.xml'
    }
    // copyCommonServerXmlMisc
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**misc.xml'
    }
    copy {
      from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include "**fatTestCommon.xml"
    }
    // copyCommonServerXmlRegistry
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**egistry*.xml'
    }
    // copyCommonServerXmlSSL
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**ssl*.xml', '**SSL*.xml'
    }
    // copyCommonServerXmlProvider
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**rovider*.xml', '**.base'
    }
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**/**'
    }
    // copyCommonServerXmlApplications
    copy {
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**Application*.xml'
    }
    // copyServerXmlParts
    copy {
      from new File(projectDir, 'publish/files/serversettings')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**.xml'
      include '**.base'
    }
    copy {
      from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
      into new File(autoFvtDir, "publish/servers/${serverName}/imports")
      include '**/**'
    }
  
    // Copy files to LibertyFATTestFiles. This occurred in WS-CD-Open automatically b/c the files
    // were compiled in the source directories instead of the build directories.
    copy {
      from new File(autoFvtDir, "publish/servers/${serverName}/imports")
      into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
      include '**/*.orig'
    }
    if (project.findProperty('helloworldWar')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/helloworld.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
    }
    if (project.findProperty('jaxrsclientWar')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/jaxrsclient.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
    }
  } else {
    println "We do not need server3"
  }
  }
}  