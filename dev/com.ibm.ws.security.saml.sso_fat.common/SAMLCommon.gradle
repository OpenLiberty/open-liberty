/*******************************************************************************
 * Copyright (c) 2021 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
apply from: '../com.ibm.ws.security.saml.sso_fat.common/ShibbolethCommon.gradle'
  
repositories {
  if (isUsingArtifactory) {
    maven {
      credentials {
        username userProps.getProperty("artifactory.download.user")
        password userProps.getProperty("artifactory.download.token")
      }
      url ("https://" + gradle.userProps.getProperty("artifactory.download.server") + "/artifactory/wasliberty-maven-remote")
    }
  } else {
    mavenCentral()
  }
}  

dependencies {
  /*
   * httpunit 1.7 is NOT honoring CookieProperties.setDomainMatchingStrict(false) CookieProperties.setPathMatchingStrict(false).
   * These are needed to force the JSESSIONID to be sent back to the TFIM server.
   */
  requiredLibs project(':com.ibm.ws.security.saml.sso_fat.common'),
               project(':com.ibm.ws.org.apache.httpcomponents'),
               'commons-codec:commons-codec:1.4',
               'commons-logging:commons-logging:1.1.1',
               'httpunit:httpunit:1.6.2',                           // 1.7 has issues noted above
               'jtidy:jtidy:4aug2000r7-dev',
               'rhino:js:1.6R5',
               'xml-apis:xml-apis:1.4.01'
              
  /*
   * Previously we had an uber jar named htmlunit-2.20-OSGi.jar. It appears to have contained all of
   * the runtime dependencies for htmlunit. Instead of generating an uber jar, we'll add the dependencies
   * here. The uber jar also was configured to be an OSGi bundle, but it is not necessary for this bucket.
   */ 
  requiredLibs project(':com.ibm.ws.org.apache.commons.io'),        // htmlunit-2.44.0 --> 2.8.0
               project(':com.ibm.ws.org.apache.commons.lang3'),     // htmlunit-2.44.0 --> 3.11
               'net.sourceforge.htmlunit:htmlunit-core-js:2.44.0',
               'net.sourceforge.htmlunit:htmlunit-cssparser:1.6.0',
               'net.sourceforge.htmlunit:neko-htmlunit:2.44.0',
               'org.apache.httpcomponents:httpmime:4.5.12',
               'org.brotli:dec:0.1.2',
               'xalan:xalan:2.7.2',
               'xerces:xercesImpl:2.11.0'
}
  
task copyResolver (dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble']) {
  doLast {
    copy { 
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'com.ibm.ws.security.saml.resolver.sample.jar')
      into new File(autoFvtDir, 'publish/bundles')
      rename 'com.ibm.ws.security.saml.resolver.sample.jar', 'com.ibm.ws.security.saml.resolver.sample_1.0.jar'
    }

    copy { 
      from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/features/samlUserResolver-1.0.mf')
      into new File(autoFvtDir, 'publish/features')
    }
  }
}

task copyCommonLogoutServers() {
  doLast {
    if (project.findProperty('shareLogoutServers')) {
      println "copy all logout server files"
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/servers')
        into new File(autoFvtDir, "publish/servers")
        include '**/**'
      }  
    } 
  }
}

/**************************************************************************************************************
 *
 *        N   N    OO    TTTTT  EEEEE
 *        NN  N   O  O     T    E
 *        N N N  O    O    T    EEE
 *        N  NN   O  O     T    E
 *        N   N    OO      T    EEEEE
 *
 **************************************************************************************************************/
/**************************************************************************************************************
 *  Please read:                                                                                              *
 *     The next 3 tasks are basically clones of each other - each of our SAML FAT projects                    *
 *     creates 1 -3 servers that are created by copying the same content from common projects.  I haven't     *
 *     figured out a clever way to a) pass the servers name into a common method that I can call multiple     *
 *     times.  The gradle.properties file in each of the test projects defines which servers to create and    *
 *     gives each server an name.  In addition, a property can be set to indicate if the apps should be       *
 *     applied:  Sample gradle.properties                                                                     *
 *     rs_serverName=com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.rs                                            *
 *     sp_serverName=com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.sp                                            *
 *     merged_sp_rs_serverName=com.ibm.ws.security.saml.sso-2.0_fat.jaxrs.merged_sp_rs                        *
 *     helloworldWar=true                                                                                     *
 *     jaxrsclientWar=true                                                                                    *
 *     task copySamlFat_rs_server uses rs_serverName and checks if helloworldWar is set,                      *
 *     task copySamlFat_sp_server uses sp_serverName, ...                                                     *
 **************************************************************************************************************/
task copySamlFat_rs_server(dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble']) {
  doLast {
    println "in copySamlFat_rs_server"
    if (project.findProperty('rs_serverName')) {
      def serverName = project.findProperty('rs_serverName')
      println "rs_serverName: ${serverName}"
      if (project.findProperty('shareLogoutServers')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings')
          into new File(autoFvtDir, "publish/servers/${serverName}/imports")
          include '**.**'
        }
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings/SAMLServerFiles')
          into new File(autoFvtDir, "publish/servers/${serverName}/imports")
          include '*/*.xml.orig'
        }
      } 
      copy {  
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
        into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
      // copyTestMarker
      copy {
        from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
      }
      // copySecurityKeysToServer
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*.jks', '*.arm'
      }
      copy {
        from new File(projectDir, 'securitykeys')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*.jks', '.arm'
      }
      // copySecurityDefaultFilesToServer
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
      }
      // copyCommonServerXmlFeatures
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**features*.xml'
      }
      // copyCommonServerXmlMisc
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**misc.xml'
      }
      copy {
        from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include "**fatTestCommon.xml"
      }
      // copyCommonServerXmlRegistry
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**egistry*.xml'
      }
      // copyCommonServerXmlSSL
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**ssl*.xml', '**SSL*.xml'
      }
      // copyCommonServerXmlProvider
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**rovider*.xml', '**.base'
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**/**'
      }
      // copyCommonServerXmlApplications
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**Application*.xml'
      }
      // copyServerXmlParts
      copy {
        from new File(projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**.xml'
        include '**.base'
      }
      copy {
        from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**/**'
      }
  
      // Copy files to LibertyFATTestFiles. This occurred in WS-CD-Open automatically b/c the files
      // were compiled in the source directories instead of the build directories.
      copy {
        from new File(autoFvtDir, "publish/servers/${serverName}/imports")
        into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
        include '**/*.orig'
      }
      if (project.findProperty('helloworldWar')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/helloworld.war')
          into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
        }
      }
      if (project.findProperty('httpServletRequestAppWar')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/httpServletRequestApp.war')
          into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
        }
      }
    } else {
      println "We do not need the rs server"
    }
  }
}  

/** PLEASE read note above copySamlFat_rs_server task method before updating this task **/
task copySamlFat_sp_server(dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble', 'copyCommonLogoutServers']) {
  doLast {
    println "in copySamlFat_sp_Server"
    if (project.findProperty('sp_serverName')) {
      def serverName = project.findProperty('sp_serverName')
      println "sp_serverName: ${serverName}"
      if (project.findProperty('shareLogoutServers')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings')
          into new File(autoFvtDir, "publish/servers/${serverName}/imports")
          include '**.**'
        }
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings/SAMLServerFiles')
          into new File(autoFvtDir, "publish/servers/${serverName}/imports")
          include '*/*.xml.orig'
        }
      } 
      copy {  
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
        into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
      // copyTestMarker
      copy {
        from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
      }
      // copySecurityKeysToServer
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*.jks', '*.arm'
      }
      copy {
        from new File(projectDir, 'securitykeys')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*.jks', '.arm'
      }
      // copySecurityDefaultFilesToServer
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
      }
      // copyCommonServerXmlFeatures
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**features*.xml'
      }
      // copyCommonServerXmlMisc
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**misc.xml'
      }
      copy {
        from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include "**fatTestCommon.xml"
      }
      // copyCommonServerXmlRegistry
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**egistry*.xml'
      }
      // copyCommonServerXmlSSL
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**ssl*.xml', '**SSL*.xml'
      }
      // copyCommonServerXmlProvider
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**rovider*.xml', '**.base'
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**/**'
      }
      // copyCommonServerXmlApplications
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**Application*.xml'
      }
      // copyServerXmlParts
      copy {
        from new File(projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**.xml'
        include '**.base'
      }
      copy {
        from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**/**'
      }
  
      // Copy files to LibertyFATTestFiles. This occurred in WS-CD-Open automatically b/c the files
      // were compiled in the source directories instead of the build directories.
      copy {
        from new File(autoFvtDir, "publish/servers/${serverName}/imports")
        into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
        include '**/*.orig'
      }
      if (project.findProperty('jaxrsclientWar')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/jaxrsclient.war')
          into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
        }
      }
      if (project.findProperty('httpServletRequestAppWar')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/httpServletRequestApp.war')
          into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
        }
      }
    } else {
      println "We do not need the sp server"
    }
  }
}  

/** copySamlFatMerged_sp_rs_Server and copySamlFat_secondSP_mergedSPRS_server perform the same steps - to make the names more clear, 
     we'll use unique targets, that in the end use a common target **/
task copySamlFatMerged_sp_rs_server(dependsOn: 'copySamlFat_secondSP_mergedSPRS_server') {}
task copySamlFat_second_sp_server(dependsOn: 'copySamlFat_secondSP_mergedSPRS_server') {}

/** PLEASE read note above copySamlFat_rs_server task method before updating this task **/
task copySamlFat_secondSP_mergedSPRS_server(dependsOn: [':com.ibm.ws.security.fat.common:assemble', ':com.ibm.ws.security.saml.sso_fat.common:assemble']) {
  doLast {
    println "in copySamlFat_secondSP_mergedSPRS_server"
    if (project.findProperty('second_sp_serverName') || project.findProperty('merged_sp_rs_serverName')) {
 	  def serverName = ""
      if (project.findProperty('second_sp_serverName')) {
        serverName = project.findProperty('second_sp_serverName')
        println "second_sp_serverName: ${serverName}"
      } else {
        serverName = project.findProperty('merged_sp_rs_serverName')
        println "merged_sp_rs_serverName: ${serverName}"
      }
      if (project.findProperty('shareLogoutServers')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings')
          into new File(autoFvtDir, "publish/servers/${serverName}/imports")
          include '**.**'
        }
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.logout').projectDir, 'publish/files/serversettings/SAMLServerFiles')
          into new File(autoFvtDir, "publish/servers/${serverName}/imports")
          include '*/*.xml.orig'
        }
      } 
      copy {  
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/SAML_Demo.ear')
        into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/samlclient.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
      // copyTestMarker
      copy {
        from new File(project(':com.ibm.ws.security.fat.common').buildDir, 'test-application/testmarker.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/dropins")
      }
      // copySecurityKeysToServer
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'securitykeys')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*.jks', '*.arm'
      }
      copy {
        from new File(projectDir, 'securitykeys')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*.jks', '.arm'
      }
      // copySecurityDefaultFilesToServer
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}")
        include '*/idpMetadata.xml', '*/idpMetadata.xml.orig'
      }
      // copyCommonServerXmlFeatures
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**features*.xml'
      }
      // copyCommonServerXmlMisc
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**misc.xml'
      }
      copy {
        from new File(project(':fattest.simplicity').projectDir, 'autoFVT-defaults')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include "**fatTestCommon.xml"
      }
      // copyCommonServerXmlRegistry
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**egistry*.xml'
      }
      // copyCommonServerXmlSSL
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**ssl*.xml', '**SSL*.xml'
      }
      // copyCommonServerXmlProvider
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**rovider*.xml', '**.base'
      }
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**/**'
      }
      // copyCommonServerXmlApplications
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**Application*.xml'
      }
      // copyServerXmlParts
      copy {
        from new File(projectDir, 'publish/files/serversettings')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**.xml'
        include '**.base'
      }
      copy {
        from new File(projectDir, 'publish/files/serversettings/SAMLServerFiles')
        into new File(autoFvtDir, "publish/servers/${serverName}/imports")
        include '**/**'
      }
  
      // Copy files to LibertyFATTestFiles. This occurred in WS-CD-Open automatically b/c the files
      // were compiled in the source directories instead of the build directories.
      copy {
        from new File(autoFvtDir, "publish/servers/${serverName}/imports")
        into new File(autoFvtDir, 'lib/LibertyFATTestFiles/serversettings/SAMLServerFiles')
        include '**/*.orig'
      }
      if (project.findProperty('helloworldWar')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/helloworld.war')
          into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
	     }
      }
      if (project.findProperty('jaxrsclientWar')) {
        copy {
          from new File(project(':com.ibm.ws.security.saml.sso_fat.jaxrs').buildDir, 'test-application/jaxrsclient.war')
          into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
        }
      }
      if (project.findProperty('httpServletRequestAppWar')) {
      copy {
        from new File(project(':com.ibm.ws.security.saml.sso_fat.common').buildDir, 'test-application/httpServletRequestApp.war')
        into new File(autoFvtDir, "publish/servers/${serverName}/test-apps")
      }
    }
      
    } else {
      println "We do not need a second sp server or a merged sp/rs server"
    }
  }
}
  
addRequiredLibraries.dependsOn addJakartaTransformer
