<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	~ Copyright (c) 2022 IBM Corporation and others. All rights reserved. 
	~ This program and the accompanying materials are made available under the 
	~ terms of the Eclipse Public License 2.0 which accompanies this distribution, 
	~ and is available at 
	~    http://www.eclipse.org/legal/epl-2.0/
    
    SPDX-License-Identifier: EPL-2.0 
	~ Contributors: 
	~    IBM Corporation - initial API and implementation 
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>io.openliberty.jakarta.data</groupId>
	<artifactId>tck.runner.core</artifactId>
	<version>1.0-SNAPSHOT</version>
	<name>Jakarta Data TCK Runner TCK Module</name>

	<repositories>
		<!-- For artifacts not yet in Maven Central -->
		<repository>
			<id>sonatype-nexus-staging</id>
			<name>Sonatype Nexus Staging</name>
			<url>https://jakarta.oss.sonatype.org/content/repositories/staging/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<!-- For artifacts not yet in Stagging repo use DHE -->
		<repository>
			<name>IBM DHE Maven repository</name>
			<id>DHE</id>
			<url>https://public.dhe.ibm.com/ibmdl/export/pub/software/olrepo</url>
		</repository>
	</repositories>

	<properties>
		<!-- Global Maven settings -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- TODO Jakarta 11 might require java 17 -->
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
		<maven.compiler.release>11</maven.compiler.release>

		<!-- Jakarta EE API -->
		<jakarta.data.groupid>jakarta.data</jakarta.data.groupid>
		<jakarta.data.version>1.0.0-SNAPSHOT</jakarta.data.version>
		<jakarta.data.tck.version>1.0.0-SNAPSHOT</jakarta.data.tck.version>
		<jakarta.cdi.version>4.0.1</jakarta.cdi.version>

		<!-- Test Infrastructure versions -->
		<arquillian.version>1.7.0.Alpha13</arquillian.version>
		<arquillian.wlp.version>2.1.2</arquillian.wlp.version>
		<junit.version>5.9.0</junit.version>
		<sigtest.version>1.6</sigtest.version>

		<!-- Used in arquillian.xml passed from test suite -->
		<wlp>${wlp}</wlp>

		<targetDirectory>${project.basedir}/target</targetDirectory>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>${arquillian.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>${junit.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<dependencies>
		<!-- tck - data - external TCK -->
		<dependency>
			<groupId>${jakarta.data.groupid}</groupId>
			<artifactId>jakarta-data-tck</artifactId>
			<version>${jakarta.data.tck.version}</version>
		</dependency>
		<!-- api - data - internal bundle -->
		<dependency>
			<groupId>${jakarta.data.groupid}</groupId>
			<artifactId>jakarta-data-api</artifactId>
			<version>${jakarta.data.version}</version>
			<systemPath>${io.openliberty.jakarta.data.1.0}</systemPath>
			<scope>system</scope>
		</dependency>
		<!-- impl - data - internal bundle -->
		<dependency>
			<groupId>${jakarta.data.groupid}</groupId>
			<artifactId>jakarta-data-impl</artifactId>
			<version>${jakarta.data.version}</version>
			<scope>system</scope>
			<systemPath>${io.openliberty.data.internal}</systemPath>
		</dependency>

		<!-- The Liberty Arquillian plugin -->
		<dependency>
			<groupId>io.openliberty.arquillian</groupId>
			<artifactId>arquillian-liberty-managed-jakarta-junit5</artifactId>
			<version>${arquillian.wlp.version}</version>
			<type>pom</type>
		</dependency>

		<!-- Internal APIs needed by Liberty Arquillan Plugin -->
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>6.0</version>
			<scope>system</scope>
			<systemPath>${io.openliberty.jakarta.servlet.6.0}</systemPath>
		</dependency>
		<dependency>
			<groupId>jakarta.enterprise</groupId>
			<artifactId>jakarta.enterprise.cdi-api</artifactId>
			<version>4.0</version>
			<scope>system</scope>
			<systemPath>${io.openliberty.jakarta.cdi.4.0}</systemPath>
		</dependency>
		<dependency>
			<groupId>org.jboss.weld5</groupId>
			<artifactId>weld-core</artifactId>
			<version>1.0</version>
			<scope>system</scope>
			<systemPath>${io.openliberty.org.jboss.weld5}</systemPath>
		</dependency>

		<!-- Test dependencies needed by Liberty Arquillian Plugin for Junit5 -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit5</groupId>
			<artifactId>arquillian-junit5-container</artifactId>
		</dependency>

		<!-- Test dependency for signature testing -->
		<dependency>
			<groupId>org.netbeans.tools</groupId>
			<artifactId>sigtest-maven-plugin</artifactId>
			<version>${sigtest.version}</version>
		</dependency>
	</dependencies>

	<build>
		<directory>${targetDirectory}</directory>
		<defaultGoal>clean test</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.9</version>
				<executions>
					<execution>
						<id>build-classpath</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>build-classpath</goal>
						</goals>
						<configuration>
							<!-- configure the plugin here -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>11</source>
					<target>11</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M7</version>
				<configuration>
					<argLine>-Dfile.encoding=${project.build.sourceEncoding} -Dcom.ibm.tools.attach.enable=yes</argLine> <!-- Needed for ZOS. sourceEncoding is needed becuase arquillian calls string.getBtytes(). Attach is needed becuase because arquillian uses com.sun.tools.attach to find VMs -->
					<dependenciesToScan>
						<dependency>${jakarta.data.groupid}:jakarta-data-tck</dependency>
					</dependenciesToScan>
					<statelessTestsetReporter implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter">
						<usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>
						<usePhrasedTestCaseClassName>true</usePhrasedTestCaseClassName>
					</statelessTestsetReporter>
					<systemPropertyVariables>
						<wlp>${wlp}</wlp>
						<tck_server>${tck_server}</tck_server>
						<tck_port>${tck_port}</tck_port>
						<sun.rmi.transport.tcp.responseTimeout>${sun.rmi.transport.tcp.responseTimeout}</sun.rmi.transport.tcp.responseTimeout>
						<java.util.logging.config.file>${basedir}/../logging.properties</java.util.logging.config.file>
					</systemPropertyVariables>
					<groups>${jakarta.tck.platform}</groups> <!-- Groups to include i.e. standalone/core/web -->
					<excludedGroups>${test.excluded.groups}</excludedGroups> <!-- Groups to ignore i.e. signature -->
					<reportNameSuffix>${jakarta.tck.platform}</reportNameSuffix>
					<testSourceDirectory>${basedir}${file.separarator}src${file.separarator}main${file.separarator}java${file.separarator}</testSourceDirectory>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>